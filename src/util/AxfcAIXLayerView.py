#######################################################################
#   AxfcCustomGraph
#
#   Created: 2020. 11. 17
#
#   Authors:
#      Youngsun Han (youngsun@pknu.ac.kr)
#      Heng Sengthai (sengthai37@gmail.com)
#
#   High Performance Computing Laboratory (hpcl.pknu.ac.kr)
#######################################################################

from tensorflow.keras.preprocessing import image
import numpy as np
import json
import matplotlib.pyplot as plt
from time import gmtime, strftime
from util import *
import tensorflow as tf
import math
import os
from PIL import Image

#######################################################################
# AxfcAIXLayerView methods
#######################################################################

## This method is used to transform the each aix layer to the image.
# The aix layer file is generated by execute the aix layer
# @param aix_layer_path the path of aix layer (e.g ./aixh_layer0)
# @param dir_path the directory path for saving the image
# @param name the name for using on the top of image, also as the file name
def aix_layer_to_img(aix_layer_path: str, dir_path: str, name=None):
    layer = aix_layer_path

    with open(layer, 'r') as file:
        result_json = json.load(file)

    assert 'result' in result_json
    assert 'dims' in result_json
    assert len(result_json['dims']) == 4

    np_result = np.array(result_json['result'])
    dims = result_json['dims']

    reshape = np_result.reshape(1, dims[2], dims[1], dims[0])
    tf_result = np.einsum('NCHW->NHWC', reshape)

    num_chnls = tf_result.shape[3]
    grids = math.ceil(math.sqrt(num_chnls))
    fig, axes = plt.subplots(grids, grids, figsize=(50, 50))

    for i, ax in enumerate(axes.flat):
        if i < num_chnls:
            im = tf_result[0, :, :, i]

        ax.imshow(im, interpolation='nearest', cmap='seismic')

    name = strftime("%Y-%m-%d-%H-%M-%S", gmtime()) if name is None else name
    fig.suptitle(name, fontsize=100, y=0.94)
    plt.savefig('{}/{}.jpg'.format(dir_path, name), bbox_inches='tight')


## This method is used to generate image from the result of each layer form Tensorflow model
# currently, this method support only Mobilenet and Resnet.
# @param pb_path the path Tensorflow frozen model file
# @param model_type the type of model (e.g mobilenet, resnet); this use for image preprocess.
# @param layer_name the name of layer or tensor
def tf_model_layer_to_img(pb_path:str, model_type:str,img_path: str ,layer_name: str):

    global img_array_expanded_dims, input_tensor
    graph_def = loadFrozenModel(pb_path)
    util = AxfcTFGraphUtil(graph_def)

    img_dog = image.load_img(img_path, target_size=(224, 224))
    img_array = image.img_to_array(img_dog)
    np_array = np.expand_dims(img_array, axis=0)

    if model_type == 'mobilenet':
        img_array_expanded_dims = tf.keras.applications.mobilenet.preprocess_input(np_array)
        input_tensor = 'import/input:0'
    elif model_type == 'resnet':
        img_array_expanded_dims = tf.keras.applications.resnet50.preprocess_input(np_array)
        input_tensor = 'input_tensor:0'
    else:
        assert 'ERROR: current version support only mobilenet and resnet model'

    sub = util.extract_sub_graph_from_begin(graph_def, [layer_name])

    tf.compat.v1.disable_eager_execution()

    with tf.Graph().as_default() as sub_graph:
        tf.import_graph_def(sub, name='')

    conv_tensor = sub_graph.get_tensor_by_name('{}:0'.format(layer_name))

    config = tf.compat.v1.ConfigProto()
    config.gpu_options.allow_growth = True

    with tf.compat.v1.Session(graph=sub_graph, config=config) as sub_sess:
        result = sub_sess.run(conv_tensor, feed_dict={
            input_tensor: img_array_expanded_dims
        })

    tf_result = np.array(result)

    assert len(tf_result.shape) == 4

    num_chnls = tf_result.shape[3]
    grids = math.ceil(math.sqrt(num_chnls))
    fig, axes = plt.subplots(grids, grids,figsize=(50, 50))

    for i, ax in enumerate(axes.flat):
        if i<num_chnls:
            im = tf_result[0,:, :,  i]
        ax.imshow(im, interpolation='nearest', cmap='seismic')

    name = "aix_layer_" + strftime("%Y-%m-%d-%H-%M-%S", gmtime())
    fig.suptitle(name, fontsize=100, y=0.94)

    plt.savefig("{}.jpg".format(name), bbox_inches='tight')