// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aixh.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_aixh_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_aixh_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_aixh_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_aixh_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_aixh_2eproto;
namespace aixh {
class AIXGraph;
struct AIXGraphDefaultTypeInternal;
extern AIXGraphDefaultTypeInternal _AIXGraph_default_instance_;
class AIXLayer;
struct AIXLayerDefaultTypeInternal;
extern AIXLayerDefaultTypeInternal _AIXLayer_default_instance_;
class AIXLayer_AIXConvolutionDesc;
struct AIXLayer_AIXConvolutionDescDefaultTypeInternal;
extern AIXLayer_AIXConvolutionDescDefaultTypeInternal _AIXLayer_AIXConvolutionDesc_default_instance_;
class AIXLayer_AIXEWAddDesc;
struct AIXLayer_AIXEWAddDescDefaultTypeInternal;
extern AIXLayer_AIXEWAddDescDefaultTypeInternal _AIXLayer_AIXEWAddDesc_default_instance_;
class AIXLayer_AIXSamplingDesc;
struct AIXLayer_AIXSamplingDescDefaultTypeInternal;
extern AIXLayer_AIXSamplingDescDefaultTypeInternal _AIXLayer_AIXSamplingDesc_default_instance_;
class AIXLayer_AIXTensor;
struct AIXLayer_AIXTensorDefaultTypeInternal;
extern AIXLayer_AIXTensorDefaultTypeInternal _AIXLayer_AIXTensor_default_instance_;
}  // namespace aixh
PROTOBUF_NAMESPACE_OPEN
template<> ::aixh::AIXGraph* Arena::CreateMaybeMessage<::aixh::AIXGraph>(Arena*);
template<> ::aixh::AIXLayer* Arena::CreateMaybeMessage<::aixh::AIXLayer>(Arena*);
template<> ::aixh::AIXLayer_AIXConvolutionDesc* Arena::CreateMaybeMessage<::aixh::AIXLayer_AIXConvolutionDesc>(Arena*);
template<> ::aixh::AIXLayer_AIXEWAddDesc* Arena::CreateMaybeMessage<::aixh::AIXLayer_AIXEWAddDesc>(Arena*);
template<> ::aixh::AIXLayer_AIXSamplingDesc* Arena::CreateMaybeMessage<::aixh::AIXLayer_AIXSamplingDesc>(Arena*);
template<> ::aixh::AIXLayer_AIXTensor* Arena::CreateMaybeMessage<::aixh::AIXLayer_AIXTensor>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace aixh {

enum AIXLayer_AIXLayerType : int {
  AIXLayer_AIXLayerType_AIX_LAYER_CONVOLUTION = 0,
  AIXLayer_AIXLayerType_AIX_LAYER_CONNECTED = 1,
  AIXLayer_AIXLayerType_AIX_LAYER_MAXPOOL = 2,
  AIXLayer_AIXLayerType_AIX_LAYER_AVGPOOL = 3,
  AIXLayer_AIXLayerType_AIX_LAYER_ROUTE = 6,
  AIXLayer_AIXLayerType_AIX_LAYER_REORG = 7,
  AIXLayer_AIXLayerType_AIX_LAYER_EWADD = 8,
  AIXLayer_AIXLayerType_AIX_LAYER_UPSAMPLE = 9,
  AIXLayer_AIXLayerType_AIX_LAYER_PIXELSHUFFLE = 10,
  AIXLayer_AIXLayerType_AIX_LAYER_GROUP_CONV = 11,
  AIXLayer_AIXLayerType_AIX_LAYER_SKIP_CONV = 12,
  AIXLayer_AIXLayerType_AIX_LAYER_ACTIVATION = 13,
  AIXLayer_AIXLayerType_AIX_LAYER_BATCHNORM = 14,
  AIXLayer_AIXLayerType_AIX_LAYER_BIASADD = 15,
  AIXLayer_AIXLayerType_AIX_LAYER_OUTPUT = 16,
  AIXLayer_AIXLayerType_AIX_LAYER_INPUT = 17,
  AIXLayer_AIXLayerType_AIX_LAYER_WILDCARD = 18,
  AIXLayer_AIXLayerType_AIX_LAYER_ADD = 19,
  AIXLayer_AIXLayerType_AIX_LAYER_MUL = 20,
  AIXLayer_AIXLayerType_AIX_LAYER_SUB = 21,
  AIXLayer_AIXLayerType_AIX_LAYER_SUM = 22,
  AIXLayer_AIXLayerType_AIX_LAYER_INSTANCE_NORM = 23,
  AIXLayer_AIXLayerType_AIX_LAYER_MATMUL = 24,
  AIXLayer_AIXLayerType_AIX_LAYER_LAYER_NORM = 25
};
bool AIXLayer_AIXLayerType_IsValid(int value);
constexpr AIXLayer_AIXLayerType AIXLayer_AIXLayerType_AIXLayerType_MIN = AIXLayer_AIXLayerType_AIX_LAYER_CONVOLUTION;
constexpr AIXLayer_AIXLayerType AIXLayer_AIXLayerType_AIXLayerType_MAX = AIXLayer_AIXLayerType_AIX_LAYER_LAYER_NORM;
constexpr int AIXLayer_AIXLayerType_AIXLayerType_ARRAYSIZE = AIXLayer_AIXLayerType_AIXLayerType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AIXLayer_AIXLayerType_descriptor();
template<typename T>
inline const std::string& AIXLayer_AIXLayerType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AIXLayer_AIXLayerType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AIXLayer_AIXLayerType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AIXLayer_AIXLayerType_descriptor(), enum_t_value);
}
inline bool AIXLayer_AIXLayerType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AIXLayer_AIXLayerType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AIXLayer_AIXLayerType>(
    AIXLayer_AIXLayerType_descriptor(), name, value);
}
enum AIXLayer_AIXActivationMode : int {
  AIXLayer_AIXActivationMode_AIX_ACTIVATION_SIGMOID = 0,
  AIXLayer_AIXActivationMode_AIX_ACTIVATION_RELU = 1,
  AIXLayer_AIXActivationMode_AIX_ACTIVATION_LEAKY_RELU = 2,
  AIXLayer_AIXActivationMode_AIX_ACTIVATION_PRELU = 3,
  AIXLayer_AIXActivationMode_AIX_ACTIVATION_TANH = 4,
  AIXLayer_AIXActivationMode_AIX_ACTIVATION_IDENTITY = 5,
  AIXLayer_AIXActivationMode_AIX_ACTIVATION_MISH = 6,
  AIXLayer_AIXActivationMode_AIX_ACTIVATION_CELU = 7,
  AIXLayer_AIXActivationMode_AIX_ACTIVATION_SELU = 8,
  AIXLayer_AIXActivationMode_AIX_ACTIVATION_SOFTMAX = 9
};
bool AIXLayer_AIXActivationMode_IsValid(int value);
constexpr AIXLayer_AIXActivationMode AIXLayer_AIXActivationMode_AIXActivationMode_MIN = AIXLayer_AIXActivationMode_AIX_ACTIVATION_SIGMOID;
constexpr AIXLayer_AIXActivationMode AIXLayer_AIXActivationMode_AIXActivationMode_MAX = AIXLayer_AIXActivationMode_AIX_ACTIVATION_SOFTMAX;
constexpr int AIXLayer_AIXActivationMode_AIXActivationMode_ARRAYSIZE = AIXLayer_AIXActivationMode_AIXActivationMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AIXLayer_AIXActivationMode_descriptor();
template<typename T>
inline const std::string& AIXLayer_AIXActivationMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AIXLayer_AIXActivationMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AIXLayer_AIXActivationMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AIXLayer_AIXActivationMode_descriptor(), enum_t_value);
}
inline bool AIXLayer_AIXActivationMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AIXLayer_AIXActivationMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AIXLayer_AIXActivationMode>(
    AIXLayer_AIXActivationMode_descriptor(), name, value);
}
enum AIXLayer_AIXSamplingMode : int {
  AIXLayer_AIXSamplingMode_AIX_POOLING_MAX = 0,
  AIXLayer_AIXSamplingMode_AIX_POOLING_AVERAGE = 1,
  AIXLayer_AIXSamplingMode_AIX_POOLING_REORG = 2,
  AIXLayer_AIXSamplingMode_AIX_POOLING_UPSAMPLE = 3,
  AIXLayer_AIXSamplingMode_AIX_POOLING_PIXELSHUFFLE = 4
};
bool AIXLayer_AIXSamplingMode_IsValid(int value);
constexpr AIXLayer_AIXSamplingMode AIXLayer_AIXSamplingMode_AIXSamplingMode_MIN = AIXLayer_AIXSamplingMode_AIX_POOLING_MAX;
constexpr AIXLayer_AIXSamplingMode AIXLayer_AIXSamplingMode_AIXSamplingMode_MAX = AIXLayer_AIXSamplingMode_AIX_POOLING_PIXELSHUFFLE;
constexpr int AIXLayer_AIXSamplingMode_AIXSamplingMode_ARRAYSIZE = AIXLayer_AIXSamplingMode_AIXSamplingMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AIXLayer_AIXSamplingMode_descriptor();
template<typename T>
inline const std::string& AIXLayer_AIXSamplingMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AIXLayer_AIXSamplingMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AIXLayer_AIXSamplingMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AIXLayer_AIXSamplingMode_descriptor(), enum_t_value);
}
inline bool AIXLayer_AIXSamplingMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AIXLayer_AIXSamplingMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AIXLayer_AIXSamplingMode>(
    AIXLayer_AIXSamplingMode_descriptor(), name, value);
}
enum AIXLayer_AIXDataType : int {
  AIXLayer_AIXDataType_AIX_DATA_FLOAT = 0,
  AIXLayer_AIXDataType_AIX_DATA_DOUBLE = 1,
  AIXLayer_AIXDataType_AIX_DATA_HALF = 2,
  AIXLayer_AIXDataType_AIX_DATA_UINT8 = 3,
  AIXLayer_AIXDataType_AIX_DATA_SINT8 = 4,
  AIXLayer_AIXDataType_AIX_DATA_SINT16 = 5
};
bool AIXLayer_AIXDataType_IsValid(int value);
constexpr AIXLayer_AIXDataType AIXLayer_AIXDataType_AIXDataType_MIN = AIXLayer_AIXDataType_AIX_DATA_FLOAT;
constexpr AIXLayer_AIXDataType AIXLayer_AIXDataType_AIXDataType_MAX = AIXLayer_AIXDataType_AIX_DATA_SINT16;
constexpr int AIXLayer_AIXDataType_AIXDataType_ARRAYSIZE = AIXLayer_AIXDataType_AIXDataType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AIXLayer_AIXDataType_descriptor();
template<typename T>
inline const std::string& AIXLayer_AIXDataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AIXLayer_AIXDataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AIXLayer_AIXDataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AIXLayer_AIXDataType_descriptor(), enum_t_value);
}
inline bool AIXLayer_AIXDataType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AIXLayer_AIXDataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AIXLayer_AIXDataType>(
    AIXLayer_AIXDataType_descriptor(), name, value);
}
enum AIXLayer_AIXTensorFormat : int {
  AIXLayer_AIXTensorFormat_AIX_FORMAT_NCHW = 0,
  AIXLayer_AIXTensorFormat_AIX_FORMAT_NHWC = 1,
  AIXLayer_AIXTensorFormat_AIX_FORMAT_NWHC = 2,
  AIXLayer_AIXTensorFormat_AIX_FORMAT_VECTOR = 3
};
bool AIXLayer_AIXTensorFormat_IsValid(int value);
constexpr AIXLayer_AIXTensorFormat AIXLayer_AIXTensorFormat_AIXTensorFormat_MIN = AIXLayer_AIXTensorFormat_AIX_FORMAT_NCHW;
constexpr AIXLayer_AIXTensorFormat AIXLayer_AIXTensorFormat_AIXTensorFormat_MAX = AIXLayer_AIXTensorFormat_AIX_FORMAT_VECTOR;
constexpr int AIXLayer_AIXTensorFormat_AIXTensorFormat_ARRAYSIZE = AIXLayer_AIXTensorFormat_AIXTensorFormat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AIXLayer_AIXTensorFormat_descriptor();
template<typename T>
inline const std::string& AIXLayer_AIXTensorFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AIXLayer_AIXTensorFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AIXLayer_AIXTensorFormat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AIXLayer_AIXTensorFormat_descriptor(), enum_t_value);
}
inline bool AIXLayer_AIXTensorFormat_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AIXLayer_AIXTensorFormat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AIXLayer_AIXTensorFormat>(
    AIXLayer_AIXTensorFormat_descriptor(), name, value);
}
// ===================================================================

class AIXLayer_AIXConvolutionDesc final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aixh.AIXLayer.AIXConvolutionDesc) */ {
 public:
  inline AIXLayer_AIXConvolutionDesc() : AIXLayer_AIXConvolutionDesc(nullptr) {}
  ~AIXLayer_AIXConvolutionDesc() override;
  explicit PROTOBUF_CONSTEXPR AIXLayer_AIXConvolutionDesc(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AIXLayer_AIXConvolutionDesc(const AIXLayer_AIXConvolutionDesc& from);
  AIXLayer_AIXConvolutionDesc(AIXLayer_AIXConvolutionDesc&& from) noexcept
    : AIXLayer_AIXConvolutionDesc() {
    *this = ::std::move(from);
  }

  inline AIXLayer_AIXConvolutionDesc& operator=(const AIXLayer_AIXConvolutionDesc& from) {
    CopyFrom(from);
    return *this;
  }
  inline AIXLayer_AIXConvolutionDesc& operator=(AIXLayer_AIXConvolutionDesc&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AIXLayer_AIXConvolutionDesc& default_instance() {
    return *internal_default_instance();
  }
  static inline const AIXLayer_AIXConvolutionDesc* internal_default_instance() {
    return reinterpret_cast<const AIXLayer_AIXConvolutionDesc*>(
               &_AIXLayer_AIXConvolutionDesc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AIXLayer_AIXConvolutionDesc& a, AIXLayer_AIXConvolutionDesc& b) {
    a.Swap(&b);
  }
  inline void Swap(AIXLayer_AIXConvolutionDesc* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AIXLayer_AIXConvolutionDesc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AIXLayer_AIXConvolutionDesc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AIXLayer_AIXConvolutionDesc>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AIXLayer_AIXConvolutionDesc& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AIXLayer_AIXConvolutionDesc& from) {
    AIXLayer_AIXConvolutionDesc::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AIXLayer_AIXConvolutionDesc* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aixh.AIXLayer.AIXConvolutionDesc";
  }
  protected:
  explicit AIXLayer_AIXConvolutionDesc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaddingFieldNumber = 2,
    kStrideFieldNumber = 3,
    kDilationFieldNumber = 4,
    kDtypeFieldNumber = 1,
    kGroupsFieldNumber = 5,
  };
  // repeated int32 padding = 2;
  int padding_size() const;
  private:
  int _internal_padding_size() const;
  public:
  void clear_padding();
  private:
  int32_t _internal_padding(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_padding() const;
  void _internal_add_padding(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_padding();
  public:
  int32_t padding(int index) const;
  void set_padding(int index, int32_t value);
  void add_padding(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      padding() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_padding();

  // repeated int32 stride = 3;
  int stride_size() const;
  private:
  int _internal_stride_size() const;
  public:
  void clear_stride();
  private:
  int32_t _internal_stride(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_stride() const;
  void _internal_add_stride(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_stride();
  public:
  int32_t stride(int index) const;
  void set_stride(int index, int32_t value);
  void add_stride(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      stride() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_stride();

  // repeated int32 dilation = 4;
  int dilation_size() const;
  private:
  int _internal_dilation_size() const;
  public:
  void clear_dilation();
  private:
  int32_t _internal_dilation(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_dilation() const;
  void _internal_add_dilation(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_dilation();
  public:
  int32_t dilation(int index) const;
  void set_dilation(int index, int32_t value);
  void add_dilation(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      dilation() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_dilation();

  // required .aixh.AIXLayer.AIXDataType dtype = 1;
  bool has_dtype() const;
  private:
  bool _internal_has_dtype() const;
  public:
  void clear_dtype();
  ::aixh::AIXLayer_AIXDataType dtype() const;
  void set_dtype(::aixh::AIXLayer_AIXDataType value);
  private:
  ::aixh::AIXLayer_AIXDataType _internal_dtype() const;
  void _internal_set_dtype(::aixh::AIXLayer_AIXDataType value);
  public:

  // required int32 groups = 5;
  bool has_groups() const;
  private:
  bool _internal_has_groups() const;
  public:
  void clear_groups();
  int32_t groups() const;
  void set_groups(int32_t value);
  private:
  int32_t _internal_groups() const;
  void _internal_set_groups(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:aixh.AIXLayer.AIXConvolutionDesc)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > padding_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > stride_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > dilation_;
    int dtype_;
    int32_t groups_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_aixh_2eproto;
};
// -------------------------------------------------------------------

class AIXLayer_AIXSamplingDesc final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aixh.AIXLayer.AIXSamplingDesc) */ {
 public:
  inline AIXLayer_AIXSamplingDesc() : AIXLayer_AIXSamplingDesc(nullptr) {}
  ~AIXLayer_AIXSamplingDesc() override;
  explicit PROTOBUF_CONSTEXPR AIXLayer_AIXSamplingDesc(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AIXLayer_AIXSamplingDesc(const AIXLayer_AIXSamplingDesc& from);
  AIXLayer_AIXSamplingDesc(AIXLayer_AIXSamplingDesc&& from) noexcept
    : AIXLayer_AIXSamplingDesc() {
    *this = ::std::move(from);
  }

  inline AIXLayer_AIXSamplingDesc& operator=(const AIXLayer_AIXSamplingDesc& from) {
    CopyFrom(from);
    return *this;
  }
  inline AIXLayer_AIXSamplingDesc& operator=(AIXLayer_AIXSamplingDesc&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AIXLayer_AIXSamplingDesc& default_instance() {
    return *internal_default_instance();
  }
  static inline const AIXLayer_AIXSamplingDesc* internal_default_instance() {
    return reinterpret_cast<const AIXLayer_AIXSamplingDesc*>(
               &_AIXLayer_AIXSamplingDesc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AIXLayer_AIXSamplingDesc& a, AIXLayer_AIXSamplingDesc& b) {
    a.Swap(&b);
  }
  inline void Swap(AIXLayer_AIXSamplingDesc* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AIXLayer_AIXSamplingDesc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AIXLayer_AIXSamplingDesc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AIXLayer_AIXSamplingDesc>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AIXLayer_AIXSamplingDesc& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AIXLayer_AIXSamplingDesc& from) {
    AIXLayer_AIXSamplingDesc::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AIXLayer_AIXSamplingDesc* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aixh.AIXLayer.AIXSamplingDesc";
  }
  protected:
  explicit AIXLayer_AIXSamplingDesc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaddingFieldNumber = 2,
    kStrideFieldNumber = 3,
    kWindowFieldNumber = 4,
    kModeFieldNumber = 1,
  };
  // repeated int32 padding = 2;
  int padding_size() const;
  private:
  int _internal_padding_size() const;
  public:
  void clear_padding();
  private:
  int32_t _internal_padding(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_padding() const;
  void _internal_add_padding(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_padding();
  public:
  int32_t padding(int index) const;
  void set_padding(int index, int32_t value);
  void add_padding(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      padding() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_padding();

  // repeated int32 stride = 3;
  int stride_size() const;
  private:
  int _internal_stride_size() const;
  public:
  void clear_stride();
  private:
  int32_t _internal_stride(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_stride() const;
  void _internal_add_stride(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_stride();
  public:
  int32_t stride(int index) const;
  void set_stride(int index, int32_t value);
  void add_stride(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      stride() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_stride();

  // repeated int32 window = 4;
  int window_size() const;
  private:
  int _internal_window_size() const;
  public:
  void clear_window();
  private:
  int32_t _internal_window(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_window() const;
  void _internal_add_window(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_window();
  public:
  int32_t window(int index) const;
  void set_window(int index, int32_t value);
  void add_window(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      window() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_window();

  // required .aixh.AIXLayer.AIXSamplingMode mode = 1;
  bool has_mode() const;
  private:
  bool _internal_has_mode() const;
  public:
  void clear_mode();
  ::aixh::AIXLayer_AIXSamplingMode mode() const;
  void set_mode(::aixh::AIXLayer_AIXSamplingMode value);
  private:
  ::aixh::AIXLayer_AIXSamplingMode _internal_mode() const;
  void _internal_set_mode(::aixh::AIXLayer_AIXSamplingMode value);
  public:

  // @@protoc_insertion_point(class_scope:aixh.AIXLayer.AIXSamplingDesc)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > padding_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > stride_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > window_;
    int mode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_aixh_2eproto;
};
// -------------------------------------------------------------------

class AIXLayer_AIXEWAddDesc final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aixh.AIXLayer.AIXEWAddDesc) */ {
 public:
  inline AIXLayer_AIXEWAddDesc() : AIXLayer_AIXEWAddDesc(nullptr) {}
  ~AIXLayer_AIXEWAddDesc() override;
  explicit PROTOBUF_CONSTEXPR AIXLayer_AIXEWAddDesc(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AIXLayer_AIXEWAddDesc(const AIXLayer_AIXEWAddDesc& from);
  AIXLayer_AIXEWAddDesc(AIXLayer_AIXEWAddDesc&& from) noexcept
    : AIXLayer_AIXEWAddDesc() {
    *this = ::std::move(from);
  }

  inline AIXLayer_AIXEWAddDesc& operator=(const AIXLayer_AIXEWAddDesc& from) {
    CopyFrom(from);
    return *this;
  }
  inline AIXLayer_AIXEWAddDesc& operator=(AIXLayer_AIXEWAddDesc&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AIXLayer_AIXEWAddDesc& default_instance() {
    return *internal_default_instance();
  }
  static inline const AIXLayer_AIXEWAddDesc* internal_default_instance() {
    return reinterpret_cast<const AIXLayer_AIXEWAddDesc*>(
               &_AIXLayer_AIXEWAddDesc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AIXLayer_AIXEWAddDesc& a, AIXLayer_AIXEWAddDesc& b) {
    a.Swap(&b);
  }
  inline void Swap(AIXLayer_AIXEWAddDesc* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AIXLayer_AIXEWAddDesc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AIXLayer_AIXEWAddDesc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AIXLayer_AIXEWAddDesc>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AIXLayer_AIXEWAddDesc& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AIXLayer_AIXEWAddDesc& from) {
    AIXLayer_AIXEWAddDesc::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AIXLayer_AIXEWAddDesc* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aixh.AIXLayer.AIXEWAddDesc";
  }
  protected:
  explicit AIXLayer_AIXEWAddDesc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScaleFieldNumber = 1,
  };
  // repeated float scale = 1;
  int scale_size() const;
  private:
  int _internal_scale_size() const;
  public:
  void clear_scale();
  private:
  float _internal_scale(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_scale() const;
  void _internal_add_scale(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_scale();
  public:
  float scale(int index) const;
  void set_scale(int index, float value);
  void add_scale(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      scale() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_scale();

  // @@protoc_insertion_point(class_scope:aixh.AIXLayer.AIXEWAddDesc)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > scale_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_aixh_2eproto;
};
// -------------------------------------------------------------------

class AIXLayer_AIXTensor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aixh.AIXLayer.AIXTensor) */ {
 public:
  inline AIXLayer_AIXTensor() : AIXLayer_AIXTensor(nullptr) {}
  ~AIXLayer_AIXTensor() override;
  explicit PROTOBUF_CONSTEXPR AIXLayer_AIXTensor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AIXLayer_AIXTensor(const AIXLayer_AIXTensor& from);
  AIXLayer_AIXTensor(AIXLayer_AIXTensor&& from) noexcept
    : AIXLayer_AIXTensor() {
    *this = ::std::move(from);
  }

  inline AIXLayer_AIXTensor& operator=(const AIXLayer_AIXTensor& from) {
    CopyFrom(from);
    return *this;
  }
  inline AIXLayer_AIXTensor& operator=(AIXLayer_AIXTensor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AIXLayer_AIXTensor& default_instance() {
    return *internal_default_instance();
  }
  static inline const AIXLayer_AIXTensor* internal_default_instance() {
    return reinterpret_cast<const AIXLayer_AIXTensor*>(
               &_AIXLayer_AIXTensor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AIXLayer_AIXTensor& a, AIXLayer_AIXTensor& b) {
    a.Swap(&b);
  }
  inline void Swap(AIXLayer_AIXTensor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AIXLayer_AIXTensor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AIXLayer_AIXTensor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AIXLayer_AIXTensor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AIXLayer_AIXTensor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AIXLayer_AIXTensor& from) {
    AIXLayer_AIXTensor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AIXLayer_AIXTensor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aixh.AIXLayer.AIXTensor";
  }
  protected:
  explicit AIXLayer_AIXTensor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimsFieldNumber = 3,
    kFvalFieldNumber = 4,
    kBvalFieldNumber = 5,
    kDtypeFieldNumber = 1,
    kFormatFieldNumber = 2,
    kPtrFieldNumber = 7,
    kSizeFieldNumber = 6,
  };
  // repeated int32 dims = 3;
  int dims_size() const;
  private:
  int _internal_dims_size() const;
  public:
  void clear_dims();
  private:
  int32_t _internal_dims(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_dims() const;
  void _internal_add_dims(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_dims();
  public:
  int32_t dims(int index) const;
  void set_dims(int index, int32_t value);
  void add_dims(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      dims() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_dims();

  // repeated float fval = 4;
  int fval_size() const;
  private:
  int _internal_fval_size() const;
  public:
  void clear_fval();
  private:
  float _internal_fval(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_fval() const;
  void _internal_add_fval(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_fval();
  public:
  float fval(int index) const;
  void set_fval(int index, float value);
  void add_fval(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      fval() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_fval();

  // repeated int32 bval = 5 [packed = true];
  int bval_size() const;
  private:
  int _internal_bval_size() const;
  public:
  void clear_bval();
  private:
  int32_t _internal_bval(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_bval() const;
  void _internal_add_bval(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_bval();
  public:
  int32_t bval(int index) const;
  void set_bval(int index, int32_t value);
  void add_bval(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      bval() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_bval();

  // required .aixh.AIXLayer.AIXDataType dtype = 1;
  bool has_dtype() const;
  private:
  bool _internal_has_dtype() const;
  public:
  void clear_dtype();
  ::aixh::AIXLayer_AIXDataType dtype() const;
  void set_dtype(::aixh::AIXLayer_AIXDataType value);
  private:
  ::aixh::AIXLayer_AIXDataType _internal_dtype() const;
  void _internal_set_dtype(::aixh::AIXLayer_AIXDataType value);
  public:

  // required .aixh.AIXLayer.AIXTensorFormat format = 2;
  bool has_format() const;
  private:
  bool _internal_has_format() const;
  public:
  void clear_format();
  ::aixh::AIXLayer_AIXTensorFormat format() const;
  void set_format(::aixh::AIXLayer_AIXTensorFormat value);
  private:
  ::aixh::AIXLayer_AIXTensorFormat _internal_format() const;
  void _internal_set_format(::aixh::AIXLayer_AIXTensorFormat value);
  public:

  // optional int64 ptr = 7;
  bool has_ptr() const;
  private:
  bool _internal_has_ptr() const;
  public:
  void clear_ptr();
  int64_t ptr() const;
  void set_ptr(int64_t value);
  private:
  int64_t _internal_ptr() const;
  void _internal_set_ptr(int64_t value);
  public:

  // optional int32 size = 6;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  int32_t size() const;
  void set_size(int32_t value);
  private:
  int32_t _internal_size() const;
  void _internal_set_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:aixh.AIXLayer.AIXTensor)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > dims_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > fval_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > bval_;
    mutable std::atomic<int> _bval_cached_byte_size_;
    int dtype_;
    int format_;
    int64_t ptr_;
    int32_t size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_aixh_2eproto;
};
// -------------------------------------------------------------------

class AIXLayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aixh.AIXLayer) */ {
 public:
  inline AIXLayer() : AIXLayer(nullptr) {}
  ~AIXLayer() override;
  explicit PROTOBUF_CONSTEXPR AIXLayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AIXLayer(const AIXLayer& from);
  AIXLayer(AIXLayer&& from) noexcept
    : AIXLayer() {
    *this = ::std::move(from);
  }

  inline AIXLayer& operator=(const AIXLayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline AIXLayer& operator=(AIXLayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AIXLayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const AIXLayer* internal_default_instance() {
    return reinterpret_cast<const AIXLayer*>(
               &_AIXLayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AIXLayer& a, AIXLayer& b) {
    a.Swap(&b);
  }
  inline void Swap(AIXLayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AIXLayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AIXLayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AIXLayer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AIXLayer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AIXLayer& from) {
    AIXLayer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AIXLayer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aixh.AIXLayer";
  }
  protected:
  explicit AIXLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AIXLayer_AIXConvolutionDesc AIXConvolutionDesc;
  typedef AIXLayer_AIXSamplingDesc AIXSamplingDesc;
  typedef AIXLayer_AIXEWAddDesc AIXEWAddDesc;
  typedef AIXLayer_AIXTensor AIXTensor;

  typedef AIXLayer_AIXLayerType AIXLayerType;
  static constexpr AIXLayerType AIX_LAYER_CONVOLUTION =
    AIXLayer_AIXLayerType_AIX_LAYER_CONVOLUTION;
  static constexpr AIXLayerType AIX_LAYER_CONNECTED =
    AIXLayer_AIXLayerType_AIX_LAYER_CONNECTED;
  static constexpr AIXLayerType AIX_LAYER_MAXPOOL =
    AIXLayer_AIXLayerType_AIX_LAYER_MAXPOOL;
  static constexpr AIXLayerType AIX_LAYER_AVGPOOL =
    AIXLayer_AIXLayerType_AIX_LAYER_AVGPOOL;
  static constexpr AIXLayerType AIX_LAYER_ROUTE =
    AIXLayer_AIXLayerType_AIX_LAYER_ROUTE;
  static constexpr AIXLayerType AIX_LAYER_REORG =
    AIXLayer_AIXLayerType_AIX_LAYER_REORG;
  static constexpr AIXLayerType AIX_LAYER_EWADD =
    AIXLayer_AIXLayerType_AIX_LAYER_EWADD;
  static constexpr AIXLayerType AIX_LAYER_UPSAMPLE =
    AIXLayer_AIXLayerType_AIX_LAYER_UPSAMPLE;
  static constexpr AIXLayerType AIX_LAYER_PIXELSHUFFLE =
    AIXLayer_AIXLayerType_AIX_LAYER_PIXELSHUFFLE;
  static constexpr AIXLayerType AIX_LAYER_GROUP_CONV =
    AIXLayer_AIXLayerType_AIX_LAYER_GROUP_CONV;
  static constexpr AIXLayerType AIX_LAYER_SKIP_CONV =
    AIXLayer_AIXLayerType_AIX_LAYER_SKIP_CONV;
  static constexpr AIXLayerType AIX_LAYER_ACTIVATION =
    AIXLayer_AIXLayerType_AIX_LAYER_ACTIVATION;
  static constexpr AIXLayerType AIX_LAYER_BATCHNORM =
    AIXLayer_AIXLayerType_AIX_LAYER_BATCHNORM;
  static constexpr AIXLayerType AIX_LAYER_BIASADD =
    AIXLayer_AIXLayerType_AIX_LAYER_BIASADD;
  static constexpr AIXLayerType AIX_LAYER_OUTPUT =
    AIXLayer_AIXLayerType_AIX_LAYER_OUTPUT;
  static constexpr AIXLayerType AIX_LAYER_INPUT =
    AIXLayer_AIXLayerType_AIX_LAYER_INPUT;
  static constexpr AIXLayerType AIX_LAYER_WILDCARD =
    AIXLayer_AIXLayerType_AIX_LAYER_WILDCARD;
  static constexpr AIXLayerType AIX_LAYER_ADD =
    AIXLayer_AIXLayerType_AIX_LAYER_ADD;
  static constexpr AIXLayerType AIX_LAYER_MUL =
    AIXLayer_AIXLayerType_AIX_LAYER_MUL;
  static constexpr AIXLayerType AIX_LAYER_SUB =
    AIXLayer_AIXLayerType_AIX_LAYER_SUB;
  static constexpr AIXLayerType AIX_LAYER_SUM =
    AIXLayer_AIXLayerType_AIX_LAYER_SUM;
  static constexpr AIXLayerType AIX_LAYER_INSTANCE_NORM =
    AIXLayer_AIXLayerType_AIX_LAYER_INSTANCE_NORM;
  static constexpr AIXLayerType AIX_LAYER_MATMUL =
    AIXLayer_AIXLayerType_AIX_LAYER_MATMUL;
  static constexpr AIXLayerType AIX_LAYER_LAYER_NORM =
    AIXLayer_AIXLayerType_AIX_LAYER_LAYER_NORM;
  static inline bool AIXLayerType_IsValid(int value) {
    return AIXLayer_AIXLayerType_IsValid(value);
  }
  static constexpr AIXLayerType AIXLayerType_MIN =
    AIXLayer_AIXLayerType_AIXLayerType_MIN;
  static constexpr AIXLayerType AIXLayerType_MAX =
    AIXLayer_AIXLayerType_AIXLayerType_MAX;
  static constexpr int AIXLayerType_ARRAYSIZE =
    AIXLayer_AIXLayerType_AIXLayerType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AIXLayerType_descriptor() {
    return AIXLayer_AIXLayerType_descriptor();
  }
  template<typename T>
  static inline const std::string& AIXLayerType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AIXLayerType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AIXLayerType_Name.");
    return AIXLayer_AIXLayerType_Name(enum_t_value);
  }
  static inline bool AIXLayerType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AIXLayerType* value) {
    return AIXLayer_AIXLayerType_Parse(name, value);
  }

  typedef AIXLayer_AIXActivationMode AIXActivationMode;
  static constexpr AIXActivationMode AIX_ACTIVATION_SIGMOID =
    AIXLayer_AIXActivationMode_AIX_ACTIVATION_SIGMOID;
  static constexpr AIXActivationMode AIX_ACTIVATION_RELU =
    AIXLayer_AIXActivationMode_AIX_ACTIVATION_RELU;
  static constexpr AIXActivationMode AIX_ACTIVATION_LEAKY_RELU =
    AIXLayer_AIXActivationMode_AIX_ACTIVATION_LEAKY_RELU;
  static constexpr AIXActivationMode AIX_ACTIVATION_PRELU =
    AIXLayer_AIXActivationMode_AIX_ACTIVATION_PRELU;
  static constexpr AIXActivationMode AIX_ACTIVATION_TANH =
    AIXLayer_AIXActivationMode_AIX_ACTIVATION_TANH;
  static constexpr AIXActivationMode AIX_ACTIVATION_IDENTITY =
    AIXLayer_AIXActivationMode_AIX_ACTIVATION_IDENTITY;
  static constexpr AIXActivationMode AIX_ACTIVATION_MISH =
    AIXLayer_AIXActivationMode_AIX_ACTIVATION_MISH;
  static constexpr AIXActivationMode AIX_ACTIVATION_CELU =
    AIXLayer_AIXActivationMode_AIX_ACTIVATION_CELU;
  static constexpr AIXActivationMode AIX_ACTIVATION_SELU =
    AIXLayer_AIXActivationMode_AIX_ACTIVATION_SELU;
  static constexpr AIXActivationMode AIX_ACTIVATION_SOFTMAX =
    AIXLayer_AIXActivationMode_AIX_ACTIVATION_SOFTMAX;
  static inline bool AIXActivationMode_IsValid(int value) {
    return AIXLayer_AIXActivationMode_IsValid(value);
  }
  static constexpr AIXActivationMode AIXActivationMode_MIN =
    AIXLayer_AIXActivationMode_AIXActivationMode_MIN;
  static constexpr AIXActivationMode AIXActivationMode_MAX =
    AIXLayer_AIXActivationMode_AIXActivationMode_MAX;
  static constexpr int AIXActivationMode_ARRAYSIZE =
    AIXLayer_AIXActivationMode_AIXActivationMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AIXActivationMode_descriptor() {
    return AIXLayer_AIXActivationMode_descriptor();
  }
  template<typename T>
  static inline const std::string& AIXActivationMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AIXActivationMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AIXActivationMode_Name.");
    return AIXLayer_AIXActivationMode_Name(enum_t_value);
  }
  static inline bool AIXActivationMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AIXActivationMode* value) {
    return AIXLayer_AIXActivationMode_Parse(name, value);
  }

  typedef AIXLayer_AIXSamplingMode AIXSamplingMode;
  static constexpr AIXSamplingMode AIX_POOLING_MAX =
    AIXLayer_AIXSamplingMode_AIX_POOLING_MAX;
  static constexpr AIXSamplingMode AIX_POOLING_AVERAGE =
    AIXLayer_AIXSamplingMode_AIX_POOLING_AVERAGE;
  static constexpr AIXSamplingMode AIX_POOLING_REORG =
    AIXLayer_AIXSamplingMode_AIX_POOLING_REORG;
  static constexpr AIXSamplingMode AIX_POOLING_UPSAMPLE =
    AIXLayer_AIXSamplingMode_AIX_POOLING_UPSAMPLE;
  static constexpr AIXSamplingMode AIX_POOLING_PIXELSHUFFLE =
    AIXLayer_AIXSamplingMode_AIX_POOLING_PIXELSHUFFLE;
  static inline bool AIXSamplingMode_IsValid(int value) {
    return AIXLayer_AIXSamplingMode_IsValid(value);
  }
  static constexpr AIXSamplingMode AIXSamplingMode_MIN =
    AIXLayer_AIXSamplingMode_AIXSamplingMode_MIN;
  static constexpr AIXSamplingMode AIXSamplingMode_MAX =
    AIXLayer_AIXSamplingMode_AIXSamplingMode_MAX;
  static constexpr int AIXSamplingMode_ARRAYSIZE =
    AIXLayer_AIXSamplingMode_AIXSamplingMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AIXSamplingMode_descriptor() {
    return AIXLayer_AIXSamplingMode_descriptor();
  }
  template<typename T>
  static inline const std::string& AIXSamplingMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AIXSamplingMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AIXSamplingMode_Name.");
    return AIXLayer_AIXSamplingMode_Name(enum_t_value);
  }
  static inline bool AIXSamplingMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AIXSamplingMode* value) {
    return AIXLayer_AIXSamplingMode_Parse(name, value);
  }

  typedef AIXLayer_AIXDataType AIXDataType;
  static constexpr AIXDataType AIX_DATA_FLOAT =
    AIXLayer_AIXDataType_AIX_DATA_FLOAT;
  static constexpr AIXDataType AIX_DATA_DOUBLE =
    AIXLayer_AIXDataType_AIX_DATA_DOUBLE;
  static constexpr AIXDataType AIX_DATA_HALF =
    AIXLayer_AIXDataType_AIX_DATA_HALF;
  static constexpr AIXDataType AIX_DATA_UINT8 =
    AIXLayer_AIXDataType_AIX_DATA_UINT8;
  static constexpr AIXDataType AIX_DATA_SINT8 =
    AIXLayer_AIXDataType_AIX_DATA_SINT8;
  static constexpr AIXDataType AIX_DATA_SINT16 =
    AIXLayer_AIXDataType_AIX_DATA_SINT16;
  static inline bool AIXDataType_IsValid(int value) {
    return AIXLayer_AIXDataType_IsValid(value);
  }
  static constexpr AIXDataType AIXDataType_MIN =
    AIXLayer_AIXDataType_AIXDataType_MIN;
  static constexpr AIXDataType AIXDataType_MAX =
    AIXLayer_AIXDataType_AIXDataType_MAX;
  static constexpr int AIXDataType_ARRAYSIZE =
    AIXLayer_AIXDataType_AIXDataType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AIXDataType_descriptor() {
    return AIXLayer_AIXDataType_descriptor();
  }
  template<typename T>
  static inline const std::string& AIXDataType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AIXDataType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AIXDataType_Name.");
    return AIXLayer_AIXDataType_Name(enum_t_value);
  }
  static inline bool AIXDataType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AIXDataType* value) {
    return AIXLayer_AIXDataType_Parse(name, value);
  }

  typedef AIXLayer_AIXTensorFormat AIXTensorFormat;
  static constexpr AIXTensorFormat AIX_FORMAT_NCHW =
    AIXLayer_AIXTensorFormat_AIX_FORMAT_NCHW;
  static constexpr AIXTensorFormat AIX_FORMAT_NHWC =
    AIXLayer_AIXTensorFormat_AIX_FORMAT_NHWC;
  static constexpr AIXTensorFormat AIX_FORMAT_NWHC =
    AIXLayer_AIXTensorFormat_AIX_FORMAT_NWHC;
  static constexpr AIXTensorFormat AIX_FORMAT_VECTOR =
    AIXLayer_AIXTensorFormat_AIX_FORMAT_VECTOR;
  static inline bool AIXTensorFormat_IsValid(int value) {
    return AIXLayer_AIXTensorFormat_IsValid(value);
  }
  static constexpr AIXTensorFormat AIXTensorFormat_MIN =
    AIXLayer_AIXTensorFormat_AIXTensorFormat_MIN;
  static constexpr AIXTensorFormat AIXTensorFormat_MAX =
    AIXLayer_AIXTensorFormat_AIXTensorFormat_MAX;
  static constexpr int AIXTensorFormat_ARRAYSIZE =
    AIXLayer_AIXTensorFormat_AIXTensorFormat_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AIXTensorFormat_descriptor() {
    return AIXLayer_AIXTensorFormat_descriptor();
  }
  template<typename T>
  static inline const std::string& AIXTensorFormat_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AIXTensorFormat>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AIXTensorFormat_Name.");
    return AIXLayer_AIXTensorFormat_Name(enum_t_value);
  }
  static inline bool AIXTensorFormat_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AIXTensorFormat* value) {
    return AIXLayer_AIXTensorFormat_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 3,
    kPredsFieldNumber = 4,
    kSuccsFieldNumber = 5,
    kFilterThresholdFieldNumber = 15,
    kAxesFieldNumber = 32,
    kScalesFieldNumber = 34,
    kDilationsFieldNumber = 41,
    kKernelShapeFieldNumber = 43,
    kOutputPaddingFieldNumber = 44,
    kOutputShapeFieldNumber = 45,
    kPadsFieldNumber = 46,
    kStridesFieldNumber = 47,
    kNameFieldNumber = 2,
    kModeFieldNumber = 33,
    kCoordinateTransformationModeFieldNumber = 36,
    kNearestModeFieldNumber = 37,
    kAutoPadFieldNumber = 40,
    kInputFieldNumber = 6,
    kOutputFieldNumber = 7,
    kFilterFieldNumber = 8,
    kBiasFieldNumber = 9,
    kScaleFieldNumber = 10,
    kMeanFieldNumber = 11,
    kVarianceFieldNumber = 12,
    kConvdescFieldNumber = 20,
    kSamplingdescFieldNumber = 21,
    kEwadddescFieldNumber = 22,
    kIdFieldNumber = 1,
    kInputThresholdFieldNumber = 13,
    kOutputThresholdFieldNumber = 14,
    kEpsilonFieldNumber = 16,
    kAlphaFieldNumber = 17,
    kGammaFieldNumber = 18,
    kAxisFieldNumber = 23,
    kStashTypeFieldNumber = 24,
    kTransAFieldNumber = 26,
    kTransBFieldNumber = 27,
    kBetaFieldNumber = 25,
    kActivationFieldNumber = 30,
    kKeepdimsFieldNumber = 28,
    kNoopWithEmptyAxesFieldNumber = 29,
    kSelectLastIndexFieldNumber = 31,
    kExtrapolationValueFieldNumber = 35,
    kCubicCoeffAFieldNumber = 38,
    kExcludeOutsideFieldNumber = 39,
    kGroupFieldNumber = 42,
  };
  // repeated .aixh.AIXLayer.AIXLayerType type = 3;
  int type_size() const;
  private:
  int _internal_type_size() const;
  public:
  void clear_type();
  private:
  ::aixh::AIXLayer_AIXLayerType _internal_type(int index) const;
  void _internal_add_type(::aixh::AIXLayer_AIXLayerType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_type();
  public:
  ::aixh::AIXLayer_AIXLayerType type(int index) const;
  void set_type(int index, ::aixh::AIXLayer_AIXLayerType value);
  void add_type(::aixh::AIXLayer_AIXLayerType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_type();

  // repeated int32 preds = 4;
  int preds_size() const;
  private:
  int _internal_preds_size() const;
  public:
  void clear_preds();
  private:
  int32_t _internal_preds(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_preds() const;
  void _internal_add_preds(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_preds();
  public:
  int32_t preds(int index) const;
  void set_preds(int index, int32_t value);
  void add_preds(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      preds() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_preds();

  // repeated int32 succs = 5;
  int succs_size() const;
  private:
  int _internal_succs_size() const;
  public:
  void clear_succs();
  private:
  int32_t _internal_succs(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_succs() const;
  void _internal_add_succs(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_succs();
  public:
  int32_t succs(int index) const;
  void set_succs(int index, int32_t value);
  void add_succs(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      succs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_succs();

  // repeated float filter_threshold = 15;
  int filter_threshold_size() const;
  private:
  int _internal_filter_threshold_size() const;
  public:
  void clear_filter_threshold();
  private:
  float _internal_filter_threshold(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_filter_threshold() const;
  void _internal_add_filter_threshold(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_filter_threshold();
  public:
  float filter_threshold(int index) const;
  void set_filter_threshold(int index, float value);
  void add_filter_threshold(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      filter_threshold() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_filter_threshold();

  // repeated int64 axes = 32;
  int axes_size() const;
  private:
  int _internal_axes_size() const;
  public:
  void clear_axes();
  private:
  int64_t _internal_axes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_axes() const;
  void _internal_add_axes(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_axes();
  public:
  int64_t axes(int index) const;
  void set_axes(int index, int64_t value);
  void add_axes(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      axes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_axes();

  // repeated float scales = 34;
  int scales_size() const;
  private:
  int _internal_scales_size() const;
  public:
  void clear_scales();
  private:
  float _internal_scales(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_scales() const;
  void _internal_add_scales(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_scales();
  public:
  float scales(int index) const;
  void set_scales(int index, float value);
  void add_scales(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      scales() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_scales();

  // repeated int64 dilations = 41;
  int dilations_size() const;
  private:
  int _internal_dilations_size() const;
  public:
  void clear_dilations();
  private:
  int64_t _internal_dilations(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_dilations() const;
  void _internal_add_dilations(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_dilations();
  public:
  int64_t dilations(int index) const;
  void set_dilations(int index, int64_t value);
  void add_dilations(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      dilations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_dilations();

  // repeated int64 kernel_shape = 43;
  int kernel_shape_size() const;
  private:
  int _internal_kernel_shape_size() const;
  public:
  void clear_kernel_shape();
  private:
  int64_t _internal_kernel_shape(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_kernel_shape() const;
  void _internal_add_kernel_shape(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_kernel_shape();
  public:
  int64_t kernel_shape(int index) const;
  void set_kernel_shape(int index, int64_t value);
  void add_kernel_shape(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      kernel_shape() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_kernel_shape();

  // repeated int64 output_padding = 44;
  int output_padding_size() const;
  private:
  int _internal_output_padding_size() const;
  public:
  void clear_output_padding();
  private:
  int64_t _internal_output_padding(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_output_padding() const;
  void _internal_add_output_padding(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_output_padding();
  public:
  int64_t output_padding(int index) const;
  void set_output_padding(int index, int64_t value);
  void add_output_padding(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      output_padding() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_output_padding();

  // repeated int64 output_shape = 45;
  int output_shape_size() const;
  private:
  int _internal_output_shape_size() const;
  public:
  void clear_output_shape();
  private:
  int64_t _internal_output_shape(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_output_shape() const;
  void _internal_add_output_shape(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_output_shape();
  public:
  int64_t output_shape(int index) const;
  void set_output_shape(int index, int64_t value);
  void add_output_shape(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      output_shape() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_output_shape();

  // repeated int64 pads = 46;
  int pads_size() const;
  private:
  int _internal_pads_size() const;
  public:
  void clear_pads();
  private:
  int64_t _internal_pads(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_pads() const;
  void _internal_add_pads(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_pads();
  public:
  int64_t pads(int index) const;
  void set_pads(int index, int64_t value);
  void add_pads(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      pads() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_pads();

  // repeated int64 strides = 47;
  int strides_size() const;
  private:
  int _internal_strides_size() const;
  public:
  void clear_strides();
  private:
  int64_t _internal_strides(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_strides() const;
  void _internal_add_strides(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_strides();
  public:
  int64_t strides(int index) const;
  void set_strides(int index, int64_t value);
  void add_strides(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      strides() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_strides();

  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string mode = 33;
  bool has_mode() const;
  private:
  bool _internal_has_mode() const;
  public:
  void clear_mode();
  const std::string& mode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mode();
  PROTOBUF_NODISCARD std::string* release_mode();
  void set_allocated_mode(std::string* mode);
  private:
  const std::string& _internal_mode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mode(const std::string& value);
  std::string* _internal_mutable_mode();
  public:

  // optional string coordinate_transformation_mode = 36;
  bool has_coordinate_transformation_mode() const;
  private:
  bool _internal_has_coordinate_transformation_mode() const;
  public:
  void clear_coordinate_transformation_mode();
  const std::string& coordinate_transformation_mode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_coordinate_transformation_mode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_coordinate_transformation_mode();
  PROTOBUF_NODISCARD std::string* release_coordinate_transformation_mode();
  void set_allocated_coordinate_transformation_mode(std::string* coordinate_transformation_mode);
  private:
  const std::string& _internal_coordinate_transformation_mode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_coordinate_transformation_mode(const std::string& value);
  std::string* _internal_mutable_coordinate_transformation_mode();
  public:

  // optional string nearest_mode = 37;
  bool has_nearest_mode() const;
  private:
  bool _internal_has_nearest_mode() const;
  public:
  void clear_nearest_mode();
  const std::string& nearest_mode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nearest_mode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nearest_mode();
  PROTOBUF_NODISCARD std::string* release_nearest_mode();
  void set_allocated_nearest_mode(std::string* nearest_mode);
  private:
  const std::string& _internal_nearest_mode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nearest_mode(const std::string& value);
  std::string* _internal_mutable_nearest_mode();
  public:

  // optional string auto_pad = 40;
  bool has_auto_pad() const;
  private:
  bool _internal_has_auto_pad() const;
  public:
  void clear_auto_pad();
  const std::string& auto_pad() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_auto_pad(ArgT0&& arg0, ArgT... args);
  std::string* mutable_auto_pad();
  PROTOBUF_NODISCARD std::string* release_auto_pad();
  void set_allocated_auto_pad(std::string* auto_pad);
  private:
  const std::string& _internal_auto_pad() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_auto_pad(const std::string& value);
  std::string* _internal_mutable_auto_pad();
  public:

  // optional .aixh.AIXLayer.AIXTensor input = 6;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::aixh::AIXLayer_AIXTensor& input() const;
  PROTOBUF_NODISCARD ::aixh::AIXLayer_AIXTensor* release_input();
  ::aixh::AIXLayer_AIXTensor* mutable_input();
  void set_allocated_input(::aixh::AIXLayer_AIXTensor* input);
  private:
  const ::aixh::AIXLayer_AIXTensor& _internal_input() const;
  ::aixh::AIXLayer_AIXTensor* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::aixh::AIXLayer_AIXTensor* input);
  ::aixh::AIXLayer_AIXTensor* unsafe_arena_release_input();

  // optional .aixh.AIXLayer.AIXTensor output = 7;
  bool has_output() const;
  private:
  bool _internal_has_output() const;
  public:
  void clear_output();
  const ::aixh::AIXLayer_AIXTensor& output() const;
  PROTOBUF_NODISCARD ::aixh::AIXLayer_AIXTensor* release_output();
  ::aixh::AIXLayer_AIXTensor* mutable_output();
  void set_allocated_output(::aixh::AIXLayer_AIXTensor* output);
  private:
  const ::aixh::AIXLayer_AIXTensor& _internal_output() const;
  ::aixh::AIXLayer_AIXTensor* _internal_mutable_output();
  public:
  void unsafe_arena_set_allocated_output(
      ::aixh::AIXLayer_AIXTensor* output);
  ::aixh::AIXLayer_AIXTensor* unsafe_arena_release_output();

  // optional .aixh.AIXLayer.AIXTensor filter = 8;
  bool has_filter() const;
  private:
  bool _internal_has_filter() const;
  public:
  void clear_filter();
  const ::aixh::AIXLayer_AIXTensor& filter() const;
  PROTOBUF_NODISCARD ::aixh::AIXLayer_AIXTensor* release_filter();
  ::aixh::AIXLayer_AIXTensor* mutable_filter();
  void set_allocated_filter(::aixh::AIXLayer_AIXTensor* filter);
  private:
  const ::aixh::AIXLayer_AIXTensor& _internal_filter() const;
  ::aixh::AIXLayer_AIXTensor* _internal_mutable_filter();
  public:
  void unsafe_arena_set_allocated_filter(
      ::aixh::AIXLayer_AIXTensor* filter);
  ::aixh::AIXLayer_AIXTensor* unsafe_arena_release_filter();

  // optional .aixh.AIXLayer.AIXTensor bias = 9;
  bool has_bias() const;
  private:
  bool _internal_has_bias() const;
  public:
  void clear_bias();
  const ::aixh::AIXLayer_AIXTensor& bias() const;
  PROTOBUF_NODISCARD ::aixh::AIXLayer_AIXTensor* release_bias();
  ::aixh::AIXLayer_AIXTensor* mutable_bias();
  void set_allocated_bias(::aixh::AIXLayer_AIXTensor* bias);
  private:
  const ::aixh::AIXLayer_AIXTensor& _internal_bias() const;
  ::aixh::AIXLayer_AIXTensor* _internal_mutable_bias();
  public:
  void unsafe_arena_set_allocated_bias(
      ::aixh::AIXLayer_AIXTensor* bias);
  ::aixh::AIXLayer_AIXTensor* unsafe_arena_release_bias();

  // optional .aixh.AIXLayer.AIXTensor scale = 10;
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  const ::aixh::AIXLayer_AIXTensor& scale() const;
  PROTOBUF_NODISCARD ::aixh::AIXLayer_AIXTensor* release_scale();
  ::aixh::AIXLayer_AIXTensor* mutable_scale();
  void set_allocated_scale(::aixh::AIXLayer_AIXTensor* scale);
  private:
  const ::aixh::AIXLayer_AIXTensor& _internal_scale() const;
  ::aixh::AIXLayer_AIXTensor* _internal_mutable_scale();
  public:
  void unsafe_arena_set_allocated_scale(
      ::aixh::AIXLayer_AIXTensor* scale);
  ::aixh::AIXLayer_AIXTensor* unsafe_arena_release_scale();

  // optional .aixh.AIXLayer.AIXTensor mean = 11;
  bool has_mean() const;
  private:
  bool _internal_has_mean() const;
  public:
  void clear_mean();
  const ::aixh::AIXLayer_AIXTensor& mean() const;
  PROTOBUF_NODISCARD ::aixh::AIXLayer_AIXTensor* release_mean();
  ::aixh::AIXLayer_AIXTensor* mutable_mean();
  void set_allocated_mean(::aixh::AIXLayer_AIXTensor* mean);
  private:
  const ::aixh::AIXLayer_AIXTensor& _internal_mean() const;
  ::aixh::AIXLayer_AIXTensor* _internal_mutable_mean();
  public:
  void unsafe_arena_set_allocated_mean(
      ::aixh::AIXLayer_AIXTensor* mean);
  ::aixh::AIXLayer_AIXTensor* unsafe_arena_release_mean();

  // optional .aixh.AIXLayer.AIXTensor variance = 12;
  bool has_variance() const;
  private:
  bool _internal_has_variance() const;
  public:
  void clear_variance();
  const ::aixh::AIXLayer_AIXTensor& variance() const;
  PROTOBUF_NODISCARD ::aixh::AIXLayer_AIXTensor* release_variance();
  ::aixh::AIXLayer_AIXTensor* mutable_variance();
  void set_allocated_variance(::aixh::AIXLayer_AIXTensor* variance);
  private:
  const ::aixh::AIXLayer_AIXTensor& _internal_variance() const;
  ::aixh::AIXLayer_AIXTensor* _internal_mutable_variance();
  public:
  void unsafe_arena_set_allocated_variance(
      ::aixh::AIXLayer_AIXTensor* variance);
  ::aixh::AIXLayer_AIXTensor* unsafe_arena_release_variance();

  // required .aixh.AIXLayer.AIXConvolutionDesc convdesc = 20;
  bool has_convdesc() const;
  private:
  bool _internal_has_convdesc() const;
  public:
  void clear_convdesc();
  const ::aixh::AIXLayer_AIXConvolutionDesc& convdesc() const;
  PROTOBUF_NODISCARD ::aixh::AIXLayer_AIXConvolutionDesc* release_convdesc();
  ::aixh::AIXLayer_AIXConvolutionDesc* mutable_convdesc();
  void set_allocated_convdesc(::aixh::AIXLayer_AIXConvolutionDesc* convdesc);
  private:
  const ::aixh::AIXLayer_AIXConvolutionDesc& _internal_convdesc() const;
  ::aixh::AIXLayer_AIXConvolutionDesc* _internal_mutable_convdesc();
  public:
  void unsafe_arena_set_allocated_convdesc(
      ::aixh::AIXLayer_AIXConvolutionDesc* convdesc);
  ::aixh::AIXLayer_AIXConvolutionDesc* unsafe_arena_release_convdesc();

  // optional .aixh.AIXLayer.AIXSamplingDesc samplingdesc = 21;
  bool has_samplingdesc() const;
  private:
  bool _internal_has_samplingdesc() const;
  public:
  void clear_samplingdesc();
  const ::aixh::AIXLayer_AIXSamplingDesc& samplingdesc() const;
  PROTOBUF_NODISCARD ::aixh::AIXLayer_AIXSamplingDesc* release_samplingdesc();
  ::aixh::AIXLayer_AIXSamplingDesc* mutable_samplingdesc();
  void set_allocated_samplingdesc(::aixh::AIXLayer_AIXSamplingDesc* samplingdesc);
  private:
  const ::aixh::AIXLayer_AIXSamplingDesc& _internal_samplingdesc() const;
  ::aixh::AIXLayer_AIXSamplingDesc* _internal_mutable_samplingdesc();
  public:
  void unsafe_arena_set_allocated_samplingdesc(
      ::aixh::AIXLayer_AIXSamplingDesc* samplingdesc);
  ::aixh::AIXLayer_AIXSamplingDesc* unsafe_arena_release_samplingdesc();

  // optional .aixh.AIXLayer.AIXEWAddDesc ewadddesc = 22;
  bool has_ewadddesc() const;
  private:
  bool _internal_has_ewadddesc() const;
  public:
  void clear_ewadddesc();
  const ::aixh::AIXLayer_AIXEWAddDesc& ewadddesc() const;
  PROTOBUF_NODISCARD ::aixh::AIXLayer_AIXEWAddDesc* release_ewadddesc();
  ::aixh::AIXLayer_AIXEWAddDesc* mutable_ewadddesc();
  void set_allocated_ewadddesc(::aixh::AIXLayer_AIXEWAddDesc* ewadddesc);
  private:
  const ::aixh::AIXLayer_AIXEWAddDesc& _internal_ewadddesc() const;
  ::aixh::AIXLayer_AIXEWAddDesc* _internal_mutable_ewadddesc();
  public:
  void unsafe_arena_set_allocated_ewadddesc(
      ::aixh::AIXLayer_AIXEWAddDesc* ewadddesc);
  ::aixh::AIXLayer_AIXEWAddDesc* unsafe_arena_release_ewadddesc();

  // required int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // optional float input_threshold = 13;
  bool has_input_threshold() const;
  private:
  bool _internal_has_input_threshold() const;
  public:
  void clear_input_threshold();
  float input_threshold() const;
  void set_input_threshold(float value);
  private:
  float _internal_input_threshold() const;
  void _internal_set_input_threshold(float value);
  public:

  // optional float output_threshold = 14;
  bool has_output_threshold() const;
  private:
  bool _internal_has_output_threshold() const;
  public:
  void clear_output_threshold();
  float output_threshold() const;
  void set_output_threshold(float value);
  private:
  float _internal_output_threshold() const;
  void _internal_set_output_threshold(float value);
  public:

  // optional float epsilon = 16;
  bool has_epsilon() const;
  private:
  bool _internal_has_epsilon() const;
  public:
  void clear_epsilon();
  float epsilon() const;
  void set_epsilon(float value);
  private:
  float _internal_epsilon() const;
  void _internal_set_epsilon(float value);
  public:

  // optional float alpha = 17;
  bool has_alpha() const;
  private:
  bool _internal_has_alpha() const;
  public:
  void clear_alpha();
  float alpha() const;
  void set_alpha(float value);
  private:
  float _internal_alpha() const;
  void _internal_set_alpha(float value);
  public:

  // optional float gamma = 18;
  bool has_gamma() const;
  private:
  bool _internal_has_gamma() const;
  public:
  void clear_gamma();
  float gamma() const;
  void set_gamma(float value);
  private:
  float _internal_gamma() const;
  void _internal_set_gamma(float value);
  public:

  // optional int32 axis = 23;
  bool has_axis() const;
  private:
  bool _internal_has_axis() const;
  public:
  void clear_axis();
  int32_t axis() const;
  void set_axis(int32_t value);
  private:
  int32_t _internal_axis() const;
  void _internal_set_axis(int32_t value);
  public:

  // optional int32 stash_type = 24;
  bool has_stash_type() const;
  private:
  bool _internal_has_stash_type() const;
  public:
  void clear_stash_type();
  int32_t stash_type() const;
  void set_stash_type(int32_t value);
  private:
  int32_t _internal_stash_type() const;
  void _internal_set_stash_type(int32_t value);
  public:

  // optional int64 transA = 26;
  bool has_transa() const;
  private:
  bool _internal_has_transa() const;
  public:
  void clear_transa();
  int64_t transa() const;
  void set_transa(int64_t value);
  private:
  int64_t _internal_transa() const;
  void _internal_set_transa(int64_t value);
  public:

  // optional int64 transB = 27;
  bool has_transb() const;
  private:
  bool _internal_has_transb() const;
  public:
  void clear_transb();
  int64_t transb() const;
  void set_transb(int64_t value);
  private:
  int64_t _internal_transb() const;
  void _internal_set_transb(int64_t value);
  public:

  // optional float beta = 25;
  bool has_beta() const;
  private:
  bool _internal_has_beta() const;
  public:
  void clear_beta();
  float beta() const;
  void set_beta(float value);
  private:
  float _internal_beta() const;
  void _internal_set_beta(float value);
  public:

  // optional .aixh.AIXLayer.AIXActivationMode activation = 30;
  bool has_activation() const;
  private:
  bool _internal_has_activation() const;
  public:
  void clear_activation();
  ::aixh::AIXLayer_AIXActivationMode activation() const;
  void set_activation(::aixh::AIXLayer_AIXActivationMode value);
  private:
  ::aixh::AIXLayer_AIXActivationMode _internal_activation() const;
  void _internal_set_activation(::aixh::AIXLayer_AIXActivationMode value);
  public:

  // optional int64 keepdims = 28;
  bool has_keepdims() const;
  private:
  bool _internal_has_keepdims() const;
  public:
  void clear_keepdims();
  int64_t keepdims() const;
  void set_keepdims(int64_t value);
  private:
  int64_t _internal_keepdims() const;
  void _internal_set_keepdims(int64_t value);
  public:

  // optional int64 noop_with_empty_axes = 29;
  bool has_noop_with_empty_axes() const;
  private:
  bool _internal_has_noop_with_empty_axes() const;
  public:
  void clear_noop_with_empty_axes();
  int64_t noop_with_empty_axes() const;
  void set_noop_with_empty_axes(int64_t value);
  private:
  int64_t _internal_noop_with_empty_axes() const;
  void _internal_set_noop_with_empty_axes(int64_t value);
  public:

  // optional int64 select_last_index = 31;
  bool has_select_last_index() const;
  private:
  bool _internal_has_select_last_index() const;
  public:
  void clear_select_last_index();
  int64_t select_last_index() const;
  void set_select_last_index(int64_t value);
  private:
  int64_t _internal_select_last_index() const;
  void _internal_set_select_last_index(int64_t value);
  public:

  // optional float extrapolation_value = 35;
  bool has_extrapolation_value() const;
  private:
  bool _internal_has_extrapolation_value() const;
  public:
  void clear_extrapolation_value();
  float extrapolation_value() const;
  void set_extrapolation_value(float value);
  private:
  float _internal_extrapolation_value() const;
  void _internal_set_extrapolation_value(float value);
  public:

  // optional float cubic_coeff_a = 38;
  bool has_cubic_coeff_a() const;
  private:
  bool _internal_has_cubic_coeff_a() const;
  public:
  void clear_cubic_coeff_a();
  float cubic_coeff_a() const;
  void set_cubic_coeff_a(float value);
  private:
  float _internal_cubic_coeff_a() const;
  void _internal_set_cubic_coeff_a(float value);
  public:

  // optional int64 exclude_outside = 39;
  bool has_exclude_outside() const;
  private:
  bool _internal_has_exclude_outside() const;
  public:
  void clear_exclude_outside();
  int64_t exclude_outside() const;
  void set_exclude_outside(int64_t value);
  private:
  int64_t _internal_exclude_outside() const;
  void _internal_set_exclude_outside(int64_t value);
  public:

  // optional int64 group = 42;
  bool has_group() const;
  private:
  bool _internal_has_group() const;
  public:
  void clear_group();
  int64_t group() const;
  void set_group(int64_t value);
  private:
  int64_t _internal_group() const;
  void _internal_set_group(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:aixh.AIXLayer)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> type_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > preds_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > succs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > filter_threshold_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > axes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > scales_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > dilations_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > kernel_shape_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > output_padding_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > output_shape_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > pads_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > strides_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr coordinate_transformation_mode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nearest_mode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auto_pad_;
    ::aixh::AIXLayer_AIXTensor* input_;
    ::aixh::AIXLayer_AIXTensor* output_;
    ::aixh::AIXLayer_AIXTensor* filter_;
    ::aixh::AIXLayer_AIXTensor* bias_;
    ::aixh::AIXLayer_AIXTensor* scale_;
    ::aixh::AIXLayer_AIXTensor* mean_;
    ::aixh::AIXLayer_AIXTensor* variance_;
    ::aixh::AIXLayer_AIXConvolutionDesc* convdesc_;
    ::aixh::AIXLayer_AIXSamplingDesc* samplingdesc_;
    ::aixh::AIXLayer_AIXEWAddDesc* ewadddesc_;
    int32_t id_;
    float input_threshold_;
    float output_threshold_;
    float epsilon_;
    float alpha_;
    float gamma_;
    int32_t axis_;
    int32_t stash_type_;
    int64_t transa_;
    int64_t transb_;
    float beta_;
    int activation_;
    int64_t keepdims_;
    int64_t noop_with_empty_axes_;
    int64_t select_last_index_;
    float extrapolation_value_;
    float cubic_coeff_a_;
    int64_t exclude_outside_;
    int64_t group_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_aixh_2eproto;
};
// -------------------------------------------------------------------

class AIXGraph final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aixh.AIXGraph) */ {
 public:
  inline AIXGraph() : AIXGraph(nullptr) {}
  ~AIXGraph() override;
  explicit PROTOBUF_CONSTEXPR AIXGraph(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AIXGraph(const AIXGraph& from);
  AIXGraph(AIXGraph&& from) noexcept
    : AIXGraph() {
    *this = ::std::move(from);
  }

  inline AIXGraph& operator=(const AIXGraph& from) {
    CopyFrom(from);
    return *this;
  }
  inline AIXGraph& operator=(AIXGraph&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AIXGraph& default_instance() {
    return *internal_default_instance();
  }
  static inline const AIXGraph* internal_default_instance() {
    return reinterpret_cast<const AIXGraph*>(
               &_AIXGraph_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AIXGraph& a, AIXGraph& b) {
    a.Swap(&b);
  }
  inline void Swap(AIXGraph* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AIXGraph* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AIXGraph* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AIXGraph>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AIXGraph& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AIXGraph& from) {
    AIXGraph::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AIXGraph* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aixh.AIXGraph";
  }
  protected:
  explicit AIXGraph(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLayerFieldNumber = 1,
    kInputLayersFieldNumber = 2,
    kOutputLayersFieldNumber = 3,
  };
  // repeated .aixh.AIXLayer layer = 1;
  int layer_size() const;
  private:
  int _internal_layer_size() const;
  public:
  void clear_layer();
  ::aixh::AIXLayer* mutable_layer(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aixh::AIXLayer >*
      mutable_layer();
  private:
  const ::aixh::AIXLayer& _internal_layer(int index) const;
  ::aixh::AIXLayer* _internal_add_layer();
  public:
  const ::aixh::AIXLayer& layer(int index) const;
  ::aixh::AIXLayer* add_layer();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aixh::AIXLayer >&
      layer() const;

  // repeated int32 input_layers = 2;
  int input_layers_size() const;
  private:
  int _internal_input_layers_size() const;
  public:
  void clear_input_layers();
  private:
  int32_t _internal_input_layers(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_input_layers() const;
  void _internal_add_input_layers(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_input_layers();
  public:
  int32_t input_layers(int index) const;
  void set_input_layers(int index, int32_t value);
  void add_input_layers(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      input_layers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_input_layers();

  // repeated int32 output_layers = 3;
  int output_layers_size() const;
  private:
  int _internal_output_layers_size() const;
  public:
  void clear_output_layers();
  private:
  int32_t _internal_output_layers(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_output_layers() const;
  void _internal_add_output_layers(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_output_layers();
  public:
  int32_t output_layers(int index) const;
  void set_output_layers(int index, int32_t value);
  void add_output_layers(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      output_layers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_output_layers();

  // @@protoc_insertion_point(class_scope:aixh.AIXGraph)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aixh::AIXLayer > layer_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > input_layers_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > output_layers_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_aixh_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AIXLayer_AIXConvolutionDesc

// required .aixh.AIXLayer.AIXDataType dtype = 1;
inline bool AIXLayer_AIXConvolutionDesc::_internal_has_dtype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AIXLayer_AIXConvolutionDesc::has_dtype() const {
  return _internal_has_dtype();
}
inline void AIXLayer_AIXConvolutionDesc::clear_dtype() {
  _impl_.dtype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::aixh::AIXLayer_AIXDataType AIXLayer_AIXConvolutionDesc::_internal_dtype() const {
  return static_cast< ::aixh::AIXLayer_AIXDataType >(_impl_.dtype_);
}
inline ::aixh::AIXLayer_AIXDataType AIXLayer_AIXConvolutionDesc::dtype() const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.AIXConvolutionDesc.dtype)
  return _internal_dtype();
}
inline void AIXLayer_AIXConvolutionDesc::_internal_set_dtype(::aixh::AIXLayer_AIXDataType value) {
  assert(::aixh::AIXLayer_AIXDataType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dtype_ = value;
}
inline void AIXLayer_AIXConvolutionDesc::set_dtype(::aixh::AIXLayer_AIXDataType value) {
  _internal_set_dtype(value);
  // @@protoc_insertion_point(field_set:aixh.AIXLayer.AIXConvolutionDesc.dtype)
}

// repeated int32 padding = 2;
inline int AIXLayer_AIXConvolutionDesc::_internal_padding_size() const {
  return _impl_.padding_.size();
}
inline int AIXLayer_AIXConvolutionDesc::padding_size() const {
  return _internal_padding_size();
}
inline void AIXLayer_AIXConvolutionDesc::clear_padding() {
  _impl_.padding_.Clear();
}
inline int32_t AIXLayer_AIXConvolutionDesc::_internal_padding(int index) const {
  return _impl_.padding_.Get(index);
}
inline int32_t AIXLayer_AIXConvolutionDesc::padding(int index) const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.AIXConvolutionDesc.padding)
  return _internal_padding(index);
}
inline void AIXLayer_AIXConvolutionDesc::set_padding(int index, int32_t value) {
  _impl_.padding_.Set(index, value);
  // @@protoc_insertion_point(field_set:aixh.AIXLayer.AIXConvolutionDesc.padding)
}
inline void AIXLayer_AIXConvolutionDesc::_internal_add_padding(int32_t value) {
  _impl_.padding_.Add(value);
}
inline void AIXLayer_AIXConvolutionDesc::add_padding(int32_t value) {
  _internal_add_padding(value);
  // @@protoc_insertion_point(field_add:aixh.AIXLayer.AIXConvolutionDesc.padding)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
AIXLayer_AIXConvolutionDesc::_internal_padding() const {
  return _impl_.padding_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
AIXLayer_AIXConvolutionDesc::padding() const {
  // @@protoc_insertion_point(field_list:aixh.AIXLayer.AIXConvolutionDesc.padding)
  return _internal_padding();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
AIXLayer_AIXConvolutionDesc::_internal_mutable_padding() {
  return &_impl_.padding_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
AIXLayer_AIXConvolutionDesc::mutable_padding() {
  // @@protoc_insertion_point(field_mutable_list:aixh.AIXLayer.AIXConvolutionDesc.padding)
  return _internal_mutable_padding();
}

// repeated int32 stride = 3;
inline int AIXLayer_AIXConvolutionDesc::_internal_stride_size() const {
  return _impl_.stride_.size();
}
inline int AIXLayer_AIXConvolutionDesc::stride_size() const {
  return _internal_stride_size();
}
inline void AIXLayer_AIXConvolutionDesc::clear_stride() {
  _impl_.stride_.Clear();
}
inline int32_t AIXLayer_AIXConvolutionDesc::_internal_stride(int index) const {
  return _impl_.stride_.Get(index);
}
inline int32_t AIXLayer_AIXConvolutionDesc::stride(int index) const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.AIXConvolutionDesc.stride)
  return _internal_stride(index);
}
inline void AIXLayer_AIXConvolutionDesc::set_stride(int index, int32_t value) {
  _impl_.stride_.Set(index, value);
  // @@protoc_insertion_point(field_set:aixh.AIXLayer.AIXConvolutionDesc.stride)
}
inline void AIXLayer_AIXConvolutionDesc::_internal_add_stride(int32_t value) {
  _impl_.stride_.Add(value);
}
inline void AIXLayer_AIXConvolutionDesc::add_stride(int32_t value) {
  _internal_add_stride(value);
  // @@protoc_insertion_point(field_add:aixh.AIXLayer.AIXConvolutionDesc.stride)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
AIXLayer_AIXConvolutionDesc::_internal_stride() const {
  return _impl_.stride_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
AIXLayer_AIXConvolutionDesc::stride() const {
  // @@protoc_insertion_point(field_list:aixh.AIXLayer.AIXConvolutionDesc.stride)
  return _internal_stride();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
AIXLayer_AIXConvolutionDesc::_internal_mutable_stride() {
  return &_impl_.stride_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
AIXLayer_AIXConvolutionDesc::mutable_stride() {
  // @@protoc_insertion_point(field_mutable_list:aixh.AIXLayer.AIXConvolutionDesc.stride)
  return _internal_mutable_stride();
}

// repeated int32 dilation = 4;
inline int AIXLayer_AIXConvolutionDesc::_internal_dilation_size() const {
  return _impl_.dilation_.size();
}
inline int AIXLayer_AIXConvolutionDesc::dilation_size() const {
  return _internal_dilation_size();
}
inline void AIXLayer_AIXConvolutionDesc::clear_dilation() {
  _impl_.dilation_.Clear();
}
inline int32_t AIXLayer_AIXConvolutionDesc::_internal_dilation(int index) const {
  return _impl_.dilation_.Get(index);
}
inline int32_t AIXLayer_AIXConvolutionDesc::dilation(int index) const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.AIXConvolutionDesc.dilation)
  return _internal_dilation(index);
}
inline void AIXLayer_AIXConvolutionDesc::set_dilation(int index, int32_t value) {
  _impl_.dilation_.Set(index, value);
  // @@protoc_insertion_point(field_set:aixh.AIXLayer.AIXConvolutionDesc.dilation)
}
inline void AIXLayer_AIXConvolutionDesc::_internal_add_dilation(int32_t value) {
  _impl_.dilation_.Add(value);
}
inline void AIXLayer_AIXConvolutionDesc::add_dilation(int32_t value) {
  _internal_add_dilation(value);
  // @@protoc_insertion_point(field_add:aixh.AIXLayer.AIXConvolutionDesc.dilation)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
AIXLayer_AIXConvolutionDesc::_internal_dilation() const {
  return _impl_.dilation_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
AIXLayer_AIXConvolutionDesc::dilation() const {
  // @@protoc_insertion_point(field_list:aixh.AIXLayer.AIXConvolutionDesc.dilation)
  return _internal_dilation();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
AIXLayer_AIXConvolutionDesc::_internal_mutable_dilation() {
  return &_impl_.dilation_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
AIXLayer_AIXConvolutionDesc::mutable_dilation() {
  // @@protoc_insertion_point(field_mutable_list:aixh.AIXLayer.AIXConvolutionDesc.dilation)
  return _internal_mutable_dilation();
}

// required int32 groups = 5;
inline bool AIXLayer_AIXConvolutionDesc::_internal_has_groups() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AIXLayer_AIXConvolutionDesc::has_groups() const {
  return _internal_has_groups();
}
inline void AIXLayer_AIXConvolutionDesc::clear_groups() {
  _impl_.groups_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t AIXLayer_AIXConvolutionDesc::_internal_groups() const {
  return _impl_.groups_;
}
inline int32_t AIXLayer_AIXConvolutionDesc::groups() const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.AIXConvolutionDesc.groups)
  return _internal_groups();
}
inline void AIXLayer_AIXConvolutionDesc::_internal_set_groups(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.groups_ = value;
}
inline void AIXLayer_AIXConvolutionDesc::set_groups(int32_t value) {
  _internal_set_groups(value);
  // @@protoc_insertion_point(field_set:aixh.AIXLayer.AIXConvolutionDesc.groups)
}

// -------------------------------------------------------------------

// AIXLayer_AIXSamplingDesc

// required .aixh.AIXLayer.AIXSamplingMode mode = 1;
inline bool AIXLayer_AIXSamplingDesc::_internal_has_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AIXLayer_AIXSamplingDesc::has_mode() const {
  return _internal_has_mode();
}
inline void AIXLayer_AIXSamplingDesc::clear_mode() {
  _impl_.mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::aixh::AIXLayer_AIXSamplingMode AIXLayer_AIXSamplingDesc::_internal_mode() const {
  return static_cast< ::aixh::AIXLayer_AIXSamplingMode >(_impl_.mode_);
}
inline ::aixh::AIXLayer_AIXSamplingMode AIXLayer_AIXSamplingDesc::mode() const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.AIXSamplingDesc.mode)
  return _internal_mode();
}
inline void AIXLayer_AIXSamplingDesc::_internal_set_mode(::aixh::AIXLayer_AIXSamplingMode value) {
  assert(::aixh::AIXLayer_AIXSamplingMode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.mode_ = value;
}
inline void AIXLayer_AIXSamplingDesc::set_mode(::aixh::AIXLayer_AIXSamplingMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:aixh.AIXLayer.AIXSamplingDesc.mode)
}

// repeated int32 padding = 2;
inline int AIXLayer_AIXSamplingDesc::_internal_padding_size() const {
  return _impl_.padding_.size();
}
inline int AIXLayer_AIXSamplingDesc::padding_size() const {
  return _internal_padding_size();
}
inline void AIXLayer_AIXSamplingDesc::clear_padding() {
  _impl_.padding_.Clear();
}
inline int32_t AIXLayer_AIXSamplingDesc::_internal_padding(int index) const {
  return _impl_.padding_.Get(index);
}
inline int32_t AIXLayer_AIXSamplingDesc::padding(int index) const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.AIXSamplingDesc.padding)
  return _internal_padding(index);
}
inline void AIXLayer_AIXSamplingDesc::set_padding(int index, int32_t value) {
  _impl_.padding_.Set(index, value);
  // @@protoc_insertion_point(field_set:aixh.AIXLayer.AIXSamplingDesc.padding)
}
inline void AIXLayer_AIXSamplingDesc::_internal_add_padding(int32_t value) {
  _impl_.padding_.Add(value);
}
inline void AIXLayer_AIXSamplingDesc::add_padding(int32_t value) {
  _internal_add_padding(value);
  // @@protoc_insertion_point(field_add:aixh.AIXLayer.AIXSamplingDesc.padding)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
AIXLayer_AIXSamplingDesc::_internal_padding() const {
  return _impl_.padding_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
AIXLayer_AIXSamplingDesc::padding() const {
  // @@protoc_insertion_point(field_list:aixh.AIXLayer.AIXSamplingDesc.padding)
  return _internal_padding();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
AIXLayer_AIXSamplingDesc::_internal_mutable_padding() {
  return &_impl_.padding_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
AIXLayer_AIXSamplingDesc::mutable_padding() {
  // @@protoc_insertion_point(field_mutable_list:aixh.AIXLayer.AIXSamplingDesc.padding)
  return _internal_mutable_padding();
}

// repeated int32 stride = 3;
inline int AIXLayer_AIXSamplingDesc::_internal_stride_size() const {
  return _impl_.stride_.size();
}
inline int AIXLayer_AIXSamplingDesc::stride_size() const {
  return _internal_stride_size();
}
inline void AIXLayer_AIXSamplingDesc::clear_stride() {
  _impl_.stride_.Clear();
}
inline int32_t AIXLayer_AIXSamplingDesc::_internal_stride(int index) const {
  return _impl_.stride_.Get(index);
}
inline int32_t AIXLayer_AIXSamplingDesc::stride(int index) const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.AIXSamplingDesc.stride)
  return _internal_stride(index);
}
inline void AIXLayer_AIXSamplingDesc::set_stride(int index, int32_t value) {
  _impl_.stride_.Set(index, value);
  // @@protoc_insertion_point(field_set:aixh.AIXLayer.AIXSamplingDesc.stride)
}
inline void AIXLayer_AIXSamplingDesc::_internal_add_stride(int32_t value) {
  _impl_.stride_.Add(value);
}
inline void AIXLayer_AIXSamplingDesc::add_stride(int32_t value) {
  _internal_add_stride(value);
  // @@protoc_insertion_point(field_add:aixh.AIXLayer.AIXSamplingDesc.stride)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
AIXLayer_AIXSamplingDesc::_internal_stride() const {
  return _impl_.stride_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
AIXLayer_AIXSamplingDesc::stride() const {
  // @@protoc_insertion_point(field_list:aixh.AIXLayer.AIXSamplingDesc.stride)
  return _internal_stride();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
AIXLayer_AIXSamplingDesc::_internal_mutable_stride() {
  return &_impl_.stride_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
AIXLayer_AIXSamplingDesc::mutable_stride() {
  // @@protoc_insertion_point(field_mutable_list:aixh.AIXLayer.AIXSamplingDesc.stride)
  return _internal_mutable_stride();
}

// repeated int32 window = 4;
inline int AIXLayer_AIXSamplingDesc::_internal_window_size() const {
  return _impl_.window_.size();
}
inline int AIXLayer_AIXSamplingDesc::window_size() const {
  return _internal_window_size();
}
inline void AIXLayer_AIXSamplingDesc::clear_window() {
  _impl_.window_.Clear();
}
inline int32_t AIXLayer_AIXSamplingDesc::_internal_window(int index) const {
  return _impl_.window_.Get(index);
}
inline int32_t AIXLayer_AIXSamplingDesc::window(int index) const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.AIXSamplingDesc.window)
  return _internal_window(index);
}
inline void AIXLayer_AIXSamplingDesc::set_window(int index, int32_t value) {
  _impl_.window_.Set(index, value);
  // @@protoc_insertion_point(field_set:aixh.AIXLayer.AIXSamplingDesc.window)
}
inline void AIXLayer_AIXSamplingDesc::_internal_add_window(int32_t value) {
  _impl_.window_.Add(value);
}
inline void AIXLayer_AIXSamplingDesc::add_window(int32_t value) {
  _internal_add_window(value);
  // @@protoc_insertion_point(field_add:aixh.AIXLayer.AIXSamplingDesc.window)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
AIXLayer_AIXSamplingDesc::_internal_window() const {
  return _impl_.window_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
AIXLayer_AIXSamplingDesc::window() const {
  // @@protoc_insertion_point(field_list:aixh.AIXLayer.AIXSamplingDesc.window)
  return _internal_window();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
AIXLayer_AIXSamplingDesc::_internal_mutable_window() {
  return &_impl_.window_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
AIXLayer_AIXSamplingDesc::mutable_window() {
  // @@protoc_insertion_point(field_mutable_list:aixh.AIXLayer.AIXSamplingDesc.window)
  return _internal_mutable_window();
}

// -------------------------------------------------------------------

// AIXLayer_AIXEWAddDesc

// repeated float scale = 1;
inline int AIXLayer_AIXEWAddDesc::_internal_scale_size() const {
  return _impl_.scale_.size();
}
inline int AIXLayer_AIXEWAddDesc::scale_size() const {
  return _internal_scale_size();
}
inline void AIXLayer_AIXEWAddDesc::clear_scale() {
  _impl_.scale_.Clear();
}
inline float AIXLayer_AIXEWAddDesc::_internal_scale(int index) const {
  return _impl_.scale_.Get(index);
}
inline float AIXLayer_AIXEWAddDesc::scale(int index) const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.AIXEWAddDesc.scale)
  return _internal_scale(index);
}
inline void AIXLayer_AIXEWAddDesc::set_scale(int index, float value) {
  _impl_.scale_.Set(index, value);
  // @@protoc_insertion_point(field_set:aixh.AIXLayer.AIXEWAddDesc.scale)
}
inline void AIXLayer_AIXEWAddDesc::_internal_add_scale(float value) {
  _impl_.scale_.Add(value);
}
inline void AIXLayer_AIXEWAddDesc::add_scale(float value) {
  _internal_add_scale(value);
  // @@protoc_insertion_point(field_add:aixh.AIXLayer.AIXEWAddDesc.scale)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
AIXLayer_AIXEWAddDesc::_internal_scale() const {
  return _impl_.scale_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
AIXLayer_AIXEWAddDesc::scale() const {
  // @@protoc_insertion_point(field_list:aixh.AIXLayer.AIXEWAddDesc.scale)
  return _internal_scale();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
AIXLayer_AIXEWAddDesc::_internal_mutable_scale() {
  return &_impl_.scale_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
AIXLayer_AIXEWAddDesc::mutable_scale() {
  // @@protoc_insertion_point(field_mutable_list:aixh.AIXLayer.AIXEWAddDesc.scale)
  return _internal_mutable_scale();
}

// -------------------------------------------------------------------

// AIXLayer_AIXTensor

// required .aixh.AIXLayer.AIXDataType dtype = 1;
inline bool AIXLayer_AIXTensor::_internal_has_dtype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AIXLayer_AIXTensor::has_dtype() const {
  return _internal_has_dtype();
}
inline void AIXLayer_AIXTensor::clear_dtype() {
  _impl_.dtype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::aixh::AIXLayer_AIXDataType AIXLayer_AIXTensor::_internal_dtype() const {
  return static_cast< ::aixh::AIXLayer_AIXDataType >(_impl_.dtype_);
}
inline ::aixh::AIXLayer_AIXDataType AIXLayer_AIXTensor::dtype() const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.AIXTensor.dtype)
  return _internal_dtype();
}
inline void AIXLayer_AIXTensor::_internal_set_dtype(::aixh::AIXLayer_AIXDataType value) {
  assert(::aixh::AIXLayer_AIXDataType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dtype_ = value;
}
inline void AIXLayer_AIXTensor::set_dtype(::aixh::AIXLayer_AIXDataType value) {
  _internal_set_dtype(value);
  // @@protoc_insertion_point(field_set:aixh.AIXLayer.AIXTensor.dtype)
}

// required .aixh.AIXLayer.AIXTensorFormat format = 2;
inline bool AIXLayer_AIXTensor::_internal_has_format() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AIXLayer_AIXTensor::has_format() const {
  return _internal_has_format();
}
inline void AIXLayer_AIXTensor::clear_format() {
  _impl_.format_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::aixh::AIXLayer_AIXTensorFormat AIXLayer_AIXTensor::_internal_format() const {
  return static_cast< ::aixh::AIXLayer_AIXTensorFormat >(_impl_.format_);
}
inline ::aixh::AIXLayer_AIXTensorFormat AIXLayer_AIXTensor::format() const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.AIXTensor.format)
  return _internal_format();
}
inline void AIXLayer_AIXTensor::_internal_set_format(::aixh::AIXLayer_AIXTensorFormat value) {
  assert(::aixh::AIXLayer_AIXTensorFormat_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.format_ = value;
}
inline void AIXLayer_AIXTensor::set_format(::aixh::AIXLayer_AIXTensorFormat value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:aixh.AIXLayer.AIXTensor.format)
}

// repeated int32 dims = 3;
inline int AIXLayer_AIXTensor::_internal_dims_size() const {
  return _impl_.dims_.size();
}
inline int AIXLayer_AIXTensor::dims_size() const {
  return _internal_dims_size();
}
inline void AIXLayer_AIXTensor::clear_dims() {
  _impl_.dims_.Clear();
}
inline int32_t AIXLayer_AIXTensor::_internal_dims(int index) const {
  return _impl_.dims_.Get(index);
}
inline int32_t AIXLayer_AIXTensor::dims(int index) const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.AIXTensor.dims)
  return _internal_dims(index);
}
inline void AIXLayer_AIXTensor::set_dims(int index, int32_t value) {
  _impl_.dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:aixh.AIXLayer.AIXTensor.dims)
}
inline void AIXLayer_AIXTensor::_internal_add_dims(int32_t value) {
  _impl_.dims_.Add(value);
}
inline void AIXLayer_AIXTensor::add_dims(int32_t value) {
  _internal_add_dims(value);
  // @@protoc_insertion_point(field_add:aixh.AIXLayer.AIXTensor.dims)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
AIXLayer_AIXTensor::_internal_dims() const {
  return _impl_.dims_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
AIXLayer_AIXTensor::dims() const {
  // @@protoc_insertion_point(field_list:aixh.AIXLayer.AIXTensor.dims)
  return _internal_dims();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
AIXLayer_AIXTensor::_internal_mutable_dims() {
  return &_impl_.dims_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
AIXLayer_AIXTensor::mutable_dims() {
  // @@protoc_insertion_point(field_mutable_list:aixh.AIXLayer.AIXTensor.dims)
  return _internal_mutable_dims();
}

// repeated float fval = 4;
inline int AIXLayer_AIXTensor::_internal_fval_size() const {
  return _impl_.fval_.size();
}
inline int AIXLayer_AIXTensor::fval_size() const {
  return _internal_fval_size();
}
inline void AIXLayer_AIXTensor::clear_fval() {
  _impl_.fval_.Clear();
}
inline float AIXLayer_AIXTensor::_internal_fval(int index) const {
  return _impl_.fval_.Get(index);
}
inline float AIXLayer_AIXTensor::fval(int index) const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.AIXTensor.fval)
  return _internal_fval(index);
}
inline void AIXLayer_AIXTensor::set_fval(int index, float value) {
  _impl_.fval_.Set(index, value);
  // @@protoc_insertion_point(field_set:aixh.AIXLayer.AIXTensor.fval)
}
inline void AIXLayer_AIXTensor::_internal_add_fval(float value) {
  _impl_.fval_.Add(value);
}
inline void AIXLayer_AIXTensor::add_fval(float value) {
  _internal_add_fval(value);
  // @@protoc_insertion_point(field_add:aixh.AIXLayer.AIXTensor.fval)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
AIXLayer_AIXTensor::_internal_fval() const {
  return _impl_.fval_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
AIXLayer_AIXTensor::fval() const {
  // @@protoc_insertion_point(field_list:aixh.AIXLayer.AIXTensor.fval)
  return _internal_fval();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
AIXLayer_AIXTensor::_internal_mutable_fval() {
  return &_impl_.fval_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
AIXLayer_AIXTensor::mutable_fval() {
  // @@protoc_insertion_point(field_mutable_list:aixh.AIXLayer.AIXTensor.fval)
  return _internal_mutable_fval();
}

// repeated int32 bval = 5 [packed = true];
inline int AIXLayer_AIXTensor::_internal_bval_size() const {
  return _impl_.bval_.size();
}
inline int AIXLayer_AIXTensor::bval_size() const {
  return _internal_bval_size();
}
inline void AIXLayer_AIXTensor::clear_bval() {
  _impl_.bval_.Clear();
}
inline int32_t AIXLayer_AIXTensor::_internal_bval(int index) const {
  return _impl_.bval_.Get(index);
}
inline int32_t AIXLayer_AIXTensor::bval(int index) const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.AIXTensor.bval)
  return _internal_bval(index);
}
inline void AIXLayer_AIXTensor::set_bval(int index, int32_t value) {
  _impl_.bval_.Set(index, value);
  // @@protoc_insertion_point(field_set:aixh.AIXLayer.AIXTensor.bval)
}
inline void AIXLayer_AIXTensor::_internal_add_bval(int32_t value) {
  _impl_.bval_.Add(value);
}
inline void AIXLayer_AIXTensor::add_bval(int32_t value) {
  _internal_add_bval(value);
  // @@protoc_insertion_point(field_add:aixh.AIXLayer.AIXTensor.bval)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
AIXLayer_AIXTensor::_internal_bval() const {
  return _impl_.bval_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
AIXLayer_AIXTensor::bval() const {
  // @@protoc_insertion_point(field_list:aixh.AIXLayer.AIXTensor.bval)
  return _internal_bval();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
AIXLayer_AIXTensor::_internal_mutable_bval() {
  return &_impl_.bval_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
AIXLayer_AIXTensor::mutable_bval() {
  // @@protoc_insertion_point(field_mutable_list:aixh.AIXLayer.AIXTensor.bval)
  return _internal_mutable_bval();
}

// optional int32 size = 6;
inline bool AIXLayer_AIXTensor::_internal_has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AIXLayer_AIXTensor::has_size() const {
  return _internal_has_size();
}
inline void AIXLayer_AIXTensor::clear_size() {
  _impl_.size_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t AIXLayer_AIXTensor::_internal_size() const {
  return _impl_.size_;
}
inline int32_t AIXLayer_AIXTensor::size() const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.AIXTensor.size)
  return _internal_size();
}
inline void AIXLayer_AIXTensor::_internal_set_size(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.size_ = value;
}
inline void AIXLayer_AIXTensor::set_size(int32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:aixh.AIXLayer.AIXTensor.size)
}

// optional int64 ptr = 7;
inline bool AIXLayer_AIXTensor::_internal_has_ptr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AIXLayer_AIXTensor::has_ptr() const {
  return _internal_has_ptr();
}
inline void AIXLayer_AIXTensor::clear_ptr() {
  _impl_.ptr_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int64_t AIXLayer_AIXTensor::_internal_ptr() const {
  return _impl_.ptr_;
}
inline int64_t AIXLayer_AIXTensor::ptr() const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.AIXTensor.ptr)
  return _internal_ptr();
}
inline void AIXLayer_AIXTensor::_internal_set_ptr(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ptr_ = value;
}
inline void AIXLayer_AIXTensor::set_ptr(int64_t value) {
  _internal_set_ptr(value);
  // @@protoc_insertion_point(field_set:aixh.AIXLayer.AIXTensor.ptr)
}

// -------------------------------------------------------------------

// AIXLayer

// required int32 id = 1;
inline bool AIXLayer::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool AIXLayer::has_id() const {
  return _internal_has_id();
}
inline void AIXLayer::clear_id() {
  _impl_.id_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline int32_t AIXLayer::_internal_id() const {
  return _impl_.id_;
}
inline int32_t AIXLayer::id() const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.id)
  return _internal_id();
}
inline void AIXLayer::_internal_set_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.id_ = value;
}
inline void AIXLayer::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:aixh.AIXLayer.id)
}

// optional string name = 2;
inline bool AIXLayer::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AIXLayer::has_name() const {
  return _internal_has_name();
}
inline void AIXLayer::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AIXLayer::name() const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AIXLayer::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:aixh.AIXLayer.name)
}
inline std::string* AIXLayer::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:aixh.AIXLayer.name)
  return _s;
}
inline const std::string& AIXLayer::_internal_name() const {
  return _impl_.name_.Get();
}
inline void AIXLayer::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* AIXLayer::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* AIXLayer::release_name() {
  // @@protoc_insertion_point(field_release:aixh.AIXLayer.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AIXLayer::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:aixh.AIXLayer.name)
}

// repeated .aixh.AIXLayer.AIXLayerType type = 3;
inline int AIXLayer::_internal_type_size() const {
  return _impl_.type_.size();
}
inline int AIXLayer::type_size() const {
  return _internal_type_size();
}
inline void AIXLayer::clear_type() {
  _impl_.type_.Clear();
}
inline ::aixh::AIXLayer_AIXLayerType AIXLayer::_internal_type(int index) const {
  return static_cast< ::aixh::AIXLayer_AIXLayerType >(_impl_.type_.Get(index));
}
inline ::aixh::AIXLayer_AIXLayerType AIXLayer::type(int index) const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.type)
  return _internal_type(index);
}
inline void AIXLayer::set_type(int index, ::aixh::AIXLayer_AIXLayerType value) {
  assert(::aixh::AIXLayer_AIXLayerType_IsValid(value));
  _impl_.type_.Set(index, value);
  // @@protoc_insertion_point(field_set:aixh.AIXLayer.type)
}
inline void AIXLayer::_internal_add_type(::aixh::AIXLayer_AIXLayerType value) {
  assert(::aixh::AIXLayer_AIXLayerType_IsValid(value));
  _impl_.type_.Add(value);
}
inline void AIXLayer::add_type(::aixh::AIXLayer_AIXLayerType value) {
  _internal_add_type(value);
  // @@protoc_insertion_point(field_add:aixh.AIXLayer.type)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
AIXLayer::type() const {
  // @@protoc_insertion_point(field_list:aixh.AIXLayer.type)
  return _impl_.type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
AIXLayer::_internal_mutable_type() {
  return &_impl_.type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
AIXLayer::mutable_type() {
  // @@protoc_insertion_point(field_mutable_list:aixh.AIXLayer.type)
  return _internal_mutable_type();
}

// repeated int32 preds = 4;
inline int AIXLayer::_internal_preds_size() const {
  return _impl_.preds_.size();
}
inline int AIXLayer::preds_size() const {
  return _internal_preds_size();
}
inline void AIXLayer::clear_preds() {
  _impl_.preds_.Clear();
}
inline int32_t AIXLayer::_internal_preds(int index) const {
  return _impl_.preds_.Get(index);
}
inline int32_t AIXLayer::preds(int index) const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.preds)
  return _internal_preds(index);
}
inline void AIXLayer::set_preds(int index, int32_t value) {
  _impl_.preds_.Set(index, value);
  // @@protoc_insertion_point(field_set:aixh.AIXLayer.preds)
}
inline void AIXLayer::_internal_add_preds(int32_t value) {
  _impl_.preds_.Add(value);
}
inline void AIXLayer::add_preds(int32_t value) {
  _internal_add_preds(value);
  // @@protoc_insertion_point(field_add:aixh.AIXLayer.preds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
AIXLayer::_internal_preds() const {
  return _impl_.preds_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
AIXLayer::preds() const {
  // @@protoc_insertion_point(field_list:aixh.AIXLayer.preds)
  return _internal_preds();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
AIXLayer::_internal_mutable_preds() {
  return &_impl_.preds_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
AIXLayer::mutable_preds() {
  // @@protoc_insertion_point(field_mutable_list:aixh.AIXLayer.preds)
  return _internal_mutable_preds();
}

// repeated int32 succs = 5;
inline int AIXLayer::_internal_succs_size() const {
  return _impl_.succs_.size();
}
inline int AIXLayer::succs_size() const {
  return _internal_succs_size();
}
inline void AIXLayer::clear_succs() {
  _impl_.succs_.Clear();
}
inline int32_t AIXLayer::_internal_succs(int index) const {
  return _impl_.succs_.Get(index);
}
inline int32_t AIXLayer::succs(int index) const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.succs)
  return _internal_succs(index);
}
inline void AIXLayer::set_succs(int index, int32_t value) {
  _impl_.succs_.Set(index, value);
  // @@protoc_insertion_point(field_set:aixh.AIXLayer.succs)
}
inline void AIXLayer::_internal_add_succs(int32_t value) {
  _impl_.succs_.Add(value);
}
inline void AIXLayer::add_succs(int32_t value) {
  _internal_add_succs(value);
  // @@protoc_insertion_point(field_add:aixh.AIXLayer.succs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
AIXLayer::_internal_succs() const {
  return _impl_.succs_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
AIXLayer::succs() const {
  // @@protoc_insertion_point(field_list:aixh.AIXLayer.succs)
  return _internal_succs();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
AIXLayer::_internal_mutable_succs() {
  return &_impl_.succs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
AIXLayer::mutable_succs() {
  // @@protoc_insertion_point(field_mutable_list:aixh.AIXLayer.succs)
  return _internal_mutable_succs();
}

// optional .aixh.AIXLayer.AIXTensor input = 6;
inline bool AIXLayer::_internal_has_input() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.input_ != nullptr);
  return value;
}
inline bool AIXLayer::has_input() const {
  return _internal_has_input();
}
inline void AIXLayer::clear_input() {
  if (_impl_.input_ != nullptr) _impl_.input_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::aixh::AIXLayer_AIXTensor& AIXLayer::_internal_input() const {
  const ::aixh::AIXLayer_AIXTensor* p = _impl_.input_;
  return p != nullptr ? *p : reinterpret_cast<const ::aixh::AIXLayer_AIXTensor&>(
      ::aixh::_AIXLayer_AIXTensor_default_instance_);
}
inline const ::aixh::AIXLayer_AIXTensor& AIXLayer::input() const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.input)
  return _internal_input();
}
inline void AIXLayer::unsafe_arena_set_allocated_input(
    ::aixh::AIXLayer_AIXTensor* input) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.input_);
  }
  _impl_.input_ = input;
  if (input) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aixh.AIXLayer.input)
}
inline ::aixh::AIXLayer_AIXTensor* AIXLayer::release_input() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::aixh::AIXLayer_AIXTensor* temp = _impl_.input_;
  _impl_.input_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aixh::AIXLayer_AIXTensor* AIXLayer::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:aixh.AIXLayer.input)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::aixh::AIXLayer_AIXTensor* temp = _impl_.input_;
  _impl_.input_ = nullptr;
  return temp;
}
inline ::aixh::AIXLayer_AIXTensor* AIXLayer::_internal_mutable_input() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.input_ == nullptr) {
    auto* p = CreateMaybeMessage<::aixh::AIXLayer_AIXTensor>(GetArenaForAllocation());
    _impl_.input_ = p;
  }
  return _impl_.input_;
}
inline ::aixh::AIXLayer_AIXTensor* AIXLayer::mutable_input() {
  ::aixh::AIXLayer_AIXTensor* _msg = _internal_mutable_input();
  // @@protoc_insertion_point(field_mutable:aixh.AIXLayer.input)
  return _msg;
}
inline void AIXLayer::set_allocated_input(::aixh::AIXLayer_AIXTensor* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(input);
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.input_ = input;
  // @@protoc_insertion_point(field_set_allocated:aixh.AIXLayer.input)
}

// optional .aixh.AIXLayer.AIXTensor output = 7;
inline bool AIXLayer::_internal_has_output() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.output_ != nullptr);
  return value;
}
inline bool AIXLayer::has_output() const {
  return _internal_has_output();
}
inline void AIXLayer::clear_output() {
  if (_impl_.output_ != nullptr) _impl_.output_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::aixh::AIXLayer_AIXTensor& AIXLayer::_internal_output() const {
  const ::aixh::AIXLayer_AIXTensor* p = _impl_.output_;
  return p != nullptr ? *p : reinterpret_cast<const ::aixh::AIXLayer_AIXTensor&>(
      ::aixh::_AIXLayer_AIXTensor_default_instance_);
}
inline const ::aixh::AIXLayer_AIXTensor& AIXLayer::output() const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.output)
  return _internal_output();
}
inline void AIXLayer::unsafe_arena_set_allocated_output(
    ::aixh::AIXLayer_AIXTensor* output) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.output_);
  }
  _impl_.output_ = output;
  if (output) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aixh.AIXLayer.output)
}
inline ::aixh::AIXLayer_AIXTensor* AIXLayer::release_output() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::aixh::AIXLayer_AIXTensor* temp = _impl_.output_;
  _impl_.output_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aixh::AIXLayer_AIXTensor* AIXLayer::unsafe_arena_release_output() {
  // @@protoc_insertion_point(field_release:aixh.AIXLayer.output)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::aixh::AIXLayer_AIXTensor* temp = _impl_.output_;
  _impl_.output_ = nullptr;
  return temp;
}
inline ::aixh::AIXLayer_AIXTensor* AIXLayer::_internal_mutable_output() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.output_ == nullptr) {
    auto* p = CreateMaybeMessage<::aixh::AIXLayer_AIXTensor>(GetArenaForAllocation());
    _impl_.output_ = p;
  }
  return _impl_.output_;
}
inline ::aixh::AIXLayer_AIXTensor* AIXLayer::mutable_output() {
  ::aixh::AIXLayer_AIXTensor* _msg = _internal_mutable_output();
  // @@protoc_insertion_point(field_mutable:aixh.AIXLayer.output)
  return _msg;
}
inline void AIXLayer::set_allocated_output(::aixh::AIXLayer_AIXTensor* output) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.output_;
  }
  if (output) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(output);
    if (message_arena != submessage_arena) {
      output = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.output_ = output;
  // @@protoc_insertion_point(field_set_allocated:aixh.AIXLayer.output)
}

// optional .aixh.AIXLayer.AIXTensor filter = 8;
inline bool AIXLayer::_internal_has_filter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.filter_ != nullptr);
  return value;
}
inline bool AIXLayer::has_filter() const {
  return _internal_has_filter();
}
inline void AIXLayer::clear_filter() {
  if (_impl_.filter_ != nullptr) _impl_.filter_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::aixh::AIXLayer_AIXTensor& AIXLayer::_internal_filter() const {
  const ::aixh::AIXLayer_AIXTensor* p = _impl_.filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::aixh::AIXLayer_AIXTensor&>(
      ::aixh::_AIXLayer_AIXTensor_default_instance_);
}
inline const ::aixh::AIXLayer_AIXTensor& AIXLayer::filter() const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.filter)
  return _internal_filter();
}
inline void AIXLayer::unsafe_arena_set_allocated_filter(
    ::aixh::AIXLayer_AIXTensor* filter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.filter_);
  }
  _impl_.filter_ = filter;
  if (filter) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aixh.AIXLayer.filter)
}
inline ::aixh::AIXLayer_AIXTensor* AIXLayer::release_filter() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::aixh::AIXLayer_AIXTensor* temp = _impl_.filter_;
  _impl_.filter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aixh::AIXLayer_AIXTensor* AIXLayer::unsafe_arena_release_filter() {
  // @@protoc_insertion_point(field_release:aixh.AIXLayer.filter)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::aixh::AIXLayer_AIXTensor* temp = _impl_.filter_;
  _impl_.filter_ = nullptr;
  return temp;
}
inline ::aixh::AIXLayer_AIXTensor* AIXLayer::_internal_mutable_filter() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::aixh::AIXLayer_AIXTensor>(GetArenaForAllocation());
    _impl_.filter_ = p;
  }
  return _impl_.filter_;
}
inline ::aixh::AIXLayer_AIXTensor* AIXLayer::mutable_filter() {
  ::aixh::AIXLayer_AIXTensor* _msg = _internal_mutable_filter();
  // @@protoc_insertion_point(field_mutable:aixh.AIXLayer.filter)
  return _msg;
}
inline void AIXLayer::set_allocated_filter(::aixh::AIXLayer_AIXTensor* filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.filter_;
  }
  if (filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(filter);
    if (message_arena != submessage_arena) {
      filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.filter_ = filter;
  // @@protoc_insertion_point(field_set_allocated:aixh.AIXLayer.filter)
}

// optional .aixh.AIXLayer.AIXTensor bias = 9;
inline bool AIXLayer::_internal_has_bias() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bias_ != nullptr);
  return value;
}
inline bool AIXLayer::has_bias() const {
  return _internal_has_bias();
}
inline void AIXLayer::clear_bias() {
  if (_impl_.bias_ != nullptr) _impl_.bias_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const ::aixh::AIXLayer_AIXTensor& AIXLayer::_internal_bias() const {
  const ::aixh::AIXLayer_AIXTensor* p = _impl_.bias_;
  return p != nullptr ? *p : reinterpret_cast<const ::aixh::AIXLayer_AIXTensor&>(
      ::aixh::_AIXLayer_AIXTensor_default_instance_);
}
inline const ::aixh::AIXLayer_AIXTensor& AIXLayer::bias() const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.bias)
  return _internal_bias();
}
inline void AIXLayer::unsafe_arena_set_allocated_bias(
    ::aixh::AIXLayer_AIXTensor* bias) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bias_);
  }
  _impl_.bias_ = bias;
  if (bias) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aixh.AIXLayer.bias)
}
inline ::aixh::AIXLayer_AIXTensor* AIXLayer::release_bias() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::aixh::AIXLayer_AIXTensor* temp = _impl_.bias_;
  _impl_.bias_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aixh::AIXLayer_AIXTensor* AIXLayer::unsafe_arena_release_bias() {
  // @@protoc_insertion_point(field_release:aixh.AIXLayer.bias)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::aixh::AIXLayer_AIXTensor* temp = _impl_.bias_;
  _impl_.bias_ = nullptr;
  return temp;
}
inline ::aixh::AIXLayer_AIXTensor* AIXLayer::_internal_mutable_bias() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.bias_ == nullptr) {
    auto* p = CreateMaybeMessage<::aixh::AIXLayer_AIXTensor>(GetArenaForAllocation());
    _impl_.bias_ = p;
  }
  return _impl_.bias_;
}
inline ::aixh::AIXLayer_AIXTensor* AIXLayer::mutable_bias() {
  ::aixh::AIXLayer_AIXTensor* _msg = _internal_mutable_bias();
  // @@protoc_insertion_point(field_mutable:aixh.AIXLayer.bias)
  return _msg;
}
inline void AIXLayer::set_allocated_bias(::aixh::AIXLayer_AIXTensor* bias) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.bias_;
  }
  if (bias) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bias);
    if (message_arena != submessage_arena) {
      bias = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bias, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.bias_ = bias;
  // @@protoc_insertion_point(field_set_allocated:aixh.AIXLayer.bias)
}

// optional .aixh.AIXLayer.AIXTensor scale = 10;
inline bool AIXLayer::_internal_has_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.scale_ != nullptr);
  return value;
}
inline bool AIXLayer::has_scale() const {
  return _internal_has_scale();
}
inline void AIXLayer::clear_scale() {
  if (_impl_.scale_ != nullptr) _impl_.scale_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline const ::aixh::AIXLayer_AIXTensor& AIXLayer::_internal_scale() const {
  const ::aixh::AIXLayer_AIXTensor* p = _impl_.scale_;
  return p != nullptr ? *p : reinterpret_cast<const ::aixh::AIXLayer_AIXTensor&>(
      ::aixh::_AIXLayer_AIXTensor_default_instance_);
}
inline const ::aixh::AIXLayer_AIXTensor& AIXLayer::scale() const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.scale)
  return _internal_scale();
}
inline void AIXLayer::unsafe_arena_set_allocated_scale(
    ::aixh::AIXLayer_AIXTensor* scale) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scale_);
  }
  _impl_.scale_ = scale;
  if (scale) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aixh.AIXLayer.scale)
}
inline ::aixh::AIXLayer_AIXTensor* AIXLayer::release_scale() {
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::aixh::AIXLayer_AIXTensor* temp = _impl_.scale_;
  _impl_.scale_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aixh::AIXLayer_AIXTensor* AIXLayer::unsafe_arena_release_scale() {
  // @@protoc_insertion_point(field_release:aixh.AIXLayer.scale)
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::aixh::AIXLayer_AIXTensor* temp = _impl_.scale_;
  _impl_.scale_ = nullptr;
  return temp;
}
inline ::aixh::AIXLayer_AIXTensor* AIXLayer::_internal_mutable_scale() {
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.scale_ == nullptr) {
    auto* p = CreateMaybeMessage<::aixh::AIXLayer_AIXTensor>(GetArenaForAllocation());
    _impl_.scale_ = p;
  }
  return _impl_.scale_;
}
inline ::aixh::AIXLayer_AIXTensor* AIXLayer::mutable_scale() {
  ::aixh::AIXLayer_AIXTensor* _msg = _internal_mutable_scale();
  // @@protoc_insertion_point(field_mutable:aixh.AIXLayer.scale)
  return _msg;
}
inline void AIXLayer::set_allocated_scale(::aixh::AIXLayer_AIXTensor* scale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.scale_;
  }
  if (scale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(scale);
    if (message_arena != submessage_arena) {
      scale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scale, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.scale_ = scale;
  // @@protoc_insertion_point(field_set_allocated:aixh.AIXLayer.scale)
}

// optional .aixh.AIXLayer.AIXTensor mean = 11;
inline bool AIXLayer::_internal_has_mean() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.mean_ != nullptr);
  return value;
}
inline bool AIXLayer::has_mean() const {
  return _internal_has_mean();
}
inline void AIXLayer::clear_mean() {
  if (_impl_.mean_ != nullptr) _impl_.mean_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline const ::aixh::AIXLayer_AIXTensor& AIXLayer::_internal_mean() const {
  const ::aixh::AIXLayer_AIXTensor* p = _impl_.mean_;
  return p != nullptr ? *p : reinterpret_cast<const ::aixh::AIXLayer_AIXTensor&>(
      ::aixh::_AIXLayer_AIXTensor_default_instance_);
}
inline const ::aixh::AIXLayer_AIXTensor& AIXLayer::mean() const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.mean)
  return _internal_mean();
}
inline void AIXLayer::unsafe_arena_set_allocated_mean(
    ::aixh::AIXLayer_AIXTensor* mean) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mean_);
  }
  _impl_.mean_ = mean;
  if (mean) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aixh.AIXLayer.mean)
}
inline ::aixh::AIXLayer_AIXTensor* AIXLayer::release_mean() {
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::aixh::AIXLayer_AIXTensor* temp = _impl_.mean_;
  _impl_.mean_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aixh::AIXLayer_AIXTensor* AIXLayer::unsafe_arena_release_mean() {
  // @@protoc_insertion_point(field_release:aixh.AIXLayer.mean)
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::aixh::AIXLayer_AIXTensor* temp = _impl_.mean_;
  _impl_.mean_ = nullptr;
  return temp;
}
inline ::aixh::AIXLayer_AIXTensor* AIXLayer::_internal_mutable_mean() {
  _impl_._has_bits_[0] |= 0x00000400u;
  if (_impl_.mean_ == nullptr) {
    auto* p = CreateMaybeMessage<::aixh::AIXLayer_AIXTensor>(GetArenaForAllocation());
    _impl_.mean_ = p;
  }
  return _impl_.mean_;
}
inline ::aixh::AIXLayer_AIXTensor* AIXLayer::mutable_mean() {
  ::aixh::AIXLayer_AIXTensor* _msg = _internal_mutable_mean();
  // @@protoc_insertion_point(field_mutable:aixh.AIXLayer.mean)
  return _msg;
}
inline void AIXLayer::set_allocated_mean(::aixh::AIXLayer_AIXTensor* mean) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.mean_;
  }
  if (mean) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mean);
    if (message_arena != submessage_arena) {
      mean = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mean, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.mean_ = mean;
  // @@protoc_insertion_point(field_set_allocated:aixh.AIXLayer.mean)
}

// optional .aixh.AIXLayer.AIXTensor variance = 12;
inline bool AIXLayer::_internal_has_variance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.variance_ != nullptr);
  return value;
}
inline bool AIXLayer::has_variance() const {
  return _internal_has_variance();
}
inline void AIXLayer::clear_variance() {
  if (_impl_.variance_ != nullptr) _impl_.variance_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline const ::aixh::AIXLayer_AIXTensor& AIXLayer::_internal_variance() const {
  const ::aixh::AIXLayer_AIXTensor* p = _impl_.variance_;
  return p != nullptr ? *p : reinterpret_cast<const ::aixh::AIXLayer_AIXTensor&>(
      ::aixh::_AIXLayer_AIXTensor_default_instance_);
}
inline const ::aixh::AIXLayer_AIXTensor& AIXLayer::variance() const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.variance)
  return _internal_variance();
}
inline void AIXLayer::unsafe_arena_set_allocated_variance(
    ::aixh::AIXLayer_AIXTensor* variance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.variance_);
  }
  _impl_.variance_ = variance;
  if (variance) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aixh.AIXLayer.variance)
}
inline ::aixh::AIXLayer_AIXTensor* AIXLayer::release_variance() {
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::aixh::AIXLayer_AIXTensor* temp = _impl_.variance_;
  _impl_.variance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aixh::AIXLayer_AIXTensor* AIXLayer::unsafe_arena_release_variance() {
  // @@protoc_insertion_point(field_release:aixh.AIXLayer.variance)
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::aixh::AIXLayer_AIXTensor* temp = _impl_.variance_;
  _impl_.variance_ = nullptr;
  return temp;
}
inline ::aixh::AIXLayer_AIXTensor* AIXLayer::_internal_mutable_variance() {
  _impl_._has_bits_[0] |= 0x00000800u;
  if (_impl_.variance_ == nullptr) {
    auto* p = CreateMaybeMessage<::aixh::AIXLayer_AIXTensor>(GetArenaForAllocation());
    _impl_.variance_ = p;
  }
  return _impl_.variance_;
}
inline ::aixh::AIXLayer_AIXTensor* AIXLayer::mutable_variance() {
  ::aixh::AIXLayer_AIXTensor* _msg = _internal_mutable_variance();
  // @@protoc_insertion_point(field_mutable:aixh.AIXLayer.variance)
  return _msg;
}
inline void AIXLayer::set_allocated_variance(::aixh::AIXLayer_AIXTensor* variance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.variance_;
  }
  if (variance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(variance);
    if (message_arena != submessage_arena) {
      variance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, variance, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  _impl_.variance_ = variance;
  // @@protoc_insertion_point(field_set_allocated:aixh.AIXLayer.variance)
}

// optional float epsilon = 16;
inline bool AIXLayer::_internal_has_epsilon() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool AIXLayer::has_epsilon() const {
  return _internal_has_epsilon();
}
inline void AIXLayer::clear_epsilon() {
  _impl_.epsilon_ = 0;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline float AIXLayer::_internal_epsilon() const {
  return _impl_.epsilon_;
}
inline float AIXLayer::epsilon() const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.epsilon)
  return _internal_epsilon();
}
inline void AIXLayer::_internal_set_epsilon(float value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.epsilon_ = value;
}
inline void AIXLayer::set_epsilon(float value) {
  _internal_set_epsilon(value);
  // @@protoc_insertion_point(field_set:aixh.AIXLayer.epsilon)
}

// optional float alpha = 17;
inline bool AIXLayer::_internal_has_alpha() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool AIXLayer::has_alpha() const {
  return _internal_has_alpha();
}
inline void AIXLayer::clear_alpha() {
  _impl_.alpha_ = 0;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline float AIXLayer::_internal_alpha() const {
  return _impl_.alpha_;
}
inline float AIXLayer::alpha() const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.alpha)
  return _internal_alpha();
}
inline void AIXLayer::_internal_set_alpha(float value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.alpha_ = value;
}
inline void AIXLayer::set_alpha(float value) {
  _internal_set_alpha(value);
  // @@protoc_insertion_point(field_set:aixh.AIXLayer.alpha)
}

// optional float gamma = 18;
inline bool AIXLayer::_internal_has_gamma() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool AIXLayer::has_gamma() const {
  return _internal_has_gamma();
}
inline void AIXLayer::clear_gamma() {
  _impl_.gamma_ = 0;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline float AIXLayer::_internal_gamma() const {
  return _impl_.gamma_;
}
inline float AIXLayer::gamma() const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.gamma)
  return _internal_gamma();
}
inline void AIXLayer::_internal_set_gamma(float value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.gamma_ = value;
}
inline void AIXLayer::set_gamma(float value) {
  _internal_set_gamma(value);
  // @@protoc_insertion_point(field_set:aixh.AIXLayer.gamma)
}

// optional int32 axis = 23;
inline bool AIXLayer::_internal_has_axis() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool AIXLayer::has_axis() const {
  return _internal_has_axis();
}
inline void AIXLayer::clear_axis() {
  _impl_.axis_ = 0;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline int32_t AIXLayer::_internal_axis() const {
  return _impl_.axis_;
}
inline int32_t AIXLayer::axis() const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.axis)
  return _internal_axis();
}
inline void AIXLayer::_internal_set_axis(int32_t value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.axis_ = value;
}
inline void AIXLayer::set_axis(int32_t value) {
  _internal_set_axis(value);
  // @@protoc_insertion_point(field_set:aixh.AIXLayer.axis)
}

// optional int32 stash_type = 24;
inline bool AIXLayer::_internal_has_stash_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool AIXLayer::has_stash_type() const {
  return _internal_has_stash_type();
}
inline void AIXLayer::clear_stash_type() {
  _impl_.stash_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline int32_t AIXLayer::_internal_stash_type() const {
  return _impl_.stash_type_;
}
inline int32_t AIXLayer::stash_type() const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.stash_type)
  return _internal_stash_type();
}
inline void AIXLayer::_internal_set_stash_type(int32_t value) {
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.stash_type_ = value;
}
inline void AIXLayer::set_stash_type(int32_t value) {
  _internal_set_stash_type(value);
  // @@protoc_insertion_point(field_set:aixh.AIXLayer.stash_type)
}

// optional float beta = 25;
inline bool AIXLayer::_internal_has_beta() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool AIXLayer::has_beta() const {
  return _internal_has_beta();
}
inline void AIXLayer::clear_beta() {
  _impl_.beta_ = 0;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline float AIXLayer::_internal_beta() const {
  return _impl_.beta_;
}
inline float AIXLayer::beta() const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.beta)
  return _internal_beta();
}
inline void AIXLayer::_internal_set_beta(float value) {
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.beta_ = value;
}
inline void AIXLayer::set_beta(float value) {
  _internal_set_beta(value);
  // @@protoc_insertion_point(field_set:aixh.AIXLayer.beta)
}

// optional int64 transA = 26;
inline bool AIXLayer::_internal_has_transa() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool AIXLayer::has_transa() const {
  return _internal_has_transa();
}
inline void AIXLayer::clear_transa() {
  _impl_.transa_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline int64_t AIXLayer::_internal_transa() const {
  return _impl_.transa_;
}
inline int64_t AIXLayer::transa() const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.transA)
  return _internal_transa();
}
inline void AIXLayer::_internal_set_transa(int64_t value) {
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.transa_ = value;
}
inline void AIXLayer::set_transa(int64_t value) {
  _internal_set_transa(value);
  // @@protoc_insertion_point(field_set:aixh.AIXLayer.transA)
}

// optional int64 transB = 27;
inline bool AIXLayer::_internal_has_transb() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool AIXLayer::has_transb() const {
  return _internal_has_transb();
}
inline void AIXLayer::clear_transb() {
  _impl_.transb_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline int64_t AIXLayer::_internal_transb() const {
  return _impl_.transb_;
}
inline int64_t AIXLayer::transb() const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.transB)
  return _internal_transb();
}
inline void AIXLayer::_internal_set_transb(int64_t value) {
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.transb_ = value;
}
inline void AIXLayer::set_transb(int64_t value) {
  _internal_set_transb(value);
  // @@protoc_insertion_point(field_set:aixh.AIXLayer.transB)
}

// optional int64 keepdims = 28;
inline bool AIXLayer::_internal_has_keepdims() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool AIXLayer::has_keepdims() const {
  return _internal_has_keepdims();
}
inline void AIXLayer::clear_keepdims() {
  _impl_.keepdims_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline int64_t AIXLayer::_internal_keepdims() const {
  return _impl_.keepdims_;
}
inline int64_t AIXLayer::keepdims() const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.keepdims)
  return _internal_keepdims();
}
inline void AIXLayer::_internal_set_keepdims(int64_t value) {
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.keepdims_ = value;
}
inline void AIXLayer::set_keepdims(int64_t value) {
  _internal_set_keepdims(value);
  // @@protoc_insertion_point(field_set:aixh.AIXLayer.keepdims)
}

// optional int64 noop_with_empty_axes = 29;
inline bool AIXLayer::_internal_has_noop_with_empty_axes() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool AIXLayer::has_noop_with_empty_axes() const {
  return _internal_has_noop_with_empty_axes();
}
inline void AIXLayer::clear_noop_with_empty_axes() {
  _impl_.noop_with_empty_axes_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline int64_t AIXLayer::_internal_noop_with_empty_axes() const {
  return _impl_.noop_with_empty_axes_;
}
inline int64_t AIXLayer::noop_with_empty_axes() const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.noop_with_empty_axes)
  return _internal_noop_with_empty_axes();
}
inline void AIXLayer::_internal_set_noop_with_empty_axes(int64_t value) {
  _impl_._has_bits_[0] |= 0x10000000u;
  _impl_.noop_with_empty_axes_ = value;
}
inline void AIXLayer::set_noop_with_empty_axes(int64_t value) {
  _internal_set_noop_with_empty_axes(value);
  // @@protoc_insertion_point(field_set:aixh.AIXLayer.noop_with_empty_axes)
}

// optional int64 select_last_index = 31;
inline bool AIXLayer::_internal_has_select_last_index() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool AIXLayer::has_select_last_index() const {
  return _internal_has_select_last_index();
}
inline void AIXLayer::clear_select_last_index() {
  _impl_.select_last_index_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline int64_t AIXLayer::_internal_select_last_index() const {
  return _impl_.select_last_index_;
}
inline int64_t AIXLayer::select_last_index() const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.select_last_index)
  return _internal_select_last_index();
}
inline void AIXLayer::_internal_set_select_last_index(int64_t value) {
  _impl_._has_bits_[0] |= 0x20000000u;
  _impl_.select_last_index_ = value;
}
inline void AIXLayer::set_select_last_index(int64_t value) {
  _internal_set_select_last_index(value);
  // @@protoc_insertion_point(field_set:aixh.AIXLayer.select_last_index)
}

// repeated int64 axes = 32;
inline int AIXLayer::_internal_axes_size() const {
  return _impl_.axes_.size();
}
inline int AIXLayer::axes_size() const {
  return _internal_axes_size();
}
inline void AIXLayer::clear_axes() {
  _impl_.axes_.Clear();
}
inline int64_t AIXLayer::_internal_axes(int index) const {
  return _impl_.axes_.Get(index);
}
inline int64_t AIXLayer::axes(int index) const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.axes)
  return _internal_axes(index);
}
inline void AIXLayer::set_axes(int index, int64_t value) {
  _impl_.axes_.Set(index, value);
  // @@protoc_insertion_point(field_set:aixh.AIXLayer.axes)
}
inline void AIXLayer::_internal_add_axes(int64_t value) {
  _impl_.axes_.Add(value);
}
inline void AIXLayer::add_axes(int64_t value) {
  _internal_add_axes(value);
  // @@protoc_insertion_point(field_add:aixh.AIXLayer.axes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
AIXLayer::_internal_axes() const {
  return _impl_.axes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
AIXLayer::axes() const {
  // @@protoc_insertion_point(field_list:aixh.AIXLayer.axes)
  return _internal_axes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
AIXLayer::_internal_mutable_axes() {
  return &_impl_.axes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
AIXLayer::mutable_axes() {
  // @@protoc_insertion_point(field_mutable_list:aixh.AIXLayer.axes)
  return _internal_mutable_axes();
}

// optional string mode = 33;
inline bool AIXLayer::_internal_has_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AIXLayer::has_mode() const {
  return _internal_has_mode();
}
inline void AIXLayer::clear_mode() {
  _impl_.mode_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AIXLayer::mode() const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.mode)
  return _internal_mode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AIXLayer::set_mode(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.mode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:aixh.AIXLayer.mode)
}
inline std::string* AIXLayer::mutable_mode() {
  std::string* _s = _internal_mutable_mode();
  // @@protoc_insertion_point(field_mutable:aixh.AIXLayer.mode)
  return _s;
}
inline const std::string& AIXLayer::_internal_mode() const {
  return _impl_.mode_.Get();
}
inline void AIXLayer::_internal_set_mode(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.mode_.Set(value, GetArenaForAllocation());
}
inline std::string* AIXLayer::_internal_mutable_mode() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.mode_.Mutable(GetArenaForAllocation());
}
inline std::string* AIXLayer::release_mode() {
  // @@protoc_insertion_point(field_release:aixh.AIXLayer.mode)
  if (!_internal_has_mode()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.mode_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mode_.IsDefault()) {
    _impl_.mode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AIXLayer::set_allocated_mode(std::string* mode) {
  if (mode != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.mode_.SetAllocated(mode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mode_.IsDefault()) {
    _impl_.mode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:aixh.AIXLayer.mode)
}

// repeated float scales = 34;
inline int AIXLayer::_internal_scales_size() const {
  return _impl_.scales_.size();
}
inline int AIXLayer::scales_size() const {
  return _internal_scales_size();
}
inline void AIXLayer::clear_scales() {
  _impl_.scales_.Clear();
}
inline float AIXLayer::_internal_scales(int index) const {
  return _impl_.scales_.Get(index);
}
inline float AIXLayer::scales(int index) const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.scales)
  return _internal_scales(index);
}
inline void AIXLayer::set_scales(int index, float value) {
  _impl_.scales_.Set(index, value);
  // @@protoc_insertion_point(field_set:aixh.AIXLayer.scales)
}
inline void AIXLayer::_internal_add_scales(float value) {
  _impl_.scales_.Add(value);
}
inline void AIXLayer::add_scales(float value) {
  _internal_add_scales(value);
  // @@protoc_insertion_point(field_add:aixh.AIXLayer.scales)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
AIXLayer::_internal_scales() const {
  return _impl_.scales_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
AIXLayer::scales() const {
  // @@protoc_insertion_point(field_list:aixh.AIXLayer.scales)
  return _internal_scales();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
AIXLayer::_internal_mutable_scales() {
  return &_impl_.scales_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
AIXLayer::mutable_scales() {
  // @@protoc_insertion_point(field_mutable_list:aixh.AIXLayer.scales)
  return _internal_mutable_scales();
}

// optional float extrapolation_value = 35;
inline bool AIXLayer::_internal_has_extrapolation_value() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool AIXLayer::has_extrapolation_value() const {
  return _internal_has_extrapolation_value();
}
inline void AIXLayer::clear_extrapolation_value() {
  _impl_.extrapolation_value_ = 0;
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline float AIXLayer::_internal_extrapolation_value() const {
  return _impl_.extrapolation_value_;
}
inline float AIXLayer::extrapolation_value() const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.extrapolation_value)
  return _internal_extrapolation_value();
}
inline void AIXLayer::_internal_set_extrapolation_value(float value) {
  _impl_._has_bits_[0] |= 0x40000000u;
  _impl_.extrapolation_value_ = value;
}
inline void AIXLayer::set_extrapolation_value(float value) {
  _internal_set_extrapolation_value(value);
  // @@protoc_insertion_point(field_set:aixh.AIXLayer.extrapolation_value)
}

// optional string coordinate_transformation_mode = 36;
inline bool AIXLayer::_internal_has_coordinate_transformation_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AIXLayer::has_coordinate_transformation_mode() const {
  return _internal_has_coordinate_transformation_mode();
}
inline void AIXLayer::clear_coordinate_transformation_mode() {
  _impl_.coordinate_transformation_mode_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AIXLayer::coordinate_transformation_mode() const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.coordinate_transformation_mode)
  return _internal_coordinate_transformation_mode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AIXLayer::set_coordinate_transformation_mode(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.coordinate_transformation_mode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:aixh.AIXLayer.coordinate_transformation_mode)
}
inline std::string* AIXLayer::mutable_coordinate_transformation_mode() {
  std::string* _s = _internal_mutable_coordinate_transformation_mode();
  // @@protoc_insertion_point(field_mutable:aixh.AIXLayer.coordinate_transformation_mode)
  return _s;
}
inline const std::string& AIXLayer::_internal_coordinate_transformation_mode() const {
  return _impl_.coordinate_transformation_mode_.Get();
}
inline void AIXLayer::_internal_set_coordinate_transformation_mode(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.coordinate_transformation_mode_.Set(value, GetArenaForAllocation());
}
inline std::string* AIXLayer::_internal_mutable_coordinate_transformation_mode() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.coordinate_transformation_mode_.Mutable(GetArenaForAllocation());
}
inline std::string* AIXLayer::release_coordinate_transformation_mode() {
  // @@protoc_insertion_point(field_release:aixh.AIXLayer.coordinate_transformation_mode)
  if (!_internal_has_coordinate_transformation_mode()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.coordinate_transformation_mode_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.coordinate_transformation_mode_.IsDefault()) {
    _impl_.coordinate_transformation_mode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AIXLayer::set_allocated_coordinate_transformation_mode(std::string* coordinate_transformation_mode) {
  if (coordinate_transformation_mode != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.coordinate_transformation_mode_.SetAllocated(coordinate_transformation_mode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.coordinate_transformation_mode_.IsDefault()) {
    _impl_.coordinate_transformation_mode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:aixh.AIXLayer.coordinate_transformation_mode)
}

// optional string nearest_mode = 37;
inline bool AIXLayer::_internal_has_nearest_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AIXLayer::has_nearest_mode() const {
  return _internal_has_nearest_mode();
}
inline void AIXLayer::clear_nearest_mode() {
  _impl_.nearest_mode_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& AIXLayer::nearest_mode() const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.nearest_mode)
  return _internal_nearest_mode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AIXLayer::set_nearest_mode(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.nearest_mode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:aixh.AIXLayer.nearest_mode)
}
inline std::string* AIXLayer::mutable_nearest_mode() {
  std::string* _s = _internal_mutable_nearest_mode();
  // @@protoc_insertion_point(field_mutable:aixh.AIXLayer.nearest_mode)
  return _s;
}
inline const std::string& AIXLayer::_internal_nearest_mode() const {
  return _impl_.nearest_mode_.Get();
}
inline void AIXLayer::_internal_set_nearest_mode(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.nearest_mode_.Set(value, GetArenaForAllocation());
}
inline std::string* AIXLayer::_internal_mutable_nearest_mode() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.nearest_mode_.Mutable(GetArenaForAllocation());
}
inline std::string* AIXLayer::release_nearest_mode() {
  // @@protoc_insertion_point(field_release:aixh.AIXLayer.nearest_mode)
  if (!_internal_has_nearest_mode()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.nearest_mode_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nearest_mode_.IsDefault()) {
    _impl_.nearest_mode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AIXLayer::set_allocated_nearest_mode(std::string* nearest_mode) {
  if (nearest_mode != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.nearest_mode_.SetAllocated(nearest_mode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nearest_mode_.IsDefault()) {
    _impl_.nearest_mode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:aixh.AIXLayer.nearest_mode)
}

// optional float cubic_coeff_a = 38;
inline bool AIXLayer::_internal_has_cubic_coeff_a() const {
  bool value = (_impl_._has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool AIXLayer::has_cubic_coeff_a() const {
  return _internal_has_cubic_coeff_a();
}
inline void AIXLayer::clear_cubic_coeff_a() {
  _impl_.cubic_coeff_a_ = 0;
  _impl_._has_bits_[0] &= ~0x80000000u;
}
inline float AIXLayer::_internal_cubic_coeff_a() const {
  return _impl_.cubic_coeff_a_;
}
inline float AIXLayer::cubic_coeff_a() const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.cubic_coeff_a)
  return _internal_cubic_coeff_a();
}
inline void AIXLayer::_internal_set_cubic_coeff_a(float value) {
  _impl_._has_bits_[0] |= 0x80000000u;
  _impl_.cubic_coeff_a_ = value;
}
inline void AIXLayer::set_cubic_coeff_a(float value) {
  _internal_set_cubic_coeff_a(value);
  // @@protoc_insertion_point(field_set:aixh.AIXLayer.cubic_coeff_a)
}

// optional int64 exclude_outside = 39;
inline bool AIXLayer::_internal_has_exclude_outside() const {
  bool value = (_impl_._has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool AIXLayer::has_exclude_outside() const {
  return _internal_has_exclude_outside();
}
inline void AIXLayer::clear_exclude_outside() {
  _impl_.exclude_outside_ = int64_t{0};
  _impl_._has_bits_[1] &= ~0x00000001u;
}
inline int64_t AIXLayer::_internal_exclude_outside() const {
  return _impl_.exclude_outside_;
}
inline int64_t AIXLayer::exclude_outside() const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.exclude_outside)
  return _internal_exclude_outside();
}
inline void AIXLayer::_internal_set_exclude_outside(int64_t value) {
  _impl_._has_bits_[1] |= 0x00000001u;
  _impl_.exclude_outside_ = value;
}
inline void AIXLayer::set_exclude_outside(int64_t value) {
  _internal_set_exclude_outside(value);
  // @@protoc_insertion_point(field_set:aixh.AIXLayer.exclude_outside)
}

// optional string auto_pad = 40;
inline bool AIXLayer::_internal_has_auto_pad() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AIXLayer::has_auto_pad() const {
  return _internal_has_auto_pad();
}
inline void AIXLayer::clear_auto_pad() {
  _impl_.auto_pad_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& AIXLayer::auto_pad() const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.auto_pad)
  return _internal_auto_pad();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AIXLayer::set_auto_pad(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.auto_pad_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:aixh.AIXLayer.auto_pad)
}
inline std::string* AIXLayer::mutable_auto_pad() {
  std::string* _s = _internal_mutable_auto_pad();
  // @@protoc_insertion_point(field_mutable:aixh.AIXLayer.auto_pad)
  return _s;
}
inline const std::string& AIXLayer::_internal_auto_pad() const {
  return _impl_.auto_pad_.Get();
}
inline void AIXLayer::_internal_set_auto_pad(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.auto_pad_.Set(value, GetArenaForAllocation());
}
inline std::string* AIXLayer::_internal_mutable_auto_pad() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.auto_pad_.Mutable(GetArenaForAllocation());
}
inline std::string* AIXLayer::release_auto_pad() {
  // @@protoc_insertion_point(field_release:aixh.AIXLayer.auto_pad)
  if (!_internal_has_auto_pad()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.auto_pad_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.auto_pad_.IsDefault()) {
    _impl_.auto_pad_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AIXLayer::set_allocated_auto_pad(std::string* auto_pad) {
  if (auto_pad != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.auto_pad_.SetAllocated(auto_pad, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.auto_pad_.IsDefault()) {
    _impl_.auto_pad_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:aixh.AIXLayer.auto_pad)
}

// repeated int64 dilations = 41;
inline int AIXLayer::_internal_dilations_size() const {
  return _impl_.dilations_.size();
}
inline int AIXLayer::dilations_size() const {
  return _internal_dilations_size();
}
inline void AIXLayer::clear_dilations() {
  _impl_.dilations_.Clear();
}
inline int64_t AIXLayer::_internal_dilations(int index) const {
  return _impl_.dilations_.Get(index);
}
inline int64_t AIXLayer::dilations(int index) const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.dilations)
  return _internal_dilations(index);
}
inline void AIXLayer::set_dilations(int index, int64_t value) {
  _impl_.dilations_.Set(index, value);
  // @@protoc_insertion_point(field_set:aixh.AIXLayer.dilations)
}
inline void AIXLayer::_internal_add_dilations(int64_t value) {
  _impl_.dilations_.Add(value);
}
inline void AIXLayer::add_dilations(int64_t value) {
  _internal_add_dilations(value);
  // @@protoc_insertion_point(field_add:aixh.AIXLayer.dilations)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
AIXLayer::_internal_dilations() const {
  return _impl_.dilations_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
AIXLayer::dilations() const {
  // @@protoc_insertion_point(field_list:aixh.AIXLayer.dilations)
  return _internal_dilations();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
AIXLayer::_internal_mutable_dilations() {
  return &_impl_.dilations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
AIXLayer::mutable_dilations() {
  // @@protoc_insertion_point(field_mutable_list:aixh.AIXLayer.dilations)
  return _internal_mutable_dilations();
}

// optional int64 group = 42;
inline bool AIXLayer::_internal_has_group() const {
  bool value = (_impl_._has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool AIXLayer::has_group() const {
  return _internal_has_group();
}
inline void AIXLayer::clear_group() {
  _impl_.group_ = int64_t{0};
  _impl_._has_bits_[1] &= ~0x00000002u;
}
inline int64_t AIXLayer::_internal_group() const {
  return _impl_.group_;
}
inline int64_t AIXLayer::group() const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.group)
  return _internal_group();
}
inline void AIXLayer::_internal_set_group(int64_t value) {
  _impl_._has_bits_[1] |= 0x00000002u;
  _impl_.group_ = value;
}
inline void AIXLayer::set_group(int64_t value) {
  _internal_set_group(value);
  // @@protoc_insertion_point(field_set:aixh.AIXLayer.group)
}

// repeated int64 kernel_shape = 43;
inline int AIXLayer::_internal_kernel_shape_size() const {
  return _impl_.kernel_shape_.size();
}
inline int AIXLayer::kernel_shape_size() const {
  return _internal_kernel_shape_size();
}
inline void AIXLayer::clear_kernel_shape() {
  _impl_.kernel_shape_.Clear();
}
inline int64_t AIXLayer::_internal_kernel_shape(int index) const {
  return _impl_.kernel_shape_.Get(index);
}
inline int64_t AIXLayer::kernel_shape(int index) const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.kernel_shape)
  return _internal_kernel_shape(index);
}
inline void AIXLayer::set_kernel_shape(int index, int64_t value) {
  _impl_.kernel_shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:aixh.AIXLayer.kernel_shape)
}
inline void AIXLayer::_internal_add_kernel_shape(int64_t value) {
  _impl_.kernel_shape_.Add(value);
}
inline void AIXLayer::add_kernel_shape(int64_t value) {
  _internal_add_kernel_shape(value);
  // @@protoc_insertion_point(field_add:aixh.AIXLayer.kernel_shape)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
AIXLayer::_internal_kernel_shape() const {
  return _impl_.kernel_shape_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
AIXLayer::kernel_shape() const {
  // @@protoc_insertion_point(field_list:aixh.AIXLayer.kernel_shape)
  return _internal_kernel_shape();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
AIXLayer::_internal_mutable_kernel_shape() {
  return &_impl_.kernel_shape_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
AIXLayer::mutable_kernel_shape() {
  // @@protoc_insertion_point(field_mutable_list:aixh.AIXLayer.kernel_shape)
  return _internal_mutable_kernel_shape();
}

// repeated int64 output_padding = 44;
inline int AIXLayer::_internal_output_padding_size() const {
  return _impl_.output_padding_.size();
}
inline int AIXLayer::output_padding_size() const {
  return _internal_output_padding_size();
}
inline void AIXLayer::clear_output_padding() {
  _impl_.output_padding_.Clear();
}
inline int64_t AIXLayer::_internal_output_padding(int index) const {
  return _impl_.output_padding_.Get(index);
}
inline int64_t AIXLayer::output_padding(int index) const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.output_padding)
  return _internal_output_padding(index);
}
inline void AIXLayer::set_output_padding(int index, int64_t value) {
  _impl_.output_padding_.Set(index, value);
  // @@protoc_insertion_point(field_set:aixh.AIXLayer.output_padding)
}
inline void AIXLayer::_internal_add_output_padding(int64_t value) {
  _impl_.output_padding_.Add(value);
}
inline void AIXLayer::add_output_padding(int64_t value) {
  _internal_add_output_padding(value);
  // @@protoc_insertion_point(field_add:aixh.AIXLayer.output_padding)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
AIXLayer::_internal_output_padding() const {
  return _impl_.output_padding_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
AIXLayer::output_padding() const {
  // @@protoc_insertion_point(field_list:aixh.AIXLayer.output_padding)
  return _internal_output_padding();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
AIXLayer::_internal_mutable_output_padding() {
  return &_impl_.output_padding_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
AIXLayer::mutable_output_padding() {
  // @@protoc_insertion_point(field_mutable_list:aixh.AIXLayer.output_padding)
  return _internal_mutable_output_padding();
}

// repeated int64 output_shape = 45;
inline int AIXLayer::_internal_output_shape_size() const {
  return _impl_.output_shape_.size();
}
inline int AIXLayer::output_shape_size() const {
  return _internal_output_shape_size();
}
inline void AIXLayer::clear_output_shape() {
  _impl_.output_shape_.Clear();
}
inline int64_t AIXLayer::_internal_output_shape(int index) const {
  return _impl_.output_shape_.Get(index);
}
inline int64_t AIXLayer::output_shape(int index) const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.output_shape)
  return _internal_output_shape(index);
}
inline void AIXLayer::set_output_shape(int index, int64_t value) {
  _impl_.output_shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:aixh.AIXLayer.output_shape)
}
inline void AIXLayer::_internal_add_output_shape(int64_t value) {
  _impl_.output_shape_.Add(value);
}
inline void AIXLayer::add_output_shape(int64_t value) {
  _internal_add_output_shape(value);
  // @@protoc_insertion_point(field_add:aixh.AIXLayer.output_shape)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
AIXLayer::_internal_output_shape() const {
  return _impl_.output_shape_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
AIXLayer::output_shape() const {
  // @@protoc_insertion_point(field_list:aixh.AIXLayer.output_shape)
  return _internal_output_shape();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
AIXLayer::_internal_mutable_output_shape() {
  return &_impl_.output_shape_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
AIXLayer::mutable_output_shape() {
  // @@protoc_insertion_point(field_mutable_list:aixh.AIXLayer.output_shape)
  return _internal_mutable_output_shape();
}

// repeated int64 pads = 46;
inline int AIXLayer::_internal_pads_size() const {
  return _impl_.pads_.size();
}
inline int AIXLayer::pads_size() const {
  return _internal_pads_size();
}
inline void AIXLayer::clear_pads() {
  _impl_.pads_.Clear();
}
inline int64_t AIXLayer::_internal_pads(int index) const {
  return _impl_.pads_.Get(index);
}
inline int64_t AIXLayer::pads(int index) const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.pads)
  return _internal_pads(index);
}
inline void AIXLayer::set_pads(int index, int64_t value) {
  _impl_.pads_.Set(index, value);
  // @@protoc_insertion_point(field_set:aixh.AIXLayer.pads)
}
inline void AIXLayer::_internal_add_pads(int64_t value) {
  _impl_.pads_.Add(value);
}
inline void AIXLayer::add_pads(int64_t value) {
  _internal_add_pads(value);
  // @@protoc_insertion_point(field_add:aixh.AIXLayer.pads)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
AIXLayer::_internal_pads() const {
  return _impl_.pads_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
AIXLayer::pads() const {
  // @@protoc_insertion_point(field_list:aixh.AIXLayer.pads)
  return _internal_pads();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
AIXLayer::_internal_mutable_pads() {
  return &_impl_.pads_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
AIXLayer::mutable_pads() {
  // @@protoc_insertion_point(field_mutable_list:aixh.AIXLayer.pads)
  return _internal_mutable_pads();
}

// repeated int64 strides = 47;
inline int AIXLayer::_internal_strides_size() const {
  return _impl_.strides_.size();
}
inline int AIXLayer::strides_size() const {
  return _internal_strides_size();
}
inline void AIXLayer::clear_strides() {
  _impl_.strides_.Clear();
}
inline int64_t AIXLayer::_internal_strides(int index) const {
  return _impl_.strides_.Get(index);
}
inline int64_t AIXLayer::strides(int index) const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.strides)
  return _internal_strides(index);
}
inline void AIXLayer::set_strides(int index, int64_t value) {
  _impl_.strides_.Set(index, value);
  // @@protoc_insertion_point(field_set:aixh.AIXLayer.strides)
}
inline void AIXLayer::_internal_add_strides(int64_t value) {
  _impl_.strides_.Add(value);
}
inline void AIXLayer::add_strides(int64_t value) {
  _internal_add_strides(value);
  // @@protoc_insertion_point(field_add:aixh.AIXLayer.strides)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
AIXLayer::_internal_strides() const {
  return _impl_.strides_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
AIXLayer::strides() const {
  // @@protoc_insertion_point(field_list:aixh.AIXLayer.strides)
  return _internal_strides();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
AIXLayer::_internal_mutable_strides() {
  return &_impl_.strides_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
AIXLayer::mutable_strides() {
  // @@protoc_insertion_point(field_mutable_list:aixh.AIXLayer.strides)
  return _internal_mutable_strides();
}

// optional float input_threshold = 13;
inline bool AIXLayer::_internal_has_input_threshold() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool AIXLayer::has_input_threshold() const {
  return _internal_has_input_threshold();
}
inline void AIXLayer::clear_input_threshold() {
  _impl_.input_threshold_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline float AIXLayer::_internal_input_threshold() const {
  return _impl_.input_threshold_;
}
inline float AIXLayer::input_threshold() const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.input_threshold)
  return _internal_input_threshold();
}
inline void AIXLayer::_internal_set_input_threshold(float value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.input_threshold_ = value;
}
inline void AIXLayer::set_input_threshold(float value) {
  _internal_set_input_threshold(value);
  // @@protoc_insertion_point(field_set:aixh.AIXLayer.input_threshold)
}

// optional float output_threshold = 14;
inline bool AIXLayer::_internal_has_output_threshold() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool AIXLayer::has_output_threshold() const {
  return _internal_has_output_threshold();
}
inline void AIXLayer::clear_output_threshold() {
  _impl_.output_threshold_ = 0;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline float AIXLayer::_internal_output_threshold() const {
  return _impl_.output_threshold_;
}
inline float AIXLayer::output_threshold() const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.output_threshold)
  return _internal_output_threshold();
}
inline void AIXLayer::_internal_set_output_threshold(float value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.output_threshold_ = value;
}
inline void AIXLayer::set_output_threshold(float value) {
  _internal_set_output_threshold(value);
  // @@protoc_insertion_point(field_set:aixh.AIXLayer.output_threshold)
}

// repeated float filter_threshold = 15;
inline int AIXLayer::_internal_filter_threshold_size() const {
  return _impl_.filter_threshold_.size();
}
inline int AIXLayer::filter_threshold_size() const {
  return _internal_filter_threshold_size();
}
inline void AIXLayer::clear_filter_threshold() {
  _impl_.filter_threshold_.Clear();
}
inline float AIXLayer::_internal_filter_threshold(int index) const {
  return _impl_.filter_threshold_.Get(index);
}
inline float AIXLayer::filter_threshold(int index) const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.filter_threshold)
  return _internal_filter_threshold(index);
}
inline void AIXLayer::set_filter_threshold(int index, float value) {
  _impl_.filter_threshold_.Set(index, value);
  // @@protoc_insertion_point(field_set:aixh.AIXLayer.filter_threshold)
}
inline void AIXLayer::_internal_add_filter_threshold(float value) {
  _impl_.filter_threshold_.Add(value);
}
inline void AIXLayer::add_filter_threshold(float value) {
  _internal_add_filter_threshold(value);
  // @@protoc_insertion_point(field_add:aixh.AIXLayer.filter_threshold)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
AIXLayer::_internal_filter_threshold() const {
  return _impl_.filter_threshold_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
AIXLayer::filter_threshold() const {
  // @@protoc_insertion_point(field_list:aixh.AIXLayer.filter_threshold)
  return _internal_filter_threshold();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
AIXLayer::_internal_mutable_filter_threshold() {
  return &_impl_.filter_threshold_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
AIXLayer::mutable_filter_threshold() {
  // @@protoc_insertion_point(field_mutable_list:aixh.AIXLayer.filter_threshold)
  return _internal_mutable_filter_threshold();
}

// required .aixh.AIXLayer.AIXConvolutionDesc convdesc = 20;
inline bool AIXLayer::_internal_has_convdesc() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.convdesc_ != nullptr);
  return value;
}
inline bool AIXLayer::has_convdesc() const {
  return _internal_has_convdesc();
}
inline void AIXLayer::clear_convdesc() {
  if (_impl_.convdesc_ != nullptr) _impl_.convdesc_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline const ::aixh::AIXLayer_AIXConvolutionDesc& AIXLayer::_internal_convdesc() const {
  const ::aixh::AIXLayer_AIXConvolutionDesc* p = _impl_.convdesc_;
  return p != nullptr ? *p : reinterpret_cast<const ::aixh::AIXLayer_AIXConvolutionDesc&>(
      ::aixh::_AIXLayer_AIXConvolutionDesc_default_instance_);
}
inline const ::aixh::AIXLayer_AIXConvolutionDesc& AIXLayer::convdesc() const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.convdesc)
  return _internal_convdesc();
}
inline void AIXLayer::unsafe_arena_set_allocated_convdesc(
    ::aixh::AIXLayer_AIXConvolutionDesc* convdesc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.convdesc_);
  }
  _impl_.convdesc_ = convdesc;
  if (convdesc) {
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aixh.AIXLayer.convdesc)
}
inline ::aixh::AIXLayer_AIXConvolutionDesc* AIXLayer::release_convdesc() {
  _impl_._has_bits_[0] &= ~0x00001000u;
  ::aixh::AIXLayer_AIXConvolutionDesc* temp = _impl_.convdesc_;
  _impl_.convdesc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aixh::AIXLayer_AIXConvolutionDesc* AIXLayer::unsafe_arena_release_convdesc() {
  // @@protoc_insertion_point(field_release:aixh.AIXLayer.convdesc)
  _impl_._has_bits_[0] &= ~0x00001000u;
  ::aixh::AIXLayer_AIXConvolutionDesc* temp = _impl_.convdesc_;
  _impl_.convdesc_ = nullptr;
  return temp;
}
inline ::aixh::AIXLayer_AIXConvolutionDesc* AIXLayer::_internal_mutable_convdesc() {
  _impl_._has_bits_[0] |= 0x00001000u;
  if (_impl_.convdesc_ == nullptr) {
    auto* p = CreateMaybeMessage<::aixh::AIXLayer_AIXConvolutionDesc>(GetArenaForAllocation());
    _impl_.convdesc_ = p;
  }
  return _impl_.convdesc_;
}
inline ::aixh::AIXLayer_AIXConvolutionDesc* AIXLayer::mutable_convdesc() {
  ::aixh::AIXLayer_AIXConvolutionDesc* _msg = _internal_mutable_convdesc();
  // @@protoc_insertion_point(field_mutable:aixh.AIXLayer.convdesc)
  return _msg;
}
inline void AIXLayer::set_allocated_convdesc(::aixh::AIXLayer_AIXConvolutionDesc* convdesc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.convdesc_;
  }
  if (convdesc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(convdesc);
    if (message_arena != submessage_arena) {
      convdesc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, convdesc, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  _impl_.convdesc_ = convdesc;
  // @@protoc_insertion_point(field_set_allocated:aixh.AIXLayer.convdesc)
}

// optional .aixh.AIXLayer.AIXSamplingDesc samplingdesc = 21;
inline bool AIXLayer::_internal_has_samplingdesc() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.samplingdesc_ != nullptr);
  return value;
}
inline bool AIXLayer::has_samplingdesc() const {
  return _internal_has_samplingdesc();
}
inline void AIXLayer::clear_samplingdesc() {
  if (_impl_.samplingdesc_ != nullptr) _impl_.samplingdesc_->Clear();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline const ::aixh::AIXLayer_AIXSamplingDesc& AIXLayer::_internal_samplingdesc() const {
  const ::aixh::AIXLayer_AIXSamplingDesc* p = _impl_.samplingdesc_;
  return p != nullptr ? *p : reinterpret_cast<const ::aixh::AIXLayer_AIXSamplingDesc&>(
      ::aixh::_AIXLayer_AIXSamplingDesc_default_instance_);
}
inline const ::aixh::AIXLayer_AIXSamplingDesc& AIXLayer::samplingdesc() const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.samplingdesc)
  return _internal_samplingdesc();
}
inline void AIXLayer::unsafe_arena_set_allocated_samplingdesc(
    ::aixh::AIXLayer_AIXSamplingDesc* samplingdesc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.samplingdesc_);
  }
  _impl_.samplingdesc_ = samplingdesc;
  if (samplingdesc) {
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aixh.AIXLayer.samplingdesc)
}
inline ::aixh::AIXLayer_AIXSamplingDesc* AIXLayer::release_samplingdesc() {
  _impl_._has_bits_[0] &= ~0x00002000u;
  ::aixh::AIXLayer_AIXSamplingDesc* temp = _impl_.samplingdesc_;
  _impl_.samplingdesc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aixh::AIXLayer_AIXSamplingDesc* AIXLayer::unsafe_arena_release_samplingdesc() {
  // @@protoc_insertion_point(field_release:aixh.AIXLayer.samplingdesc)
  _impl_._has_bits_[0] &= ~0x00002000u;
  ::aixh::AIXLayer_AIXSamplingDesc* temp = _impl_.samplingdesc_;
  _impl_.samplingdesc_ = nullptr;
  return temp;
}
inline ::aixh::AIXLayer_AIXSamplingDesc* AIXLayer::_internal_mutable_samplingdesc() {
  _impl_._has_bits_[0] |= 0x00002000u;
  if (_impl_.samplingdesc_ == nullptr) {
    auto* p = CreateMaybeMessage<::aixh::AIXLayer_AIXSamplingDesc>(GetArenaForAllocation());
    _impl_.samplingdesc_ = p;
  }
  return _impl_.samplingdesc_;
}
inline ::aixh::AIXLayer_AIXSamplingDesc* AIXLayer::mutable_samplingdesc() {
  ::aixh::AIXLayer_AIXSamplingDesc* _msg = _internal_mutable_samplingdesc();
  // @@protoc_insertion_point(field_mutable:aixh.AIXLayer.samplingdesc)
  return _msg;
}
inline void AIXLayer::set_allocated_samplingdesc(::aixh::AIXLayer_AIXSamplingDesc* samplingdesc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.samplingdesc_;
  }
  if (samplingdesc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(samplingdesc);
    if (message_arena != submessage_arena) {
      samplingdesc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, samplingdesc, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  _impl_.samplingdesc_ = samplingdesc;
  // @@protoc_insertion_point(field_set_allocated:aixh.AIXLayer.samplingdesc)
}

// optional .aixh.AIXLayer.AIXEWAddDesc ewadddesc = 22;
inline bool AIXLayer::_internal_has_ewadddesc() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ewadddesc_ != nullptr);
  return value;
}
inline bool AIXLayer::has_ewadddesc() const {
  return _internal_has_ewadddesc();
}
inline void AIXLayer::clear_ewadddesc() {
  if (_impl_.ewadddesc_ != nullptr) _impl_.ewadddesc_->Clear();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline const ::aixh::AIXLayer_AIXEWAddDesc& AIXLayer::_internal_ewadddesc() const {
  const ::aixh::AIXLayer_AIXEWAddDesc* p = _impl_.ewadddesc_;
  return p != nullptr ? *p : reinterpret_cast<const ::aixh::AIXLayer_AIXEWAddDesc&>(
      ::aixh::_AIXLayer_AIXEWAddDesc_default_instance_);
}
inline const ::aixh::AIXLayer_AIXEWAddDesc& AIXLayer::ewadddesc() const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.ewadddesc)
  return _internal_ewadddesc();
}
inline void AIXLayer::unsafe_arena_set_allocated_ewadddesc(
    ::aixh::AIXLayer_AIXEWAddDesc* ewadddesc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ewadddesc_);
  }
  _impl_.ewadddesc_ = ewadddesc;
  if (ewadddesc) {
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aixh.AIXLayer.ewadddesc)
}
inline ::aixh::AIXLayer_AIXEWAddDesc* AIXLayer::release_ewadddesc() {
  _impl_._has_bits_[0] &= ~0x00004000u;
  ::aixh::AIXLayer_AIXEWAddDesc* temp = _impl_.ewadddesc_;
  _impl_.ewadddesc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::aixh::AIXLayer_AIXEWAddDesc* AIXLayer::unsafe_arena_release_ewadddesc() {
  // @@protoc_insertion_point(field_release:aixh.AIXLayer.ewadddesc)
  _impl_._has_bits_[0] &= ~0x00004000u;
  ::aixh::AIXLayer_AIXEWAddDesc* temp = _impl_.ewadddesc_;
  _impl_.ewadddesc_ = nullptr;
  return temp;
}
inline ::aixh::AIXLayer_AIXEWAddDesc* AIXLayer::_internal_mutable_ewadddesc() {
  _impl_._has_bits_[0] |= 0x00004000u;
  if (_impl_.ewadddesc_ == nullptr) {
    auto* p = CreateMaybeMessage<::aixh::AIXLayer_AIXEWAddDesc>(GetArenaForAllocation());
    _impl_.ewadddesc_ = p;
  }
  return _impl_.ewadddesc_;
}
inline ::aixh::AIXLayer_AIXEWAddDesc* AIXLayer::mutable_ewadddesc() {
  ::aixh::AIXLayer_AIXEWAddDesc* _msg = _internal_mutable_ewadddesc();
  // @@protoc_insertion_point(field_mutable:aixh.AIXLayer.ewadddesc)
  return _msg;
}
inline void AIXLayer::set_allocated_ewadddesc(::aixh::AIXLayer_AIXEWAddDesc* ewadddesc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ewadddesc_;
  }
  if (ewadddesc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ewadddesc);
    if (message_arena != submessage_arena) {
      ewadddesc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ewadddesc, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  _impl_.ewadddesc_ = ewadddesc;
  // @@protoc_insertion_point(field_set_allocated:aixh.AIXLayer.ewadddesc)
}

// optional .aixh.AIXLayer.AIXActivationMode activation = 30;
inline bool AIXLayer::_internal_has_activation() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool AIXLayer::has_activation() const {
  return _internal_has_activation();
}
inline void AIXLayer::clear_activation() {
  _impl_.activation_ = 0;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline ::aixh::AIXLayer_AIXActivationMode AIXLayer::_internal_activation() const {
  return static_cast< ::aixh::AIXLayer_AIXActivationMode >(_impl_.activation_);
}
inline ::aixh::AIXLayer_AIXActivationMode AIXLayer::activation() const {
  // @@protoc_insertion_point(field_get:aixh.AIXLayer.activation)
  return _internal_activation();
}
inline void AIXLayer::_internal_set_activation(::aixh::AIXLayer_AIXActivationMode value) {
  assert(::aixh::AIXLayer_AIXActivationMode_IsValid(value));
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.activation_ = value;
}
inline void AIXLayer::set_activation(::aixh::AIXLayer_AIXActivationMode value) {
  _internal_set_activation(value);
  // @@protoc_insertion_point(field_set:aixh.AIXLayer.activation)
}

// -------------------------------------------------------------------

// AIXGraph

// repeated .aixh.AIXLayer layer = 1;
inline int AIXGraph::_internal_layer_size() const {
  return _impl_.layer_.size();
}
inline int AIXGraph::layer_size() const {
  return _internal_layer_size();
}
inline void AIXGraph::clear_layer() {
  _impl_.layer_.Clear();
}
inline ::aixh::AIXLayer* AIXGraph::mutable_layer(int index) {
  // @@protoc_insertion_point(field_mutable:aixh.AIXGraph.layer)
  return _impl_.layer_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aixh::AIXLayer >*
AIXGraph::mutable_layer() {
  // @@protoc_insertion_point(field_mutable_list:aixh.AIXGraph.layer)
  return &_impl_.layer_;
}
inline const ::aixh::AIXLayer& AIXGraph::_internal_layer(int index) const {
  return _impl_.layer_.Get(index);
}
inline const ::aixh::AIXLayer& AIXGraph::layer(int index) const {
  // @@protoc_insertion_point(field_get:aixh.AIXGraph.layer)
  return _internal_layer(index);
}
inline ::aixh::AIXLayer* AIXGraph::_internal_add_layer() {
  return _impl_.layer_.Add();
}
inline ::aixh::AIXLayer* AIXGraph::add_layer() {
  ::aixh::AIXLayer* _add = _internal_add_layer();
  // @@protoc_insertion_point(field_add:aixh.AIXGraph.layer)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aixh::AIXLayer >&
AIXGraph::layer() const {
  // @@protoc_insertion_point(field_list:aixh.AIXGraph.layer)
  return _impl_.layer_;
}

// repeated int32 input_layers = 2;
inline int AIXGraph::_internal_input_layers_size() const {
  return _impl_.input_layers_.size();
}
inline int AIXGraph::input_layers_size() const {
  return _internal_input_layers_size();
}
inline void AIXGraph::clear_input_layers() {
  _impl_.input_layers_.Clear();
}
inline int32_t AIXGraph::_internal_input_layers(int index) const {
  return _impl_.input_layers_.Get(index);
}
inline int32_t AIXGraph::input_layers(int index) const {
  // @@protoc_insertion_point(field_get:aixh.AIXGraph.input_layers)
  return _internal_input_layers(index);
}
inline void AIXGraph::set_input_layers(int index, int32_t value) {
  _impl_.input_layers_.Set(index, value);
  // @@protoc_insertion_point(field_set:aixh.AIXGraph.input_layers)
}
inline void AIXGraph::_internal_add_input_layers(int32_t value) {
  _impl_.input_layers_.Add(value);
}
inline void AIXGraph::add_input_layers(int32_t value) {
  _internal_add_input_layers(value);
  // @@protoc_insertion_point(field_add:aixh.AIXGraph.input_layers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
AIXGraph::_internal_input_layers() const {
  return _impl_.input_layers_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
AIXGraph::input_layers() const {
  // @@protoc_insertion_point(field_list:aixh.AIXGraph.input_layers)
  return _internal_input_layers();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
AIXGraph::_internal_mutable_input_layers() {
  return &_impl_.input_layers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
AIXGraph::mutable_input_layers() {
  // @@protoc_insertion_point(field_mutable_list:aixh.AIXGraph.input_layers)
  return _internal_mutable_input_layers();
}

// repeated int32 output_layers = 3;
inline int AIXGraph::_internal_output_layers_size() const {
  return _impl_.output_layers_.size();
}
inline int AIXGraph::output_layers_size() const {
  return _internal_output_layers_size();
}
inline void AIXGraph::clear_output_layers() {
  _impl_.output_layers_.Clear();
}
inline int32_t AIXGraph::_internal_output_layers(int index) const {
  return _impl_.output_layers_.Get(index);
}
inline int32_t AIXGraph::output_layers(int index) const {
  // @@protoc_insertion_point(field_get:aixh.AIXGraph.output_layers)
  return _internal_output_layers(index);
}
inline void AIXGraph::set_output_layers(int index, int32_t value) {
  _impl_.output_layers_.Set(index, value);
  // @@protoc_insertion_point(field_set:aixh.AIXGraph.output_layers)
}
inline void AIXGraph::_internal_add_output_layers(int32_t value) {
  _impl_.output_layers_.Add(value);
}
inline void AIXGraph::add_output_layers(int32_t value) {
  _internal_add_output_layers(value);
  // @@protoc_insertion_point(field_add:aixh.AIXGraph.output_layers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
AIXGraph::_internal_output_layers() const {
  return _impl_.output_layers_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
AIXGraph::output_layers() const {
  // @@protoc_insertion_point(field_list:aixh.AIXGraph.output_layers)
  return _internal_output_layers();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
AIXGraph::_internal_mutable_output_layers() {
  return &_impl_.output_layers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
AIXGraph::mutable_output_layers() {
  // @@protoc_insertion_point(field_mutable_list:aixh.AIXGraph.output_layers)
  return _internal_mutable_output_layers();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace aixh

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::aixh::AIXLayer_AIXLayerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::aixh::AIXLayer_AIXLayerType>() {
  return ::aixh::AIXLayer_AIXLayerType_descriptor();
}
template <> struct is_proto_enum< ::aixh::AIXLayer_AIXActivationMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::aixh::AIXLayer_AIXActivationMode>() {
  return ::aixh::AIXLayer_AIXActivationMode_descriptor();
}
template <> struct is_proto_enum< ::aixh::AIXLayer_AIXSamplingMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::aixh::AIXLayer_AIXSamplingMode>() {
  return ::aixh::AIXLayer_AIXSamplingMode_descriptor();
}
template <> struct is_proto_enum< ::aixh::AIXLayer_AIXDataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::aixh::AIXLayer_AIXDataType>() {
  return ::aixh::AIXLayer_AIXDataType_descriptor();
}
template <> struct is_proto_enum< ::aixh::AIXLayer_AIXTensorFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::aixh::AIXLayer_AIXTensorFormat>() {
  return ::aixh::AIXLayer_AIXTensorFormat_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_aixh_2eproto
