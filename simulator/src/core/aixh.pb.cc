// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aixh.proto

#include "aixh.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace aixh {
PROTOBUF_CONSTEXPR AIXLayer_AIXConvolutionDesc::AIXLayer_AIXConvolutionDesc(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.padding_)*/{}
  , /*decltype(_impl_.stride_)*/{}
  , /*decltype(_impl_.dilation_)*/{}
  , /*decltype(_impl_.dtype_)*/0
  , /*decltype(_impl_.groups_)*/0} {}
struct AIXLayer_AIXConvolutionDescDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AIXLayer_AIXConvolutionDescDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AIXLayer_AIXConvolutionDescDefaultTypeInternal() {}
  union {
    AIXLayer_AIXConvolutionDesc _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AIXLayer_AIXConvolutionDescDefaultTypeInternal _AIXLayer_AIXConvolutionDesc_default_instance_;
PROTOBUF_CONSTEXPR AIXLayer_AIXSamplingDesc::AIXLayer_AIXSamplingDesc(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.padding_)*/{}
  , /*decltype(_impl_.stride_)*/{}
  , /*decltype(_impl_.window_)*/{}
  , /*decltype(_impl_.mode_)*/0} {}
struct AIXLayer_AIXSamplingDescDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AIXLayer_AIXSamplingDescDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AIXLayer_AIXSamplingDescDefaultTypeInternal() {}
  union {
    AIXLayer_AIXSamplingDesc _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AIXLayer_AIXSamplingDescDefaultTypeInternal _AIXLayer_AIXSamplingDesc_default_instance_;
PROTOBUF_CONSTEXPR AIXLayer_AIXEWAddDesc::AIXLayer_AIXEWAddDesc(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.scale_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AIXLayer_AIXEWAddDescDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AIXLayer_AIXEWAddDescDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AIXLayer_AIXEWAddDescDefaultTypeInternal() {}
  union {
    AIXLayer_AIXEWAddDesc _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AIXLayer_AIXEWAddDescDefaultTypeInternal _AIXLayer_AIXEWAddDesc_default_instance_;
PROTOBUF_CONSTEXPR AIXLayer_AIXTensor::AIXLayer_AIXTensor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.dims_)*/{}
  , /*decltype(_impl_.fval_)*/{}
  , /*decltype(_impl_.bval_)*/{}
  , /*decltype(_impl_._bval_cached_byte_size_)*/{0}
  , /*decltype(_impl_.dtype_)*/0
  , /*decltype(_impl_.format_)*/0
  , /*decltype(_impl_.ptr_)*/int64_t{0}
  , /*decltype(_impl_.size_)*/0} {}
struct AIXLayer_AIXTensorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AIXLayer_AIXTensorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AIXLayer_AIXTensorDefaultTypeInternal() {}
  union {
    AIXLayer_AIXTensor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AIXLayer_AIXTensorDefaultTypeInternal _AIXLayer_AIXTensor_default_instance_;
PROTOBUF_CONSTEXPR AIXLayer::AIXLayer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.type_)*/{}
  , /*decltype(_impl_.preds_)*/{}
  , /*decltype(_impl_.succs_)*/{}
  , /*decltype(_impl_.filter_threshold_)*/{}
  , /*decltype(_impl_.axes_)*/{}
  , /*decltype(_impl_.scales_)*/{}
  , /*decltype(_impl_.dilations_)*/{}
  , /*decltype(_impl_.kernel_shape_)*/{}
  , /*decltype(_impl_.output_padding_)*/{}
  , /*decltype(_impl_.output_shape_)*/{}
  , /*decltype(_impl_.pads_)*/{}
  , /*decltype(_impl_.strides_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.coordinate_transformation_mode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nearest_mode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.auto_pad_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.input_)*/nullptr
  , /*decltype(_impl_.output_)*/nullptr
  , /*decltype(_impl_.filter_)*/nullptr
  , /*decltype(_impl_.bias_)*/nullptr
  , /*decltype(_impl_.scale_)*/nullptr
  , /*decltype(_impl_.mean_)*/nullptr
  , /*decltype(_impl_.variance_)*/nullptr
  , /*decltype(_impl_.convdesc_)*/nullptr
  , /*decltype(_impl_.samplingdesc_)*/nullptr
  , /*decltype(_impl_.ewadddesc_)*/nullptr
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.input_threshold_)*/0
  , /*decltype(_impl_.output_threshold_)*/0
  , /*decltype(_impl_.epsilon_)*/0
  , /*decltype(_impl_.alpha_)*/0
  , /*decltype(_impl_.gamma_)*/0
  , /*decltype(_impl_.axis_)*/0
  , /*decltype(_impl_.stash_type_)*/0
  , /*decltype(_impl_.transa_)*/int64_t{0}
  , /*decltype(_impl_.transb_)*/int64_t{0}
  , /*decltype(_impl_.beta_)*/0
  , /*decltype(_impl_.activation_)*/0
  , /*decltype(_impl_.keepdims_)*/int64_t{0}
  , /*decltype(_impl_.noop_with_empty_axes_)*/int64_t{0}
  , /*decltype(_impl_.select_last_index_)*/int64_t{0}
  , /*decltype(_impl_.extrapolation_value_)*/0
  , /*decltype(_impl_.cubic_coeff_a_)*/0
  , /*decltype(_impl_.exclude_outside_)*/int64_t{0}
  , /*decltype(_impl_.group_)*/int64_t{0}} {}
struct AIXLayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AIXLayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AIXLayerDefaultTypeInternal() {}
  union {
    AIXLayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AIXLayerDefaultTypeInternal _AIXLayer_default_instance_;
PROTOBUF_CONSTEXPR AIXGraph::AIXGraph(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.layer_)*/{}
  , /*decltype(_impl_.input_layers_)*/{}
  , /*decltype(_impl_.output_layers_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AIXGraphDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AIXGraphDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AIXGraphDefaultTypeInternal() {}
  union {
    AIXGraph _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AIXGraphDefaultTypeInternal _AIXGraph_default_instance_;
}  // namespace aixh
static ::_pb::Metadata file_level_metadata_aixh_2eproto[6];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_aixh_2eproto[5];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_aixh_2eproto = nullptr;

const uint32_t TableStruct_aixh_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer_AIXConvolutionDesc, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer_AIXConvolutionDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer_AIXConvolutionDesc, _impl_.dtype_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer_AIXConvolutionDesc, _impl_.padding_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer_AIXConvolutionDesc, _impl_.stride_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer_AIXConvolutionDesc, _impl_.dilation_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer_AIXConvolutionDesc, _impl_.groups_),
  0,
  ~0u,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer_AIXSamplingDesc, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer_AIXSamplingDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer_AIXSamplingDesc, _impl_.mode_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer_AIXSamplingDesc, _impl_.padding_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer_AIXSamplingDesc, _impl_.stride_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer_AIXSamplingDesc, _impl_.window_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer_AIXEWAddDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer_AIXEWAddDesc, _impl_.scale_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer_AIXTensor, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer_AIXTensor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer_AIXTensor, _impl_.dtype_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer_AIXTensor, _impl_.format_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer_AIXTensor, _impl_.dims_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer_AIXTensor, _impl_.fval_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer_AIXTensor, _impl_.bval_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer_AIXTensor, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer_AIXTensor, _impl_.ptr_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer, _impl_.preds_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer, _impl_.succs_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer, _impl_.input_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer, _impl_.output_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer, _impl_.filter_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer, _impl_.bias_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer, _impl_.scale_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer, _impl_.mean_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer, _impl_.variance_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer, _impl_.epsilon_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer, _impl_.alpha_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer, _impl_.gamma_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer, _impl_.axis_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer, _impl_.stash_type_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer, _impl_.beta_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer, _impl_.transa_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer, _impl_.transb_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer, _impl_.keepdims_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer, _impl_.noop_with_empty_axes_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer, _impl_.select_last_index_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer, _impl_.axes_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer, _impl_.mode_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer, _impl_.scales_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer, _impl_.extrapolation_value_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer, _impl_.coordinate_transformation_mode_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer, _impl_.nearest_mode_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer, _impl_.cubic_coeff_a_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer, _impl_.exclude_outside_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer, _impl_.auto_pad_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer, _impl_.dilations_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer, _impl_.group_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer, _impl_.kernel_shape_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer, _impl_.output_padding_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer, _impl_.output_shape_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer, _impl_.pads_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer, _impl_.strides_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer, _impl_.input_threshold_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer, _impl_.output_threshold_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer, _impl_.filter_threshold_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer, _impl_.convdesc_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer, _impl_.samplingdesc_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer, _impl_.ewadddesc_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXLayer, _impl_.activation_),
  15,
  0,
  ~0u,
  ~0u,
  ~0u,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  18,
  19,
  20,
  21,
  22,
  25,
  23,
  24,
  27,
  28,
  29,
  ~0u,
  1,
  ~0u,
  30,
  2,
  3,
  31,
  32,
  4,
  ~0u,
  33,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  16,
  17,
  ~0u,
  12,
  13,
  14,
  26,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aixh::AIXGraph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aixh::AIXGraph, _impl_.layer_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXGraph, _impl_.input_layers_),
  PROTOBUF_FIELD_OFFSET(::aixh::AIXGraph, _impl_.output_layers_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::aixh::AIXLayer_AIXConvolutionDesc)},
  { 16, 26, -1, sizeof(::aixh::AIXLayer_AIXSamplingDesc)},
  { 30, -1, -1, sizeof(::aixh::AIXLayer_AIXEWAddDesc)},
  { 37, 50, -1, sizeof(::aixh::AIXLayer_AIXTensor)},
  { 57, 109, -1, sizeof(::aixh::AIXLayer)},
  { 155, -1, -1, sizeof(::aixh::AIXGraph)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::aixh::_AIXLayer_AIXConvolutionDesc_default_instance_._instance,
  &::aixh::_AIXLayer_AIXSamplingDesc_default_instance_._instance,
  &::aixh::_AIXLayer_AIXEWAddDesc_default_instance_._instance,
  &::aixh::_AIXLayer_AIXTensor_default_instance_._instance,
  &::aixh::_AIXLayer_default_instance_._instance,
  &::aixh::_AIXGraph_default_instance_._instance,
};

const char descriptor_table_protodef_aixh_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\naixh.proto\022\004aixh\"\360\026\n\010AIXLayer\022\n\n\002id\030\001 "
  "\002(\005\022\014\n\004name\030\002 \001(\t\022)\n\004type\030\003 \003(\0162\033.aixh.A"
  "IXLayer.AIXLayerType\022\r\n\005preds\030\004 \003(\005\022\r\n\005s"
  "uccs\030\005 \003(\005\022\'\n\005input\030\006 \001(\0132\030.aixh.AIXLaye"
  "r.AIXTensor\022(\n\006output\030\007 \001(\0132\030.aixh.AIXLa"
  "yer.AIXTensor\022(\n\006filter\030\010 \001(\0132\030.aixh.AIX"
  "Layer.AIXTensor\022&\n\004bias\030\t \001(\0132\030.aixh.AIX"
  "Layer.AIXTensor\022\'\n\005scale\030\n \001(\0132\030.aixh.AI"
  "XLayer.AIXTensor\022&\n\004mean\030\013 \001(\0132\030.aixh.AI"
  "XLayer.AIXTensor\022*\n\010variance\030\014 \001(\0132\030.aix"
  "h.AIXLayer.AIXTensor\022\017\n\007epsilon\030\020 \001(\002\022\r\n"
  "\005alpha\030\021 \001(\002\022\r\n\005gamma\030\022 \001(\002\022\014\n\004axis\030\027 \001("
  "\005\022\022\n\nstash_type\030\030 \001(\005\022\014\n\004beta\030\031 \001(\002\022\016\n\006t"
  "ransA\030\032 \001(\003\022\016\n\006transB\030\033 \001(\003\022\020\n\010keepdims\030"
  "\034 \001(\003\022\034\n\024noop_with_empty_axes\030\035 \001(\003\022\031\n\021s"
  "elect_last_index\030\037 \001(\003\022\014\n\004axes\030  \003(\003\022\014\n\004"
  "mode\030! \001(\t\022\016\n\006scales\030\" \003(\002\022\033\n\023extrapolat"
  "ion_value\030# \001(\002\022&\n\036coordinate_transforma"
  "tion_mode\030$ \001(\t\022\024\n\014nearest_mode\030% \001(\t\022\025\n"
  "\rcubic_coeff_a\030& \001(\002\022\027\n\017exclude_outside\030"
  "\' \001(\003\022\020\n\010auto_pad\030( \001(\t\022\021\n\tdilations\030) \003"
  "(\003\022\r\n\005group\030* \001(\003\022\024\n\014kernel_shape\030+ \003(\003\022"
  "\026\n\016output_padding\030, \003(\003\022\024\n\014output_shape\030"
  "- \003(\003\022\014\n\004pads\030. \003(\003\022\017\n\007strides\030/ \003(\003\022\027\n\017"
  "input_threshold\030\r \001(\002\022\030\n\020output_threshol"
  "d\030\016 \001(\002\022\030\n\020filter_threshold\030\017 \003(\002\0223\n\010con"
  "vdesc\030\024 \002(\0132!.aixh.AIXLayer.AIXConvoluti"
  "onDesc\0224\n\014samplingdesc\030\025 \001(\0132\036.aixh.AIXL"
  "ayer.AIXSamplingDesc\022.\n\tewadddesc\030\026 \001(\0132"
  "\033.aixh.AIXLayer.AIXEWAddDesc\0224\n\nactivati"
  "on\030\036 \001(\0162 .aixh.AIXLayer.AIXActivationMo"
  "de\032\202\001\n\022AIXConvolutionDesc\022)\n\005dtype\030\001 \002(\016"
  "2\032.aixh.AIXLayer.AIXDataType\022\017\n\007padding\030"
  "\002 \003(\005\022\016\n\006stride\030\003 \003(\005\022\020\n\010dilation\030\004 \003(\005\022"
  "\016\n\006groups\030\005 \002(\005\032p\n\017AIXSamplingDesc\022,\n\004mo"
  "de\030\001 \002(\0162\036.aixh.AIXLayer.AIXSamplingMode"
  "\022\017\n\007padding\030\002 \003(\005\022\016\n\006stride\030\003 \003(\005\022\016\n\006win"
  "dow\030\004 \003(\005\032\035\n\014AIXEWAddDesc\022\r\n\005scale\030\001 \003(\002"
  "\032\257\001\n\tAIXTensor\022)\n\005dtype\030\001 \002(\0162\032.aixh.AIX"
  "Layer.AIXDataType\022.\n\006format\030\002 \002(\0162\036.aixh"
  ".AIXLayer.AIXTensorFormat\022\014\n\004dims\030\003 \003(\005\022"
  "\014\n\004fval\030\004 \003(\002\022\020\n\004bval\030\005 \003(\005B\002\020\001\022\014\n\004size\030"
  "\006 \001(\005\022\013\n\003ptr\030\007 \001(\003\"\274\004\n\014AIXLayerType\022\031\n\025A"
  "IX_LAYER_CONVOLUTION\020\000\022\027\n\023AIX_LAYER_CONN"
  "ECTED\020\001\022\025\n\021AIX_LAYER_MAXPOOL\020\002\022\025\n\021AIX_LA"
  "YER_AVGPOOL\020\003\022\023\n\017AIX_LAYER_ROUTE\020\006\022\023\n\017AI"
  "X_LAYER_REORG\020\007\022\023\n\017AIX_LAYER_EWADD\020\010\022\026\n\022"
  "AIX_LAYER_UPSAMPLE\020\t\022\032\n\026AIX_LAYER_PIXELS"
  "HUFFLE\020\n\022\030\n\024AIX_LAYER_GROUP_CONV\020\013\022\027\n\023AI"
  "X_LAYER_SKIP_CONV\020\014\022\030\n\024AIX_LAYER_ACTIVAT"
  "ION\020\r\022\027\n\023AIX_LAYER_BATCHNORM\020\016\022\025\n\021AIX_LA"
  "YER_BIASADD\020\017\022\024\n\020AIX_LAYER_OUTPUT\020\020\022\023\n\017A"
  "IX_LAYER_INPUT\020\021\022\026\n\022AIX_LAYER_WILDCARD\020\022"
  "\022\021\n\rAIX_LAYER_ADD\020\023\022\021\n\rAIX_LAYER_MUL\020\024\022\021"
  "\n\rAIX_LAYER_SUB\020\025\022\021\n\rAIX_LAYER_SUM\020\026\022\033\n\027"
  "AIX_LAYER_INSTANCE_NORM\020\027\022\024\n\020AIX_LAYER_M"
  "ATMUL\020\030\022\030\n\024AIX_LAYER_LAYER_NORM\020\031\"\236\002\n\021AI"
  "XActivationMode\022\032\n\026AIX_ACTIVATION_SIGMOI"
  "D\020\000\022\027\n\023AIX_ACTIVATION_RELU\020\001\022\035\n\031AIX_ACTI"
  "VATION_LEAKY_RELU\020\002\022\030\n\024AIX_ACTIVATION_PR"
  "ELU\020\003\022\027\n\023AIX_ACTIVATION_TANH\020\004\022\033\n\027AIX_AC"
  "TIVATION_IDENTITY\020\005\022\027\n\023AIX_ACTIVATION_MI"
  "SH\020\006\022\027\n\023AIX_ACTIVATION_CELU\020\007\022\027\n\023AIX_ACT"
  "IVATION_SELU\020\010\022\032\n\026AIX_ACTIVATION_SOFTMAX"
  "\020\t\"\216\001\n\017AIXSamplingMode\022\023\n\017AIX_POOLING_MA"
  "X\020\000\022\027\n\023AIX_POOLING_AVERAGE\020\001\022\025\n\021AIX_POOL"
  "ING_REORG\020\002\022\030\n\024AIX_POOLING_UPSAMPLE\020\003\022\034\n"
  "\030AIX_POOLING_PIXELSHUFFLE\020\004\"\206\001\n\013AIXDataT"
  "ype\022\022\n\016AIX_DATA_FLOAT\020\000\022\023\n\017AIX_DATA_DOUB"
  "LE\020\001\022\021\n\rAIX_DATA_HALF\020\002\022\022\n\016AIX_DATA_UINT"
  "8\020\003\022\022\n\016AIX_DATA_SINT8\020\004\022\023\n\017AIX_DATA_SINT"
  "16\020\005\"g\n\017AIXTensorFormat\022\023\n\017AIX_FORMAT_NC"
  "HW\020\000\022\023\n\017AIX_FORMAT_NHWC\020\001\022\023\n\017AIX_FORMAT_"
  "NWHC\020\002\022\025\n\021AIX_FORMAT_VECTOR\020\003\"V\n\010AIXGrap"
  "h\022\035\n\005layer\030\001 \003(\0132\016.aixh.AIXLayer\022\024\n\014inpu"
  "t_layers\030\002 \003(\005\022\025\n\routput_layers\030\003 \003(\005"
  ;
static ::_pbi::once_flag descriptor_table_aixh_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_aixh_2eproto = {
    false, false, 3037, descriptor_table_protodef_aixh_2eproto,
    "aixh.proto",
    &descriptor_table_aixh_2eproto_once, nullptr, 0, 6,
    schemas, file_default_instances, TableStruct_aixh_2eproto::offsets,
    file_level_metadata_aixh_2eproto, file_level_enum_descriptors_aixh_2eproto,
    file_level_service_descriptors_aixh_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_aixh_2eproto_getter() {
  return &descriptor_table_aixh_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_aixh_2eproto(&descriptor_table_aixh_2eproto);
namespace aixh {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AIXLayer_AIXLayerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_aixh_2eproto);
  return file_level_enum_descriptors_aixh_2eproto[0];
}
bool AIXLayer_AIXLayerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr AIXLayer_AIXLayerType AIXLayer::AIX_LAYER_CONVOLUTION;
constexpr AIXLayer_AIXLayerType AIXLayer::AIX_LAYER_CONNECTED;
constexpr AIXLayer_AIXLayerType AIXLayer::AIX_LAYER_MAXPOOL;
constexpr AIXLayer_AIXLayerType AIXLayer::AIX_LAYER_AVGPOOL;
constexpr AIXLayer_AIXLayerType AIXLayer::AIX_LAYER_ROUTE;
constexpr AIXLayer_AIXLayerType AIXLayer::AIX_LAYER_REORG;
constexpr AIXLayer_AIXLayerType AIXLayer::AIX_LAYER_EWADD;
constexpr AIXLayer_AIXLayerType AIXLayer::AIX_LAYER_UPSAMPLE;
constexpr AIXLayer_AIXLayerType AIXLayer::AIX_LAYER_PIXELSHUFFLE;
constexpr AIXLayer_AIXLayerType AIXLayer::AIX_LAYER_GROUP_CONV;
constexpr AIXLayer_AIXLayerType AIXLayer::AIX_LAYER_SKIP_CONV;
constexpr AIXLayer_AIXLayerType AIXLayer::AIX_LAYER_ACTIVATION;
constexpr AIXLayer_AIXLayerType AIXLayer::AIX_LAYER_BATCHNORM;
constexpr AIXLayer_AIXLayerType AIXLayer::AIX_LAYER_BIASADD;
constexpr AIXLayer_AIXLayerType AIXLayer::AIX_LAYER_OUTPUT;
constexpr AIXLayer_AIXLayerType AIXLayer::AIX_LAYER_INPUT;
constexpr AIXLayer_AIXLayerType AIXLayer::AIX_LAYER_WILDCARD;
constexpr AIXLayer_AIXLayerType AIXLayer::AIX_LAYER_ADD;
constexpr AIXLayer_AIXLayerType AIXLayer::AIX_LAYER_MUL;
constexpr AIXLayer_AIXLayerType AIXLayer::AIX_LAYER_SUB;
constexpr AIXLayer_AIXLayerType AIXLayer::AIX_LAYER_SUM;
constexpr AIXLayer_AIXLayerType AIXLayer::AIX_LAYER_INSTANCE_NORM;
constexpr AIXLayer_AIXLayerType AIXLayer::AIX_LAYER_MATMUL;
constexpr AIXLayer_AIXLayerType AIXLayer::AIX_LAYER_LAYER_NORM;
constexpr AIXLayer_AIXLayerType AIXLayer::AIXLayerType_MIN;
constexpr AIXLayer_AIXLayerType AIXLayer::AIXLayerType_MAX;
constexpr int AIXLayer::AIXLayerType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AIXLayer_AIXActivationMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_aixh_2eproto);
  return file_level_enum_descriptors_aixh_2eproto[1];
}
bool AIXLayer_AIXActivationMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr AIXLayer_AIXActivationMode AIXLayer::AIX_ACTIVATION_SIGMOID;
constexpr AIXLayer_AIXActivationMode AIXLayer::AIX_ACTIVATION_RELU;
constexpr AIXLayer_AIXActivationMode AIXLayer::AIX_ACTIVATION_LEAKY_RELU;
constexpr AIXLayer_AIXActivationMode AIXLayer::AIX_ACTIVATION_PRELU;
constexpr AIXLayer_AIXActivationMode AIXLayer::AIX_ACTIVATION_TANH;
constexpr AIXLayer_AIXActivationMode AIXLayer::AIX_ACTIVATION_IDENTITY;
constexpr AIXLayer_AIXActivationMode AIXLayer::AIX_ACTIVATION_MISH;
constexpr AIXLayer_AIXActivationMode AIXLayer::AIX_ACTIVATION_CELU;
constexpr AIXLayer_AIXActivationMode AIXLayer::AIX_ACTIVATION_SELU;
constexpr AIXLayer_AIXActivationMode AIXLayer::AIX_ACTIVATION_SOFTMAX;
constexpr AIXLayer_AIXActivationMode AIXLayer::AIXActivationMode_MIN;
constexpr AIXLayer_AIXActivationMode AIXLayer::AIXActivationMode_MAX;
constexpr int AIXLayer::AIXActivationMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AIXLayer_AIXSamplingMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_aixh_2eproto);
  return file_level_enum_descriptors_aixh_2eproto[2];
}
bool AIXLayer_AIXSamplingMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr AIXLayer_AIXSamplingMode AIXLayer::AIX_POOLING_MAX;
constexpr AIXLayer_AIXSamplingMode AIXLayer::AIX_POOLING_AVERAGE;
constexpr AIXLayer_AIXSamplingMode AIXLayer::AIX_POOLING_REORG;
constexpr AIXLayer_AIXSamplingMode AIXLayer::AIX_POOLING_UPSAMPLE;
constexpr AIXLayer_AIXSamplingMode AIXLayer::AIX_POOLING_PIXELSHUFFLE;
constexpr AIXLayer_AIXSamplingMode AIXLayer::AIXSamplingMode_MIN;
constexpr AIXLayer_AIXSamplingMode AIXLayer::AIXSamplingMode_MAX;
constexpr int AIXLayer::AIXSamplingMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AIXLayer_AIXDataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_aixh_2eproto);
  return file_level_enum_descriptors_aixh_2eproto[3];
}
bool AIXLayer_AIXDataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr AIXLayer_AIXDataType AIXLayer::AIX_DATA_FLOAT;
constexpr AIXLayer_AIXDataType AIXLayer::AIX_DATA_DOUBLE;
constexpr AIXLayer_AIXDataType AIXLayer::AIX_DATA_HALF;
constexpr AIXLayer_AIXDataType AIXLayer::AIX_DATA_UINT8;
constexpr AIXLayer_AIXDataType AIXLayer::AIX_DATA_SINT8;
constexpr AIXLayer_AIXDataType AIXLayer::AIX_DATA_SINT16;
constexpr AIXLayer_AIXDataType AIXLayer::AIXDataType_MIN;
constexpr AIXLayer_AIXDataType AIXLayer::AIXDataType_MAX;
constexpr int AIXLayer::AIXDataType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AIXLayer_AIXTensorFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_aixh_2eproto);
  return file_level_enum_descriptors_aixh_2eproto[4];
}
bool AIXLayer_AIXTensorFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr AIXLayer_AIXTensorFormat AIXLayer::AIX_FORMAT_NCHW;
constexpr AIXLayer_AIXTensorFormat AIXLayer::AIX_FORMAT_NHWC;
constexpr AIXLayer_AIXTensorFormat AIXLayer::AIX_FORMAT_NWHC;
constexpr AIXLayer_AIXTensorFormat AIXLayer::AIX_FORMAT_VECTOR;
constexpr AIXLayer_AIXTensorFormat AIXLayer::AIXTensorFormat_MIN;
constexpr AIXLayer_AIXTensorFormat AIXLayer::AIXTensorFormat_MAX;
constexpr int AIXLayer::AIXTensorFormat_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class AIXLayer_AIXConvolutionDesc::_Internal {
 public:
  using HasBits = decltype(std::declval<AIXLayer_AIXConvolutionDesc>()._impl_._has_bits_);
  static void set_has_dtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_groups(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

AIXLayer_AIXConvolutionDesc::AIXLayer_AIXConvolutionDesc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aixh.AIXLayer.AIXConvolutionDesc)
}
AIXLayer_AIXConvolutionDesc::AIXLayer_AIXConvolutionDesc(const AIXLayer_AIXConvolutionDesc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AIXLayer_AIXConvolutionDesc* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.padding_){from._impl_.padding_}
    , decltype(_impl_.stride_){from._impl_.stride_}
    , decltype(_impl_.dilation_){from._impl_.dilation_}
    , decltype(_impl_.dtype_){}
    , decltype(_impl_.groups_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.dtype_, &from._impl_.dtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.groups_) -
    reinterpret_cast<char*>(&_impl_.dtype_)) + sizeof(_impl_.groups_));
  // @@protoc_insertion_point(copy_constructor:aixh.AIXLayer.AIXConvolutionDesc)
}

inline void AIXLayer_AIXConvolutionDesc::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.padding_){arena}
    , decltype(_impl_.stride_){arena}
    , decltype(_impl_.dilation_){arena}
    , decltype(_impl_.dtype_){0}
    , decltype(_impl_.groups_){0}
  };
}

AIXLayer_AIXConvolutionDesc::~AIXLayer_AIXConvolutionDesc() {
  // @@protoc_insertion_point(destructor:aixh.AIXLayer.AIXConvolutionDesc)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AIXLayer_AIXConvolutionDesc::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.padding_.~RepeatedField();
  _impl_.stride_.~RepeatedField();
  _impl_.dilation_.~RepeatedField();
}

void AIXLayer_AIXConvolutionDesc::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AIXLayer_AIXConvolutionDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:aixh.AIXLayer.AIXConvolutionDesc)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.padding_.Clear();
  _impl_.stride_.Clear();
  _impl_.dilation_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.dtype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.groups_) -
        reinterpret_cast<char*>(&_impl_.dtype_)) + sizeof(_impl_.groups_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AIXLayer_AIXConvolutionDesc::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .aixh.AIXLayer.AIXDataType dtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::aixh::AIXLayer_AIXDataType_IsValid(val))) {
            _internal_set_dtype(static_cast<::aixh::AIXLayer_AIXDataType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated int32 padding = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_padding(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_padding(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 stride = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_stride(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_stride(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 dilation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_dilation(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_dilation(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 groups = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_groups(&has_bits);
          _impl_.groups_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AIXLayer_AIXConvolutionDesc::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aixh.AIXLayer.AIXConvolutionDesc)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .aixh.AIXLayer.AIXDataType dtype = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_dtype(), target);
  }

  // repeated int32 padding = 2;
  for (int i = 0, n = this->_internal_padding_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_padding(i), target);
  }

  // repeated int32 stride = 3;
  for (int i = 0, n = this->_internal_stride_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_stride(i), target);
  }

  // repeated int32 dilation = 4;
  for (int i = 0, n = this->_internal_dilation_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_dilation(i), target);
  }

  // required int32 groups = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_groups(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aixh.AIXLayer.AIXConvolutionDesc)
  return target;
}

size_t AIXLayer_AIXConvolutionDesc::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:aixh.AIXLayer.AIXConvolutionDesc)
  size_t total_size = 0;

  if (_internal_has_dtype()) {
    // required .aixh.AIXLayer.AIXDataType dtype = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_dtype());
  }

  if (_internal_has_groups()) {
    // required int32 groups = 5;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_groups());
  }

  return total_size;
}
size_t AIXLayer_AIXConvolutionDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aixh.AIXLayer.AIXConvolutionDesc)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .aixh.AIXLayer.AIXDataType dtype = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_dtype());

    // required int32 groups = 5;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_groups());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 padding = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.padding_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_padding_size());
    total_size += data_size;
  }

  // repeated int32 stride = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.stride_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_stride_size());
    total_size += data_size;
  }

  // repeated int32 dilation = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.dilation_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_dilation_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AIXLayer_AIXConvolutionDesc::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AIXLayer_AIXConvolutionDesc::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AIXLayer_AIXConvolutionDesc::GetClassData() const { return &_class_data_; }


void AIXLayer_AIXConvolutionDesc::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AIXLayer_AIXConvolutionDesc*>(&to_msg);
  auto& from = static_cast<const AIXLayer_AIXConvolutionDesc&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aixh.AIXLayer.AIXConvolutionDesc)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.padding_.MergeFrom(from._impl_.padding_);
  _this->_impl_.stride_.MergeFrom(from._impl_.stride_);
  _this->_impl_.dilation_.MergeFrom(from._impl_.dilation_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.dtype_ = from._impl_.dtype_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.groups_ = from._impl_.groups_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AIXLayer_AIXConvolutionDesc::CopyFrom(const AIXLayer_AIXConvolutionDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aixh.AIXLayer.AIXConvolutionDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AIXLayer_AIXConvolutionDesc::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void AIXLayer_AIXConvolutionDesc::InternalSwap(AIXLayer_AIXConvolutionDesc* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.padding_.InternalSwap(&other->_impl_.padding_);
  _impl_.stride_.InternalSwap(&other->_impl_.stride_);
  _impl_.dilation_.InternalSwap(&other->_impl_.dilation_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AIXLayer_AIXConvolutionDesc, _impl_.groups_)
      + sizeof(AIXLayer_AIXConvolutionDesc::_impl_.groups_)
      - PROTOBUF_FIELD_OFFSET(AIXLayer_AIXConvolutionDesc, _impl_.dtype_)>(
          reinterpret_cast<char*>(&_impl_.dtype_),
          reinterpret_cast<char*>(&other->_impl_.dtype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AIXLayer_AIXConvolutionDesc::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_aixh_2eproto_getter, &descriptor_table_aixh_2eproto_once,
      file_level_metadata_aixh_2eproto[0]);
}

// ===================================================================

class AIXLayer_AIXSamplingDesc::_Internal {
 public:
  using HasBits = decltype(std::declval<AIXLayer_AIXSamplingDesc>()._impl_._has_bits_);
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

AIXLayer_AIXSamplingDesc::AIXLayer_AIXSamplingDesc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aixh.AIXLayer.AIXSamplingDesc)
}
AIXLayer_AIXSamplingDesc::AIXLayer_AIXSamplingDesc(const AIXLayer_AIXSamplingDesc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AIXLayer_AIXSamplingDesc* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.padding_){from._impl_.padding_}
    , decltype(_impl_.stride_){from._impl_.stride_}
    , decltype(_impl_.window_){from._impl_.window_}
    , decltype(_impl_.mode_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.mode_ = from._impl_.mode_;
  // @@protoc_insertion_point(copy_constructor:aixh.AIXLayer.AIXSamplingDesc)
}

inline void AIXLayer_AIXSamplingDesc::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.padding_){arena}
    , decltype(_impl_.stride_){arena}
    , decltype(_impl_.window_){arena}
    , decltype(_impl_.mode_){0}
  };
}

AIXLayer_AIXSamplingDesc::~AIXLayer_AIXSamplingDesc() {
  // @@protoc_insertion_point(destructor:aixh.AIXLayer.AIXSamplingDesc)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AIXLayer_AIXSamplingDesc::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.padding_.~RepeatedField();
  _impl_.stride_.~RepeatedField();
  _impl_.window_.~RepeatedField();
}

void AIXLayer_AIXSamplingDesc::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AIXLayer_AIXSamplingDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:aixh.AIXLayer.AIXSamplingDesc)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.padding_.Clear();
  _impl_.stride_.Clear();
  _impl_.window_.Clear();
  _impl_.mode_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AIXLayer_AIXSamplingDesc::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .aixh.AIXLayer.AIXSamplingMode mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::aixh::AIXLayer_AIXSamplingMode_IsValid(val))) {
            _internal_set_mode(static_cast<::aixh::AIXLayer_AIXSamplingMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated int32 padding = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_padding(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_padding(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 stride = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_stride(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_stride(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 window = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_window(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_window(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AIXLayer_AIXSamplingDesc::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aixh.AIXLayer.AIXSamplingDesc)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .aixh.AIXLayer.AIXSamplingMode mode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_mode(), target);
  }

  // repeated int32 padding = 2;
  for (int i = 0, n = this->_internal_padding_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_padding(i), target);
  }

  // repeated int32 stride = 3;
  for (int i = 0, n = this->_internal_stride_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_stride(i), target);
  }

  // repeated int32 window = 4;
  for (int i = 0, n = this->_internal_window_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_window(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aixh.AIXLayer.AIXSamplingDesc)
  return target;
}

size_t AIXLayer_AIXSamplingDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aixh.AIXLayer.AIXSamplingDesc)
  size_t total_size = 0;

  // required .aixh.AIXLayer.AIXSamplingMode mode = 1;
  if (_internal_has_mode()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_mode());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 padding = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.padding_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_padding_size());
    total_size += data_size;
  }

  // repeated int32 stride = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.stride_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_stride_size());
    total_size += data_size;
  }

  // repeated int32 window = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.window_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_window_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AIXLayer_AIXSamplingDesc::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AIXLayer_AIXSamplingDesc::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AIXLayer_AIXSamplingDesc::GetClassData() const { return &_class_data_; }


void AIXLayer_AIXSamplingDesc::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AIXLayer_AIXSamplingDesc*>(&to_msg);
  auto& from = static_cast<const AIXLayer_AIXSamplingDesc&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aixh.AIXLayer.AIXSamplingDesc)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.padding_.MergeFrom(from._impl_.padding_);
  _this->_impl_.stride_.MergeFrom(from._impl_.stride_);
  _this->_impl_.window_.MergeFrom(from._impl_.window_);
  if (from._internal_has_mode()) {
    _this->_internal_set_mode(from._internal_mode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AIXLayer_AIXSamplingDesc::CopyFrom(const AIXLayer_AIXSamplingDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aixh.AIXLayer.AIXSamplingDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AIXLayer_AIXSamplingDesc::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void AIXLayer_AIXSamplingDesc::InternalSwap(AIXLayer_AIXSamplingDesc* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.padding_.InternalSwap(&other->_impl_.padding_);
  _impl_.stride_.InternalSwap(&other->_impl_.stride_);
  _impl_.window_.InternalSwap(&other->_impl_.window_);
  swap(_impl_.mode_, other->_impl_.mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AIXLayer_AIXSamplingDesc::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_aixh_2eproto_getter, &descriptor_table_aixh_2eproto_once,
      file_level_metadata_aixh_2eproto[1]);
}

// ===================================================================

class AIXLayer_AIXEWAddDesc::_Internal {
 public:
};

AIXLayer_AIXEWAddDesc::AIXLayer_AIXEWAddDesc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aixh.AIXLayer.AIXEWAddDesc)
}
AIXLayer_AIXEWAddDesc::AIXLayer_AIXEWAddDesc(const AIXLayer_AIXEWAddDesc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AIXLayer_AIXEWAddDesc* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.scale_){from._impl_.scale_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aixh.AIXLayer.AIXEWAddDesc)
}

inline void AIXLayer_AIXEWAddDesc::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.scale_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AIXLayer_AIXEWAddDesc::~AIXLayer_AIXEWAddDesc() {
  // @@protoc_insertion_point(destructor:aixh.AIXLayer.AIXEWAddDesc)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AIXLayer_AIXEWAddDesc::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.scale_.~RepeatedField();
}

void AIXLayer_AIXEWAddDesc::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AIXLayer_AIXEWAddDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:aixh.AIXLayer.AIXEWAddDesc)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.scale_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AIXLayer_AIXEWAddDesc::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float scale = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_scale(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<13>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_scale(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AIXLayer_AIXEWAddDesc::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aixh.AIXLayer.AIXEWAddDesc)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float scale = 1;
  for (int i = 0, n = this->_internal_scale_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_scale(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aixh.AIXLayer.AIXEWAddDesc)
  return target;
}

size_t AIXLayer_AIXEWAddDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aixh.AIXLayer.AIXEWAddDesc)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float scale = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_scale_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_scale_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AIXLayer_AIXEWAddDesc::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AIXLayer_AIXEWAddDesc::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AIXLayer_AIXEWAddDesc::GetClassData() const { return &_class_data_; }


void AIXLayer_AIXEWAddDesc::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AIXLayer_AIXEWAddDesc*>(&to_msg);
  auto& from = static_cast<const AIXLayer_AIXEWAddDesc&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aixh.AIXLayer.AIXEWAddDesc)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.scale_.MergeFrom(from._impl_.scale_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AIXLayer_AIXEWAddDesc::CopyFrom(const AIXLayer_AIXEWAddDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aixh.AIXLayer.AIXEWAddDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AIXLayer_AIXEWAddDesc::IsInitialized() const {
  return true;
}

void AIXLayer_AIXEWAddDesc::InternalSwap(AIXLayer_AIXEWAddDesc* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.scale_.InternalSwap(&other->_impl_.scale_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AIXLayer_AIXEWAddDesc::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_aixh_2eproto_getter, &descriptor_table_aixh_2eproto_once,
      file_level_metadata_aixh_2eproto[2]);
}

// ===================================================================

class AIXLayer_AIXTensor::_Internal {
 public:
  using HasBits = decltype(std::declval<AIXLayer_AIXTensor>()._impl_._has_bits_);
  static void set_has_dtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_format(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ptr(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

AIXLayer_AIXTensor::AIXLayer_AIXTensor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aixh.AIXLayer.AIXTensor)
}
AIXLayer_AIXTensor::AIXLayer_AIXTensor(const AIXLayer_AIXTensor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AIXLayer_AIXTensor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dims_){from._impl_.dims_}
    , decltype(_impl_.fval_){from._impl_.fval_}
    , decltype(_impl_.bval_){from._impl_.bval_}
    , /*decltype(_impl_._bval_cached_byte_size_)*/{0}
    , decltype(_impl_.dtype_){}
    , decltype(_impl_.format_){}
    , decltype(_impl_.ptr_){}
    , decltype(_impl_.size_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.dtype_, &from._impl_.dtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.size_) -
    reinterpret_cast<char*>(&_impl_.dtype_)) + sizeof(_impl_.size_));
  // @@protoc_insertion_point(copy_constructor:aixh.AIXLayer.AIXTensor)
}

inline void AIXLayer_AIXTensor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dims_){arena}
    , decltype(_impl_.fval_){arena}
    , decltype(_impl_.bval_){arena}
    , /*decltype(_impl_._bval_cached_byte_size_)*/{0}
    , decltype(_impl_.dtype_){0}
    , decltype(_impl_.format_){0}
    , decltype(_impl_.ptr_){int64_t{0}}
    , decltype(_impl_.size_){0}
  };
}

AIXLayer_AIXTensor::~AIXLayer_AIXTensor() {
  // @@protoc_insertion_point(destructor:aixh.AIXLayer.AIXTensor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AIXLayer_AIXTensor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dims_.~RepeatedField();
  _impl_.fval_.~RepeatedField();
  _impl_.bval_.~RepeatedField();
}

void AIXLayer_AIXTensor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AIXLayer_AIXTensor::Clear() {
// @@protoc_insertion_point(message_clear_start:aixh.AIXLayer.AIXTensor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dims_.Clear();
  _impl_.fval_.Clear();
  _impl_.bval_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.dtype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.size_) -
        reinterpret_cast<char*>(&_impl_.dtype_)) + sizeof(_impl_.size_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AIXLayer_AIXTensor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .aixh.AIXLayer.AIXDataType dtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::aixh::AIXLayer_AIXDataType_IsValid(val))) {
            _internal_set_dtype(static_cast<::aixh::AIXLayer_AIXDataType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required .aixh.AIXLayer.AIXTensorFormat format = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::aixh::AIXLayer_AIXTensorFormat_IsValid(val))) {
            _internal_set_format(static_cast<::aixh::AIXLayer_AIXTensorFormat>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated int32 dims = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_dims(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_dims(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float fval = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_fval(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<37>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_fval(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 bval = 5 [packed = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_bval(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_bval(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_size(&has_bits);
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 ptr = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_ptr(&has_bits);
          _impl_.ptr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AIXLayer_AIXTensor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aixh.AIXLayer.AIXTensor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .aixh.AIXLayer.AIXDataType dtype = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_dtype(), target);
  }

  // required .aixh.AIXLayer.AIXTensorFormat format = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_format(), target);
  }

  // repeated int32 dims = 3;
  for (int i = 0, n = this->_internal_dims_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_dims(i), target);
  }

  // repeated float fval = 4;
  for (int i = 0, n = this->_internal_fval_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_fval(i), target);
  }

  // repeated int32 bval = 5 [packed = true];
  {
    int byte_size = _impl_._bval_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_bval(), byte_size, target);
    }
  }

  // optional int32 size = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_size(), target);
  }

  // optional int64 ptr = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_ptr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aixh.AIXLayer.AIXTensor)
  return target;
}

size_t AIXLayer_AIXTensor::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:aixh.AIXLayer.AIXTensor)
  size_t total_size = 0;

  if (_internal_has_dtype()) {
    // required .aixh.AIXLayer.AIXDataType dtype = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_dtype());
  }

  if (_internal_has_format()) {
    // required .aixh.AIXLayer.AIXTensorFormat format = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_format());
  }

  return total_size;
}
size_t AIXLayer_AIXTensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aixh.AIXLayer.AIXTensor)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .aixh.AIXLayer.AIXDataType dtype = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_dtype());

    // required .aixh.AIXLayer.AIXTensorFormat format = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_format());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 dims = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.dims_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_dims_size());
    total_size += data_size;
  }

  // repeated float fval = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_fval_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_fval_size());
    total_size += data_size;
  }

  // repeated int32 bval = 5 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.bval_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._bval_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional int64 ptr = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ptr());
    }

    // optional int32 size = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_size());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AIXLayer_AIXTensor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AIXLayer_AIXTensor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AIXLayer_AIXTensor::GetClassData() const { return &_class_data_; }


void AIXLayer_AIXTensor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AIXLayer_AIXTensor*>(&to_msg);
  auto& from = static_cast<const AIXLayer_AIXTensor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aixh.AIXLayer.AIXTensor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.dims_.MergeFrom(from._impl_.dims_);
  _this->_impl_.fval_.MergeFrom(from._impl_.fval_);
  _this->_impl_.bval_.MergeFrom(from._impl_.bval_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.dtype_ = from._impl_.dtype_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.format_ = from._impl_.format_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.ptr_ = from._impl_.ptr_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.size_ = from._impl_.size_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AIXLayer_AIXTensor::CopyFrom(const AIXLayer_AIXTensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aixh.AIXLayer.AIXTensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AIXLayer_AIXTensor::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void AIXLayer_AIXTensor::InternalSwap(AIXLayer_AIXTensor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.dims_.InternalSwap(&other->_impl_.dims_);
  _impl_.fval_.InternalSwap(&other->_impl_.fval_);
  _impl_.bval_.InternalSwap(&other->_impl_.bval_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AIXLayer_AIXTensor, _impl_.size_)
      + sizeof(AIXLayer_AIXTensor::_impl_.size_)
      - PROTOBUF_FIELD_OFFSET(AIXLayer_AIXTensor, _impl_.dtype_)>(
          reinterpret_cast<char*>(&_impl_.dtype_),
          reinterpret_cast<char*>(&other->_impl_.dtype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AIXLayer_AIXTensor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_aixh_2eproto_getter, &descriptor_table_aixh_2eproto_once,
      file_level_metadata_aixh_2eproto[3]);
}

// ===================================================================

class AIXLayer::_Internal {
 public:
  using HasBits = decltype(std::declval<AIXLayer>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::aixh::AIXLayer_AIXTensor& input(const AIXLayer* msg);
  static void set_has_input(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::aixh::AIXLayer_AIXTensor& output(const AIXLayer* msg);
  static void set_has_output(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::aixh::AIXLayer_AIXTensor& filter(const AIXLayer* msg);
  static void set_has_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::aixh::AIXLayer_AIXTensor& bias(const AIXLayer* msg);
  static void set_has_bias(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::aixh::AIXLayer_AIXTensor& scale(const AIXLayer* msg);
  static void set_has_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::aixh::AIXLayer_AIXTensor& mean(const AIXLayer* msg);
  static void set_has_mean(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::aixh::AIXLayer_AIXTensor& variance(const AIXLayer* msg);
  static void set_has_variance(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_epsilon(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_alpha(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_gamma(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_axis(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_stash_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_beta(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_transa(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_transb(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_keepdims(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_noop_with_empty_axes(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_select_last_index(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_extrapolation_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_coordinate_transformation_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_nearest_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cubic_coeff_a(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_exclude_outside(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_auto_pad(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_group(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_input_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_output_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::aixh::AIXLayer_AIXConvolutionDesc& convdesc(const AIXLayer* msg);
  static void set_has_convdesc(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::aixh::AIXLayer_AIXSamplingDesc& samplingdesc(const AIXLayer* msg);
  static void set_has_samplingdesc(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::aixh::AIXLayer_AIXEWAddDesc& ewadddesc(const AIXLayer* msg);
  static void set_has_ewadddesc(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_activation(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00009000) ^ 0x00009000) != 0;
  }
};

const ::aixh::AIXLayer_AIXTensor&
AIXLayer::_Internal::input(const AIXLayer* msg) {
  return *msg->_impl_.input_;
}
const ::aixh::AIXLayer_AIXTensor&
AIXLayer::_Internal::output(const AIXLayer* msg) {
  return *msg->_impl_.output_;
}
const ::aixh::AIXLayer_AIXTensor&
AIXLayer::_Internal::filter(const AIXLayer* msg) {
  return *msg->_impl_.filter_;
}
const ::aixh::AIXLayer_AIXTensor&
AIXLayer::_Internal::bias(const AIXLayer* msg) {
  return *msg->_impl_.bias_;
}
const ::aixh::AIXLayer_AIXTensor&
AIXLayer::_Internal::scale(const AIXLayer* msg) {
  return *msg->_impl_.scale_;
}
const ::aixh::AIXLayer_AIXTensor&
AIXLayer::_Internal::mean(const AIXLayer* msg) {
  return *msg->_impl_.mean_;
}
const ::aixh::AIXLayer_AIXTensor&
AIXLayer::_Internal::variance(const AIXLayer* msg) {
  return *msg->_impl_.variance_;
}
const ::aixh::AIXLayer_AIXConvolutionDesc&
AIXLayer::_Internal::convdesc(const AIXLayer* msg) {
  return *msg->_impl_.convdesc_;
}
const ::aixh::AIXLayer_AIXSamplingDesc&
AIXLayer::_Internal::samplingdesc(const AIXLayer* msg) {
  return *msg->_impl_.samplingdesc_;
}
const ::aixh::AIXLayer_AIXEWAddDesc&
AIXLayer::_Internal::ewadddesc(const AIXLayer* msg) {
  return *msg->_impl_.ewadddesc_;
}
AIXLayer::AIXLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aixh.AIXLayer)
}
AIXLayer::AIXLayer(const AIXLayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AIXLayer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){from._impl_.type_}
    , decltype(_impl_.preds_){from._impl_.preds_}
    , decltype(_impl_.succs_){from._impl_.succs_}
    , decltype(_impl_.filter_threshold_){from._impl_.filter_threshold_}
    , decltype(_impl_.axes_){from._impl_.axes_}
    , decltype(_impl_.scales_){from._impl_.scales_}
    , decltype(_impl_.dilations_){from._impl_.dilations_}
    , decltype(_impl_.kernel_shape_){from._impl_.kernel_shape_}
    , decltype(_impl_.output_padding_){from._impl_.output_padding_}
    , decltype(_impl_.output_shape_){from._impl_.output_shape_}
    , decltype(_impl_.pads_){from._impl_.pads_}
    , decltype(_impl_.strides_){from._impl_.strides_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.mode_){}
    , decltype(_impl_.coordinate_transformation_mode_){}
    , decltype(_impl_.nearest_mode_){}
    , decltype(_impl_.auto_pad_){}
    , decltype(_impl_.input_){nullptr}
    , decltype(_impl_.output_){nullptr}
    , decltype(_impl_.filter_){nullptr}
    , decltype(_impl_.bias_){nullptr}
    , decltype(_impl_.scale_){nullptr}
    , decltype(_impl_.mean_){nullptr}
    , decltype(_impl_.variance_){nullptr}
    , decltype(_impl_.convdesc_){nullptr}
    , decltype(_impl_.samplingdesc_){nullptr}
    , decltype(_impl_.ewadddesc_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.input_threshold_){}
    , decltype(_impl_.output_threshold_){}
    , decltype(_impl_.epsilon_){}
    , decltype(_impl_.alpha_){}
    , decltype(_impl_.gamma_){}
    , decltype(_impl_.axis_){}
    , decltype(_impl_.stash_type_){}
    , decltype(_impl_.transa_){}
    , decltype(_impl_.transb_){}
    , decltype(_impl_.beta_){}
    , decltype(_impl_.activation_){}
    , decltype(_impl_.keepdims_){}
    , decltype(_impl_.noop_with_empty_axes_){}
    , decltype(_impl_.select_last_index_){}
    , decltype(_impl_.extrapolation_value_){}
    , decltype(_impl_.cubic_coeff_a_){}
    , decltype(_impl_.exclude_outside_){}
    , decltype(_impl_.group_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mode()) {
    _this->_impl_.mode_.Set(from._internal_mode(), 
      _this->GetArenaForAllocation());
  }
  _impl_.coordinate_transformation_mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.coordinate_transformation_mode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_coordinate_transformation_mode()) {
    _this->_impl_.coordinate_transformation_mode_.Set(from._internal_coordinate_transformation_mode(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nearest_mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nearest_mode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_nearest_mode()) {
    _this->_impl_.nearest_mode_.Set(from._internal_nearest_mode(), 
      _this->GetArenaForAllocation());
  }
  _impl_.auto_pad_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.auto_pad_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_auto_pad()) {
    _this->_impl_.auto_pad_.Set(from._internal_auto_pad(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_input()) {
    _this->_impl_.input_ = new ::aixh::AIXLayer_AIXTensor(*from._impl_.input_);
  }
  if (from._internal_has_output()) {
    _this->_impl_.output_ = new ::aixh::AIXLayer_AIXTensor(*from._impl_.output_);
  }
  if (from._internal_has_filter()) {
    _this->_impl_.filter_ = new ::aixh::AIXLayer_AIXTensor(*from._impl_.filter_);
  }
  if (from._internal_has_bias()) {
    _this->_impl_.bias_ = new ::aixh::AIXLayer_AIXTensor(*from._impl_.bias_);
  }
  if (from._internal_has_scale()) {
    _this->_impl_.scale_ = new ::aixh::AIXLayer_AIXTensor(*from._impl_.scale_);
  }
  if (from._internal_has_mean()) {
    _this->_impl_.mean_ = new ::aixh::AIXLayer_AIXTensor(*from._impl_.mean_);
  }
  if (from._internal_has_variance()) {
    _this->_impl_.variance_ = new ::aixh::AIXLayer_AIXTensor(*from._impl_.variance_);
  }
  if (from._internal_has_convdesc()) {
    _this->_impl_.convdesc_ = new ::aixh::AIXLayer_AIXConvolutionDesc(*from._impl_.convdesc_);
  }
  if (from._internal_has_samplingdesc()) {
    _this->_impl_.samplingdesc_ = new ::aixh::AIXLayer_AIXSamplingDesc(*from._impl_.samplingdesc_);
  }
  if (from._internal_has_ewadddesc()) {
    _this->_impl_.ewadddesc_ = new ::aixh::AIXLayer_AIXEWAddDesc(*from._impl_.ewadddesc_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.group_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.group_));
  // @@protoc_insertion_point(copy_constructor:aixh.AIXLayer)
}

inline void AIXLayer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){arena}
    , decltype(_impl_.preds_){arena}
    , decltype(_impl_.succs_){arena}
    , decltype(_impl_.filter_threshold_){arena}
    , decltype(_impl_.axes_){arena}
    , decltype(_impl_.scales_){arena}
    , decltype(_impl_.dilations_){arena}
    , decltype(_impl_.kernel_shape_){arena}
    , decltype(_impl_.output_padding_){arena}
    , decltype(_impl_.output_shape_){arena}
    , decltype(_impl_.pads_){arena}
    , decltype(_impl_.strides_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.mode_){}
    , decltype(_impl_.coordinate_transformation_mode_){}
    , decltype(_impl_.nearest_mode_){}
    , decltype(_impl_.auto_pad_){}
    , decltype(_impl_.input_){nullptr}
    , decltype(_impl_.output_){nullptr}
    , decltype(_impl_.filter_){nullptr}
    , decltype(_impl_.bias_){nullptr}
    , decltype(_impl_.scale_){nullptr}
    , decltype(_impl_.mean_){nullptr}
    , decltype(_impl_.variance_){nullptr}
    , decltype(_impl_.convdesc_){nullptr}
    , decltype(_impl_.samplingdesc_){nullptr}
    , decltype(_impl_.ewadddesc_){nullptr}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.input_threshold_){0}
    , decltype(_impl_.output_threshold_){0}
    , decltype(_impl_.epsilon_){0}
    , decltype(_impl_.alpha_){0}
    , decltype(_impl_.gamma_){0}
    , decltype(_impl_.axis_){0}
    , decltype(_impl_.stash_type_){0}
    , decltype(_impl_.transa_){int64_t{0}}
    , decltype(_impl_.transb_){int64_t{0}}
    , decltype(_impl_.beta_){0}
    , decltype(_impl_.activation_){0}
    , decltype(_impl_.keepdims_){int64_t{0}}
    , decltype(_impl_.noop_with_empty_axes_){int64_t{0}}
    , decltype(_impl_.select_last_index_){int64_t{0}}
    , decltype(_impl_.extrapolation_value_){0}
    , decltype(_impl_.cubic_coeff_a_){0}
    , decltype(_impl_.exclude_outside_){int64_t{0}}
    , decltype(_impl_.group_){int64_t{0}}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.coordinate_transformation_mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.coordinate_transformation_mode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nearest_mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nearest_mode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.auto_pad_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.auto_pad_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AIXLayer::~AIXLayer() {
  // @@protoc_insertion_point(destructor:aixh.AIXLayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AIXLayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.type_.~RepeatedField();
  _impl_.preds_.~RepeatedField();
  _impl_.succs_.~RepeatedField();
  _impl_.filter_threshold_.~RepeatedField();
  _impl_.axes_.~RepeatedField();
  _impl_.scales_.~RepeatedField();
  _impl_.dilations_.~RepeatedField();
  _impl_.kernel_shape_.~RepeatedField();
  _impl_.output_padding_.~RepeatedField();
  _impl_.output_shape_.~RepeatedField();
  _impl_.pads_.~RepeatedField();
  _impl_.strides_.~RepeatedField();
  _impl_.name_.Destroy();
  _impl_.mode_.Destroy();
  _impl_.coordinate_transformation_mode_.Destroy();
  _impl_.nearest_mode_.Destroy();
  _impl_.auto_pad_.Destroy();
  if (this != internal_default_instance()) delete _impl_.input_;
  if (this != internal_default_instance()) delete _impl_.output_;
  if (this != internal_default_instance()) delete _impl_.filter_;
  if (this != internal_default_instance()) delete _impl_.bias_;
  if (this != internal_default_instance()) delete _impl_.scale_;
  if (this != internal_default_instance()) delete _impl_.mean_;
  if (this != internal_default_instance()) delete _impl_.variance_;
  if (this != internal_default_instance()) delete _impl_.convdesc_;
  if (this != internal_default_instance()) delete _impl_.samplingdesc_;
  if (this != internal_default_instance()) delete _impl_.ewadddesc_;
}

void AIXLayer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AIXLayer::Clear() {
// @@protoc_insertion_point(message_clear_start:aixh.AIXLayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_.Clear();
  _impl_.preds_.Clear();
  _impl_.succs_.Clear();
  _impl_.filter_threshold_.Clear();
  _impl_.axes_.Clear();
  _impl_.scales_.Clear();
  _impl_.dilations_.Clear();
  _impl_.kernel_shape_.Clear();
  _impl_.output_padding_.Clear();
  _impl_.output_shape_.Clear();
  _impl_.pads_.Clear();
  _impl_.strides_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.mode_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.coordinate_transformation_mode_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.nearest_mode_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.auto_pad_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.input_ != nullptr);
      _impl_.input_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.output_ != nullptr);
      _impl_.output_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.filter_ != nullptr);
      _impl_.filter_->Clear();
    }
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.bias_ != nullptr);
      _impl_.bias_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.scale_ != nullptr);
      _impl_.scale_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.mean_ != nullptr);
      _impl_.mean_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.variance_ != nullptr);
      _impl_.variance_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.convdesc_ != nullptr);
      _impl_.convdesc_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.samplingdesc_ != nullptr);
      _impl_.samplingdesc_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(_impl_.ewadddesc_ != nullptr);
      _impl_.ewadddesc_->Clear();
    }
  }
  _impl_.id_ = 0;
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.input_threshold_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.transa_) -
        reinterpret_cast<char*>(&_impl_.input_threshold_)) + sizeof(_impl_.transa_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.transb_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.cubic_coeff_a_) -
        reinterpret_cast<char*>(&_impl_.transb_)) + sizeof(_impl_.cubic_coeff_a_));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.exclude_outside_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.group_) -
        reinterpret_cast<char*>(&_impl_.exclude_outside_)) + sizeof(_impl_.group_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AIXLayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&_impl_._has_bits_);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aixh.AIXLayer.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .aixh.AIXLayer.AIXLayerType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::aixh::AIXLayer_AIXLayerType_IsValid(val))) {
              _internal_add_type(static_cast<::aixh::AIXLayer_AIXLayerType>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_type(), ptr, ctx, ::aixh::AIXLayer_AIXLayerType_IsValid, &_internal_metadata_, 3);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 preds = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_preds(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_preds(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 succs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_succs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_succs(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .aixh.AIXLayer.AIXTensor input = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .aixh.AIXLayer.AIXTensor output = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_output(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .aixh.AIXLayer.AIXTensor filter = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .aixh.AIXLayer.AIXTensor bias = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_bias(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .aixh.AIXLayer.AIXTensor scale = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_scale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .aixh.AIXLayer.AIXTensor mean = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_mean(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .aixh.AIXLayer.AIXTensor variance = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_variance(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float input_threshold = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _Internal::set_has_input_threshold(&_impl_._has_bits_);
          _impl_.input_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float output_threshold = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          _Internal::set_has_output_threshold(&_impl_._has_bits_);
          _impl_.output_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float filter_threshold = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_filter_threshold(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<125>(ptr));
        } else if (static_cast<uint8_t>(tag) == 122) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_filter_threshold(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float epsilon = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 133)) {
          _Internal::set_has_epsilon(&_impl_._has_bits_);
          _impl_.epsilon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float alpha = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 141)) {
          _Internal::set_has_alpha(&_impl_._has_bits_);
          _impl_.alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float gamma = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 149)) {
          _Internal::set_has_gamma(&_impl_._has_bits_);
          _impl_.gamma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required .aixh.AIXLayer.AIXConvolutionDesc convdesc = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_convdesc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .aixh.AIXLayer.AIXSamplingDesc samplingdesc = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_samplingdesc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .aixh.AIXLayer.AIXEWAddDesc ewadddesc = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_ewadddesc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 axis = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_axis(&_impl_._has_bits_);
          _impl_.axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 stash_type = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_stash_type(&_impl_._has_bits_);
          _impl_.stash_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float beta = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 205)) {
          _Internal::set_has_beta(&_impl_._has_bits_);
          _impl_.beta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int64 transA = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_transa(&_impl_._has_bits_);
          _impl_.transa_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 transB = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_transb(&_impl_._has_bits_);
          _impl_.transb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 keepdims = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_keepdims(&_impl_._has_bits_);
          _impl_.keepdims_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 noop_with_empty_axes = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_noop_with_empty_axes(&_impl_._has_bits_);
          _impl_.noop_with_empty_axes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .aixh.AIXLayer.AIXActivationMode activation = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::aixh::AIXLayer_AIXActivationMode_IsValid(val))) {
            _internal_set_activation(static_cast<::aixh::AIXLayer_AIXActivationMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(30, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int64 select_last_index = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_select_last_index(&_impl_._has_bits_);
          _impl_.select_last_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 axes = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_axes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<256>(ptr));
        } else if (static_cast<uint8_t>(tag) == 2) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_axes(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string mode = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_mode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aixh.AIXLayer.mode");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated float scales = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_scales(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<277>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_scales(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float extrapolation_value = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_extrapolation_value(&_impl_._has_bits_);
          _impl_.extrapolation_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional string coordinate_transformation_mode = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_coordinate_transformation_mode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aixh.AIXLayer.coordinate_transformation_mode");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string nearest_mode = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_nearest_mode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aixh.AIXLayer.nearest_mode");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional float cubic_coeff_a = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_cubic_coeff_a(&_impl_._has_bits_);
          _impl_.cubic_coeff_a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int64 exclude_outside = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_exclude_outside(&_impl_._has_bits_);
          _impl_.exclude_outside_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string auto_pad = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_auto_pad();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "aixh.AIXLayer.auto_pad");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated int64 dilations = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_dilations(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<328>(ptr));
        } else if (static_cast<uint8_t>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_dilations(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 group = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_group(&_impl_._has_bits_);
          _impl_.group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 kernel_shape = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_kernel_shape(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<344>(ptr));
        } else if (static_cast<uint8_t>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_kernel_shape(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 output_padding = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_output_padding(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<352>(ptr));
        } else if (static_cast<uint8_t>(tag) == 98) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_output_padding(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 output_shape = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_output_shape(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<360>(ptr));
        } else if (static_cast<uint8_t>(tag) == 106) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_output_shape(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 pads = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_pads(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<368>(ptr));
        } else if (static_cast<uint8_t>(tag) == 114) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_pads(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 strides = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_strides(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<376>(ptr));
        } else if (static_cast<uint8_t>(tag) == 122) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_strides(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AIXLayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aixh.AIXLayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "aixh.AIXLayer.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated .aixh.AIXLayer.AIXLayerType type = 3;
  for (int i = 0, n = this->_internal_type_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_type(i), target);
  }

  // repeated int32 preds = 4;
  for (int i = 0, n = this->_internal_preds_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_preds(i), target);
  }

  // repeated int32 succs = 5;
  for (int i = 0, n = this->_internal_succs_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_succs(i), target);
  }

  // optional .aixh.AIXLayer.AIXTensor input = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::input(this),
        _Internal::input(this).GetCachedSize(), target, stream);
  }

  // optional .aixh.AIXLayer.AIXTensor output = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::output(this),
        _Internal::output(this).GetCachedSize(), target, stream);
  }

  // optional .aixh.AIXLayer.AIXTensor filter = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::filter(this),
        _Internal::filter(this).GetCachedSize(), target, stream);
  }

  // optional .aixh.AIXLayer.AIXTensor bias = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::bias(this),
        _Internal::bias(this).GetCachedSize(), target, stream);
  }

  // optional .aixh.AIXLayer.AIXTensor scale = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::scale(this),
        _Internal::scale(this).GetCachedSize(), target, stream);
  }

  // optional .aixh.AIXLayer.AIXTensor mean = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::mean(this),
        _Internal::mean(this).GetCachedSize(), target, stream);
  }

  // optional .aixh.AIXLayer.AIXTensor variance = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::variance(this),
        _Internal::variance(this).GetCachedSize(), target, stream);
  }

  // optional float input_threshold = 13;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_input_threshold(), target);
  }

  // optional float output_threshold = 14;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(14, this->_internal_output_threshold(), target);
  }

  // repeated float filter_threshold = 15;
  for (int i = 0, n = this->_internal_filter_threshold_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(15, this->_internal_filter_threshold(i), target);
  }

  // optional float epsilon = 16;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(16, this->_internal_epsilon(), target);
  }

  // optional float alpha = 17;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(17, this->_internal_alpha(), target);
  }

  // optional float gamma = 18;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(18, this->_internal_gamma(), target);
  }

  // required .aixh.AIXLayer.AIXConvolutionDesc convdesc = 20;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::convdesc(this),
        _Internal::convdesc(this).GetCachedSize(), target, stream);
  }

  // optional .aixh.AIXLayer.AIXSamplingDesc samplingdesc = 21;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::samplingdesc(this),
        _Internal::samplingdesc(this).GetCachedSize(), target, stream);
  }

  // optional .aixh.AIXLayer.AIXEWAddDesc ewadddesc = 22;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::ewadddesc(this),
        _Internal::ewadddesc(this).GetCachedSize(), target, stream);
  }

  // optional int32 axis = 23;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(23, this->_internal_axis(), target);
  }

  // optional int32 stash_type = 24;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(24, this->_internal_stash_type(), target);
  }

  // optional float beta = 25;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(25, this->_internal_beta(), target);
  }

  // optional int64 transA = 26;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(26, this->_internal_transa(), target);
  }

  // optional int64 transB = 27;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(27, this->_internal_transb(), target);
  }

  // optional int64 keepdims = 28;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(28, this->_internal_keepdims(), target);
  }

  // optional int64 noop_with_empty_axes = 29;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(29, this->_internal_noop_with_empty_axes(), target);
  }

  // optional .aixh.AIXLayer.AIXActivationMode activation = 30;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      30, this->_internal_activation(), target);
  }

  // optional int64 select_last_index = 31;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(31, this->_internal_select_last_index(), target);
  }

  // repeated int64 axes = 32;
  for (int i = 0, n = this->_internal_axes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(32, this->_internal_axes(i), target);
  }

  // optional string mode = 33;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mode().data(), static_cast<int>(this->_internal_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "aixh.AIXLayer.mode");
    target = stream->WriteStringMaybeAliased(
        33, this->_internal_mode(), target);
  }

  // repeated float scales = 34;
  for (int i = 0, n = this->_internal_scales_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(34, this->_internal_scales(i), target);
  }

  // optional float extrapolation_value = 35;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(35, this->_internal_extrapolation_value(), target);
  }

  // optional string coordinate_transformation_mode = 36;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_coordinate_transformation_mode().data(), static_cast<int>(this->_internal_coordinate_transformation_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "aixh.AIXLayer.coordinate_transformation_mode");
    target = stream->WriteStringMaybeAliased(
        36, this->_internal_coordinate_transformation_mode(), target);
  }

  // optional string nearest_mode = 37;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_nearest_mode().data(), static_cast<int>(this->_internal_nearest_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "aixh.AIXLayer.nearest_mode");
    target = stream->WriteStringMaybeAliased(
        37, this->_internal_nearest_mode(), target);
  }

  // optional float cubic_coeff_a = 38;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(38, this->_internal_cubic_coeff_a(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional int64 exclude_outside = 39;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(39, this->_internal_exclude_outside(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string auto_pad = 40;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_auto_pad().data(), static_cast<int>(this->_internal_auto_pad().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "aixh.AIXLayer.auto_pad");
    target = stream->WriteStringMaybeAliased(
        40, this->_internal_auto_pad(), target);
  }

  // repeated int64 dilations = 41;
  for (int i = 0, n = this->_internal_dilations_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(41, this->_internal_dilations(i), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional int64 group = 42;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(42, this->_internal_group(), target);
  }

  // repeated int64 kernel_shape = 43;
  for (int i = 0, n = this->_internal_kernel_shape_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(43, this->_internal_kernel_shape(i), target);
  }

  // repeated int64 output_padding = 44;
  for (int i = 0, n = this->_internal_output_padding_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(44, this->_internal_output_padding(i), target);
  }

  // repeated int64 output_shape = 45;
  for (int i = 0, n = this->_internal_output_shape_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(45, this->_internal_output_shape(i), target);
  }

  // repeated int64 pads = 46;
  for (int i = 0, n = this->_internal_pads_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(46, this->_internal_pads(i), target);
  }

  // repeated int64 strides = 47;
  for (int i = 0, n = this->_internal_strides_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(47, this->_internal_strides(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aixh.AIXLayer)
  return target;
}

size_t AIXLayer::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:aixh.AIXLayer)
  size_t total_size = 0;

  if (_internal_has_convdesc()) {
    // required .aixh.AIXLayer.AIXConvolutionDesc convdesc = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.convdesc_);
  }

  if (_internal_has_id()) {
    // required int32 id = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return total_size;
}
size_t AIXLayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aixh.AIXLayer)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00009000) ^ 0x00009000) == 0) {  // All required fields are present.
    // required .aixh.AIXLayer.AIXConvolutionDesc convdesc = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.convdesc_);

    // required int32 id = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aixh.AIXLayer.AIXLayerType type = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_type(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated int32 preds = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.preds_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_preds_size());
    total_size += data_size;
  }

  // repeated int32 succs = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.succs_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_succs_size());
    total_size += data_size;
  }

  // repeated float filter_threshold = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_filter_threshold_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_filter_threshold_size());
    total_size += data_size;
  }

  // repeated int64 axes = 32;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.axes_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_axes_size());
    total_size += data_size;
  }

  // repeated float scales = 34;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_scales_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_scales_size());
    total_size += data_size;
  }

  // repeated int64 dilations = 41;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.dilations_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_dilations_size());
    total_size += data_size;
  }

  // repeated int64 kernel_shape = 43;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.kernel_shape_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_kernel_shape_size());
    total_size += data_size;
  }

  // repeated int64 output_padding = 44;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.output_padding_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_output_padding_size());
    total_size += data_size;
  }

  // repeated int64 output_shape = 45;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.output_shape_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_output_shape_size());
    total_size += data_size;
  }

  // repeated int64 pads = 46;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.pads_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_pads_size());
    total_size += data_size;
  }

  // repeated int64 strides = 47;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.strides_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_strides_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string mode = 33;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mode());
    }

    // optional string coordinate_transformation_mode = 36;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_coordinate_transformation_mode());
    }

    // optional string nearest_mode = 37;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_nearest_mode());
    }

    // optional string auto_pad = 40;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_auto_pad());
    }

    // optional .aixh.AIXLayer.AIXTensor input = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.input_);
    }

    // optional .aixh.AIXLayer.AIXTensor output = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.output_);
    }

    // optional .aixh.AIXLayer.AIXTensor filter = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.filter_);
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional .aixh.AIXLayer.AIXTensor bias = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.bias_);
    }

    // optional .aixh.AIXLayer.AIXTensor scale = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.scale_);
    }

    // optional .aixh.AIXLayer.AIXTensor mean = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.mean_);
    }

    // optional .aixh.AIXLayer.AIXTensor variance = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.variance_);
    }

  }
  if (cached_has_bits & 0x00006000u) {
    // optional .aixh.AIXLayer.AIXSamplingDesc samplingdesc = 21;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.samplingdesc_);
    }

    // optional .aixh.AIXLayer.AIXEWAddDesc ewadddesc = 22;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ewadddesc_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float input_threshold = 13;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 4;
    }

    // optional float output_threshold = 14;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 4;
    }

    // optional float epsilon = 16;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 4;
    }

    // optional float alpha = 17;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 4;
    }

    // optional float gamma = 18;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 4;
    }

    // optional int32 axis = 23;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_axis());
    }

    // optional int32 stash_type = 24;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_stash_type());
    }

    // optional int64 transA = 26;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_transa());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional int64 transB = 27;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_transb());
    }

    // optional float beta = 25;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 4;
    }

    // optional .aixh.AIXLayer.AIXActivationMode activation = 30;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_activation());
    }

    // optional int64 keepdims = 28;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_keepdims());
    }

    // optional int64 noop_with_empty_axes = 29;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_noop_with_empty_axes());
    }

    // optional int64 select_last_index = 31;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_select_last_index());
    }

    // optional float extrapolation_value = 35;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 4;
    }

    // optional float cubic_coeff_a = 38;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 4;
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 exclude_outside = 39;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_exclude_outside());
    }

    // optional int64 group = 42;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_group());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AIXLayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AIXLayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AIXLayer::GetClassData() const { return &_class_data_; }


void AIXLayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AIXLayer*>(&to_msg);
  auto& from = static_cast<const AIXLayer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aixh.AIXLayer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.type_.MergeFrom(from._impl_.type_);
  _this->_impl_.preds_.MergeFrom(from._impl_.preds_);
  _this->_impl_.succs_.MergeFrom(from._impl_.succs_);
  _this->_impl_.filter_threshold_.MergeFrom(from._impl_.filter_threshold_);
  _this->_impl_.axes_.MergeFrom(from._impl_.axes_);
  _this->_impl_.scales_.MergeFrom(from._impl_.scales_);
  _this->_impl_.dilations_.MergeFrom(from._impl_.dilations_);
  _this->_impl_.kernel_shape_.MergeFrom(from._impl_.kernel_shape_);
  _this->_impl_.output_padding_.MergeFrom(from._impl_.output_padding_);
  _this->_impl_.output_shape_.MergeFrom(from._impl_.output_shape_);
  _this->_impl_.pads_.MergeFrom(from._impl_.pads_);
  _this->_impl_.strides_.MergeFrom(from._impl_.strides_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_mode(from._internal_mode());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_coordinate_transformation_mode(from._internal_coordinate_transformation_mode());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_nearest_mode(from._internal_nearest_mode());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_auto_pad(from._internal_auto_pad());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_input()->::aixh::AIXLayer_AIXTensor::MergeFrom(
          from._internal_input());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_output()->::aixh::AIXLayer_AIXTensor::MergeFrom(
          from._internal_output());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_filter()->::aixh::AIXLayer_AIXTensor::MergeFrom(
          from._internal_filter());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_bias()->::aixh::AIXLayer_AIXTensor::MergeFrom(
          from._internal_bias());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_scale()->::aixh::AIXLayer_AIXTensor::MergeFrom(
          from._internal_scale());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_mean()->::aixh::AIXLayer_AIXTensor::MergeFrom(
          from._internal_mean());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_variance()->::aixh::AIXLayer_AIXTensor::MergeFrom(
          from._internal_variance());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_convdesc()->::aixh::AIXLayer_AIXConvolutionDesc::MergeFrom(
          from._internal_convdesc());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_samplingdesc()->::aixh::AIXLayer_AIXSamplingDesc::MergeFrom(
          from._internal_samplingdesc());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_mutable_ewadddesc()->::aixh::AIXLayer_AIXEWAddDesc::MergeFrom(
          from._internal_ewadddesc());
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.input_threshold_ = from._impl_.input_threshold_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.output_threshold_ = from._impl_.output_threshold_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.epsilon_ = from._impl_.epsilon_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.alpha_ = from._impl_.alpha_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.gamma_ = from._impl_.gamma_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.axis_ = from._impl_.axis_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.stash_type_ = from._impl_.stash_type_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.transa_ = from._impl_.transa_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.transb_ = from._impl_.transb_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.beta_ = from._impl_.beta_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.activation_ = from._impl_.activation_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.keepdims_ = from._impl_.keepdims_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.noop_with_empty_axes_ = from._impl_.noop_with_empty_axes_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.select_last_index_ = from._impl_.select_last_index_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.extrapolation_value_ = from._impl_.extrapolation_value_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.cubic_coeff_a_ = from._impl_.cubic_coeff_a_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.exclude_outside_ = from._impl_.exclude_outside_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.group_ = from._impl_.group_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AIXLayer::CopyFrom(const AIXLayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aixh.AIXLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AIXLayer::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_input()) {
    if (!_impl_.input_->IsInitialized()) return false;
  }
  if (_internal_has_output()) {
    if (!_impl_.output_->IsInitialized()) return false;
  }
  if (_internal_has_filter()) {
    if (!_impl_.filter_->IsInitialized()) return false;
  }
  if (_internal_has_bias()) {
    if (!_impl_.bias_->IsInitialized()) return false;
  }
  if (_internal_has_scale()) {
    if (!_impl_.scale_->IsInitialized()) return false;
  }
  if (_internal_has_mean()) {
    if (!_impl_.mean_->IsInitialized()) return false;
  }
  if (_internal_has_variance()) {
    if (!_impl_.variance_->IsInitialized()) return false;
  }
  if (_internal_has_convdesc()) {
    if (!_impl_.convdesc_->IsInitialized()) return false;
  }
  if (_internal_has_samplingdesc()) {
    if (!_impl_.samplingdesc_->IsInitialized()) return false;
  }
  return true;
}

void AIXLayer::InternalSwap(AIXLayer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  _impl_.type_.InternalSwap(&other->_impl_.type_);
  _impl_.preds_.InternalSwap(&other->_impl_.preds_);
  _impl_.succs_.InternalSwap(&other->_impl_.succs_);
  _impl_.filter_threshold_.InternalSwap(&other->_impl_.filter_threshold_);
  _impl_.axes_.InternalSwap(&other->_impl_.axes_);
  _impl_.scales_.InternalSwap(&other->_impl_.scales_);
  _impl_.dilations_.InternalSwap(&other->_impl_.dilations_);
  _impl_.kernel_shape_.InternalSwap(&other->_impl_.kernel_shape_);
  _impl_.output_padding_.InternalSwap(&other->_impl_.output_padding_);
  _impl_.output_shape_.InternalSwap(&other->_impl_.output_shape_);
  _impl_.pads_.InternalSwap(&other->_impl_.pads_);
  _impl_.strides_.InternalSwap(&other->_impl_.strides_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mode_, lhs_arena,
      &other->_impl_.mode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.coordinate_transformation_mode_, lhs_arena,
      &other->_impl_.coordinate_transformation_mode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nearest_mode_, lhs_arena,
      &other->_impl_.nearest_mode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.auto_pad_, lhs_arena,
      &other->_impl_.auto_pad_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AIXLayer, _impl_.group_)
      + sizeof(AIXLayer::_impl_.group_)
      - PROTOBUF_FIELD_OFFSET(AIXLayer, _impl_.input_)>(
          reinterpret_cast<char*>(&_impl_.input_),
          reinterpret_cast<char*>(&other->_impl_.input_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AIXLayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_aixh_2eproto_getter, &descriptor_table_aixh_2eproto_once,
      file_level_metadata_aixh_2eproto[4]);
}

// ===================================================================

class AIXGraph::_Internal {
 public:
};

AIXGraph::AIXGraph(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aixh.AIXGraph)
}
AIXGraph::AIXGraph(const AIXGraph& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AIXGraph* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.layer_){from._impl_.layer_}
    , decltype(_impl_.input_layers_){from._impl_.input_layers_}
    , decltype(_impl_.output_layers_){from._impl_.output_layers_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aixh.AIXGraph)
}

inline void AIXGraph::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.layer_){arena}
    , decltype(_impl_.input_layers_){arena}
    , decltype(_impl_.output_layers_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AIXGraph::~AIXGraph() {
  // @@protoc_insertion_point(destructor:aixh.AIXGraph)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AIXGraph::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.layer_.~RepeatedPtrField();
  _impl_.input_layers_.~RepeatedField();
  _impl_.output_layers_.~RepeatedField();
}

void AIXGraph::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AIXGraph::Clear() {
// @@protoc_insertion_point(message_clear_start:aixh.AIXGraph)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.layer_.Clear();
  _impl_.input_layers_.Clear();
  _impl_.output_layers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AIXGraph::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .aixh.AIXLayer layer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_layer(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 input_layers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_input_layers(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_input_layers(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 output_layers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_output_layers(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_output_layers(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AIXGraph::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aixh.AIXGraph)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aixh.AIXLayer layer = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_layer_size()); i < n; i++) {
    const auto& repfield = this->_internal_layer(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated int32 input_layers = 2;
  for (int i = 0, n = this->_internal_input_layers_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_input_layers(i), target);
  }

  // repeated int32 output_layers = 3;
  for (int i = 0, n = this->_internal_output_layers_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_output_layers(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aixh.AIXGraph)
  return target;
}

size_t AIXGraph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aixh.AIXGraph)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aixh.AIXLayer layer = 1;
  total_size += 1UL * this->_internal_layer_size();
  for (const auto& msg : this->_impl_.layer_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 input_layers = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.input_layers_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_input_layers_size());
    total_size += data_size;
  }

  // repeated int32 output_layers = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.output_layers_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_output_layers_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AIXGraph::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AIXGraph::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AIXGraph::GetClassData() const { return &_class_data_; }


void AIXGraph::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AIXGraph*>(&to_msg);
  auto& from = static_cast<const AIXGraph&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aixh.AIXGraph)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.layer_.MergeFrom(from._impl_.layer_);
  _this->_impl_.input_layers_.MergeFrom(from._impl_.input_layers_);
  _this->_impl_.output_layers_.MergeFrom(from._impl_.output_layers_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AIXGraph::CopyFrom(const AIXGraph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aixh.AIXGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AIXGraph::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.layer_))
    return false;
  return true;
}

void AIXGraph::InternalSwap(AIXGraph* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.layer_.InternalSwap(&other->_impl_.layer_);
  _impl_.input_layers_.InternalSwap(&other->_impl_.input_layers_);
  _impl_.output_layers_.InternalSwap(&other->_impl_.output_layers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AIXGraph::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_aixh_2eproto_getter, &descriptor_table_aixh_2eproto_once,
      file_level_metadata_aixh_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace aixh
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::aixh::AIXLayer_AIXConvolutionDesc*
Arena::CreateMaybeMessage< ::aixh::AIXLayer_AIXConvolutionDesc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aixh::AIXLayer_AIXConvolutionDesc >(arena);
}
template<> PROTOBUF_NOINLINE ::aixh::AIXLayer_AIXSamplingDesc*
Arena::CreateMaybeMessage< ::aixh::AIXLayer_AIXSamplingDesc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aixh::AIXLayer_AIXSamplingDesc >(arena);
}
template<> PROTOBUF_NOINLINE ::aixh::AIXLayer_AIXEWAddDesc*
Arena::CreateMaybeMessage< ::aixh::AIXLayer_AIXEWAddDesc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aixh::AIXLayer_AIXEWAddDesc >(arena);
}
template<> PROTOBUF_NOINLINE ::aixh::AIXLayer_AIXTensor*
Arena::CreateMaybeMessage< ::aixh::AIXLayer_AIXTensor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aixh::AIXLayer_AIXTensor >(arena);
}
template<> PROTOBUF_NOINLINE ::aixh::AIXLayer*
Arena::CreateMaybeMessage< ::aixh::AIXLayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aixh::AIXLayer >(arena);
}
template<> PROTOBUF_NOINLINE ::aixh::AIXGraph*
Arena::CreateMaybeMessage< ::aixh::AIXGraph >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aixh::AIXGraph >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
